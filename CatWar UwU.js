// ==UserScript==
// @name         CatWar UwU
// @namespace    http://tampermonkey.net/
// @version      v1.33.3-11.24
// @description  –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CatWar'–∞, –∏ –Ω–µ —Ç–æ–ª—å–∫–æ...
// @author       Ibirtem / –ó–∞—Ç–º–µ–Ω–Ω–∞—è ( https://catwar.net/cat1477928 )
// @copyright    2024, Ibirtem (https://openuserjs.org/users/Ibirtem)
// @supportURL   https://catwar.net/cat1477928
// @homepageURL  https://openuserjs.org/scripts/Ibirtem/CatWar_UwU
// @match        http*://*.catwar.net/*
// @updateURL    https://github.com/Ibirtem/CatWar/raw/main/CatWar%20UwU.js
// @downloadURL  https://github.com/Ibirtem/CatWar/raw/main/CatWar%20UwU.js
// @license      MIT
// @iconURL      https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/partly_sunny_rain.png
// ==/UserScript==

"use strict"; // –î–µ–ª–∞—é –≤–∏–¥ —á—Ç–æ –∫—Ä—É—Ç–æ–π.

// ====================================================================================================================
//   . . . DEFAULT –ù–ê–°–¢–†–û–ô–ö–ò . . .
// ====================================================================================================================
const current_uwu_version = "1.33.3";
// ‚ú®ü¶ê‚ú®ü¶ê‚ú®
const uwuDefaultSettings = {
  settingsTheme: "dark",

  weatherEnabled: false,
  weatherDrops: false,
  lowPerformanceMode: false,
  minecraftStyle: false,
  alwaysDay: false,
  manualWeatherPanel: false,
  skyInHeader: false,
  auroraPos: "1",

  backgroundRepeat: false,
  backgroundUser: false,
  backgroundUserImageURL: "",
  gameFieldBackgroundUser: false,
  gameFieldBackgroundUserImageURL: "",
  userTheme: false,
  showOtherCatsList: "2",
  commentsAvatars: false,

  chatHeight: "275",
  newChat: false,
  reverseChat: false, 
  newChatInput: false,
  namesForNotification: "",

  redesignCostumsSettings: false,

  notificationPM: false,
  notificationActionEnd: false,
  notificationInMouth: false,
  notificationInFightMode: false,
  showHintWhenToSniff: false,
  duplicateTimeInBrowserTab: false,


  cellsBorders: false,
  cellsBordersThickness: "1",
  cellsBordersColor: "#ffffff",
  cellsNumbers: false,
  fastStyles: false,
  displayParametersPercentages: false,
  compactMouth: false,
  showMoreCatInfo: false,
  showParametersDetails: false,

  draggingFightPanel: false,
  compactFightLog: false,
  fightPanelAdjustableHeight: false,
  fightPanelHeight: "70",
  fightTeams: false,
  fightTeamsColors: {
    team1: ["#41cd70", "#cd4141"],
    team2: ["#c968ff", "#cd4141"],
    team3: ["#44bcff", "#cd4141"],
    team4: ["#FFFF00", "#cd4141"],
  },
  fightTeamsPanelHight: "100",

  highlightResources: false,
  highlightResourcesStyle: "background",

  showClock: false,
  clockStyle: "compact",
  clockFontSize: "14",
  clockPosition: "fly",

  describeHuntingSmell: false,
  huntingVirtualJoystick: false,
  sizeHuntingVirtualJoystick: "150",

  climbingPanel: false,
  climbingPanelOrientation: "vertical",
  climbingNotificationsNumbers: false,
  climbingRefreshNotification: false,
  climbingRefreshNotificationSound: "notificationSound1",
  climbingRefreshNotificationVolume: "5",

  cleaningLog: false,
  cleaningLogStyle: "smart",
  cleaningLogShowID: false,
  cleaningLogHeight: "120",

  myNameNotificationSound: "notificationSound2",
  notificationMyNameVolume: "5",

  userQuickLinks: "",
  historyHeight: "215",

  parametersColors: {
    dream: ["#008000", "#008000", "#ff0000", "#ff0000"],
    hunger: ["#008000", "#008000", "#ff0000", "#ff0000"],
    thirst: ["#008000", "#008000", "#ff0000", "#ff0000"],
    need: ["#008000", "#008000", "#ff0000", "#ff0000"],
    health: ["#008000", "#008000", "#ff0000", "#ff0000"],
    clean: ["#008000", "#008000", "#ff0000", "#ff0000"],

    smell: ["#008000", "#008000", "#cccccc", "#cccccc"],
    dig: ["#008000", "#008000", "#cccccc", "#cccccc"],
    swim: ["#008000", "#008000", "#cccccc", "#cccccc"],
    might: ["#008000", "#008000", "#cccccc", "#cccccc"],
    tree: ["#008000", "#008000", "#cccccc", "#cccccc"],
    observ: ["#008000", "#008000", "#cccccc", "#cccccc"],

    other: ["#008000", "#008000", "#cccccc", "#cccccc"],
  },
  parametersBackgroundImage: false,
  parametersUserBackgroundImage: false,
  parametersUserBackgroundImageURL: "",

  restoreBlogCreation: false,
  moreBBCodes: false,
  commentPreview: false,
  moreCommentButtons: false,
  lsWrapPreview: false,
  calculators: false,

  extendedSettingsPanel: false,
  showUpdateNotification: false,
  showSplashScreens: false,
  extendedHints: true,
  GMbetaTest: false,
};

// ====================================================================================================================
//   . . . –¢–ê–†–ì–ï–¢–ù–´–ï –°–°–´–õ–ö–ò . . .
// ====================================================================================================================
const targetSettings = /^https:\/\/catwar\.net\/settings/;
const targetCW3 = "https://catwar.net/cw3/";
const targetCW3Hunt = "https://catwar.net/cw3/jagd";
const targetMainProfile = /^https:\/\/catwar\.net\/$/;
const targetProfile = /^https:\/\/catwar\.net\/cat\d+$/;
const targetLs = /^https:\/\/catwar\.net\/ls/;
const targetLsNew = /^https:\/\/catwar\.net\/ls\?new(=.*)?$/;
const targetChats = /^https:\/\/catwar\.net\/chat/;
const targetBlog = /^https:\/\/catwar\.net\/(?:blog\d+|blogs)(?:$|[/?#])/i;
const targetBlogsCreation = /^https:\/\/catwar\.net\/blogs\?creation/;
const targetSniff = /^https:\/\/catwar\.net\/sniff(?:\d+|)(?:$|[/?#])/i;
const targetSniffCreation = /^https:\/\/catwar\.net\/sniff\?creation/;

// ====================================================================================================================
//   . . . –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –¶–í–ï–¢–û–í–´–ï –¢–ï–ú–´ . . .
// ====================================================================================================================
const defaultThemes = {
  "–¢—ë–º–Ω–∞—è –¢–µ–º–∞": {
    colors: {
      backgroundColor: "#161616",
      blocksColor: "#242424",
      chatColor: "#242424",
      textColor: "#d5d5d5",
      catTooltipBackground: "#242424",
      fightPanelBackground: "#242424",
      linkColor: "#d5d5d5",
      accentColor1: "#111111",
      accentColor2: "#2e2e2e82",
      accentColor3: "#fc872a",
      moveNameColor: "#d5d5d5",
      moveNameBackground: "#242424",
    },
  },
};

// ====================================================================================================================
//   . . . HTML –ü–ê–ù–ï–õ–¨ –ù–ê–°–¢–†–û–ï–ö . . .
// ====================================================================================================================
const uwusettings = // html
`
<div id="uwusettings">

  <div id="uwusettings-header">
    <div id="uwusettings-header-glass">
      <div class="main-settings-container">
        <div id="settingsTheme" class="custom-select">
          <label for="settingsTheme">–¢–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</label>
          <div class="select-selected">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è</div>
          <div class="select-items">
            <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
          </div>
        </div>

          <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ CatWar UwU</h1>
        <div class="link-container" title="–í–ö –ì—Ä—É–ø–ø–∞ –ø–æ –°–∫—Ä–∏–ø—Ç—É/–ú–æ–¥—É.">
          <a href="https://vk.com/catwar_uwu" target="_blank" rel="noopener noreferrer">
            <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/VK_logo.png" alt="–ò–∫–æ–Ω–∫–∞" width="36" height="36">
          </a>
        </div>
      </div>

      <hr id="uwu-hr" class="uwu-hr-head">
      <div id="button-container">
        <button id="effects-button" class="active">
          <h2>
            –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/partly_sunny_rain.png" alt="–ò–∫–æ–Ω–∫–∞"
              width="24" height="24" />
          </h2>
        </button>
        <button id="theme-button">
          <h2>
            –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/sparkles.png" alt="–ò–∫–æ–Ω–∫–∞" width="24"
              height="24" />
          </h2>
        </button>
        <button id="utility-button">
          <h2>
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π
            <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/flashlight.png" alt="–ò–∫–æ–Ω–∫–∞" width="24"
              height="24" />
          </h2>
        </button>
        <button id="modules-button">
          <h2>
            –ù–∞–¥—Å—Ç—Ä–æ–π–∫–∏
            <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/construction.png" alt="–ò–∫–æ–Ω–∫–∞" width="24"
              height="24" />
          </h2>
        </button>
      </div>
      <hr id="uwu-hr" class="uwu-hr-head">
    </div>
  </div>

  <div id="uwusettings-main">
    <div id="effects-panel">

    <h2>–ü—Ä–∏—Ä–æ–¥–∞ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ</h2>

      <div>
        <p>
          –í–∫–ª—é—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –î–∏–Ω–∞–º–∏—á–Ω–æ–π –ø–æ–≥–æ–¥—ã –≤ –ò–≥—Ä–æ–≤–æ–π, —Ç–∞–∫–∏–µ –∫–∞–∫ –¥–æ–∂–¥—å, —Å–Ω–µ–≥–æ–ø–∞–¥—ã –∏–ª–∏ –°–µ–≤–µ—Ä–Ω—ã–µ –°–∏—è–Ω–∏—è.
        </p>
        <input type="checkbox" id="weather-enabled" data-setting="weatherEnabled" />
        <label for="weather-enabled">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</label>
      </div>

      <div>
        <p>
        –°–æ–∫—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü –¥–∏–Ω–∞–º–∏—á–Ω–æ–π –ø–æ–≥–æ–¥—ã, —É–≤–µ–ª–∏—á–∏–≤–∞—è —Ç–µ–º —Å–∞–º—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.
        </p>
      <input type="checkbox" id="low-Performance-Mode" data-setting="lowPerformanceMode" />
      <label for="low-Performance-Mode">–†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</label>
      </div>

      <div>
        <p>–ú–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—Ü –Ω–∞ —ç–∫—Ä–∞–Ω–µ.</p>
        <input type="checkbox" id="weather-drops" data-setting="weatherDrops" />
        <label for="weather-drops">–≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü</label>
      </div>

      <div>
        <p>–ó–∞–º–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü –Ω–∞ –∑–Ω–∞–∫–æ–º—ã–µ –≤—Å–µ–º–∏ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã.</p>
        <input type="checkbox" id="minecraft-style" data-setting="minecraftStyle" />
        <label for="minecraft-style-enabled">Minecraft —á–∞—Å—Ç–∏—Ü—ã</label>
      </div>

      <div>
        <p>–£–±–∏—Ä–∞–µ—Ç –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –ò–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.</p>
        <input type="checkbox" id="always-day" data-setting="alwaysDay" />
        <label for="always-day">–í—Å–µ–≥–¥–∞ –¥–µ–Ω—å/—è—Ä–∫–æ</label>
      </div>

      <div>
        <p>–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å –†—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥–æ–π –≤ ‚öôÔ∏è–ü–∞–Ω–µ–ª–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ò–≥—Ä–æ–≤–æ–π. –í—ã–∫–ª—é—á–∞–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–≥–æ–¥—ã.</p>
        <input type="checkbox" id="manual-Weather-Panel" data-setting="manualWeatherPanel" />
        <label for="manual-Weather-Panel">–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <p>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –°–µ–≤–µ—Ä–Ω–æ–≥–æ –°–∏—è–Ω–∏—è</p>
      <div id="auroraPanel">
        <input type="range" min="1" max="2" value="1" class="uwu-range-slider" id="aurora-pos" list="auroraStep"
          data-setting="auroraPos">
        <datalist id="auroraStep">
          <option value="1">–í–µ—Ä—Ö</option>
          <option value="2">–ù–∏–∑</option>
        </datalist>
      </div>

      <div>
        <p>–î–µ–ª–∞–µ—Ç –Ω–µ–±–æ —à–∞–ø–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä—è—á–∞ –ø–æ–¥ –∏–≥—Ä–æ–≤—É—é, –∞ —Ç–∞–∫ –∂–µ –ø–æ —Ñ–∞–∫—Ç—É —á–∏–Ω–∏—Ç –µ–≥–æ –ø–æ—Ç–µ—Ä—é –ø—Ä–∏ –†–µ–¥–∏–∑–∞–π–Ω–µ –∏–≥—Ä–æ–≤–æ–π. –ë—É–¥–µ—Ç
          –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–µ –æ—á–µ–Ω—å –Ω–∞ —à–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö –∏–∑-–∑–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>
        <input type="checkbox" id="sky-in-the-sky" data-setting="skyInHeader" />
        <label for="sky-in-the-sky">–ù–µ–±–æ –≤ –Ω–µ–±–µ.</label>
      </div>

    </div>

    <div id="theme-panel">

    <h2>–ü–æ–ª–µ –ò–≥—Ä–æ–≤–æ–π</h2>

    <div>
      <p> –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ñ–æ–Ω—ã –∏–≥—Ä–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ñ–æ–Ω. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1000—Ö1000 px.</p>
      <input type="checkbox" id="game-Field-background-User" data-setting="gameFieldBackgroundUser" />
      <label for="game-Field-background-User-enabled">–°—Ç–∞—Ç–∏—á–Ω—ã–π —Ñ–æ–Ω –ª–æ–∫–∞—Ü–∏–∏:</label>
      <input type="text" id="gameFieldSettingImageURLField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ URL" data-setting="gameFieldBackgroundUserImageURL" />
      <button id="SettingSaveButton1" class="uwu-button install-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </div>

    <div>
      <p>–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–ª–µ—Ç–æ–∫ –ò–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.</p>
      <input type="checkbox" id="cells-Borders" data-setting="cellsBorders" />
      <label for="cells-Borders">–ì—Ä–∞–Ω–∏—Ü—ã –∫–ª–µ—Ç–æ–∫</label>
    </div>
    <p>–¢–æ–ª—â–∏–Ω–∞/–Ø—Ä–∫–æ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü</p>
    <div id="step-slider">
      <input type="range" min="1" max="9" value="1" id="cells-Borders-Thickness" class="uwu-range-slider" list="ThicknessStep" data-setting="cellsBordersThickness">
      <datalist id="ThicknessStep">
      <option value="1">0.1</option>
      <option value="5">0.5</option>
      <option value="9">0.9</option>
      </datalist>
    </div>
    <div>
      <label for="cells-Borders-Color">–¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–ª–µ—Ç–æ–∫</label>
      <input type="color" id="cells-Borders-Color" data-setting="cellsBordersColor" value="#ffffff">
    </div>
    
    <div>
    <p>–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –ò–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —á–∏—Å–ª–∞–º–∏.</p>
      <input type="checkbox" id="cells-Numbers" data-setting="cellsNumbers" />
      <label for="cells-Numbers">–ù—É–º–µ—Ä–∞—Ü–∏—è –∫–ª–µ—Ç–æ–∫</label>
    </div>

      <div>
        <p>
          –°—Ç–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ–Ω, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π —Ñ–æ–Ω –ò–≥—Ä–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏, –∞ —Ç–∞–∫ –∂–µ
          —Ä–∞–∑–º—ã–≤–∞–µ—Ç –∏ –∑–∞—Ç–µ–º–Ω—è–µ—Ç –µ–≥–æ.
        </p>
        <input type="checkbox" id="background-repeat" data-setting="backgroundRepeat" />
        <label for="weather-enabled">–§–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ª–æ–∫–∞—Ü–∏–∏</label>
      </div>

      <div>
        <p>–°—Ç–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ–Ω –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏.</p>
        <input type="checkbox" id="background-user" data-setting="backgroundUser" />
        <label for="background-user-enabled">–°–≤–æ–π —Ñ–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</label>
        <input type="text" id="SettingImageURLField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ URL" data-setting="backgroundUserImageURL" />
        <button id="SettingSaveButton1" class="uwu-button install-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </div>

      <div>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Å–º–µ–Ω—è—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –≤ ‚öôÔ∏è–ü–∞–Ω–µ–ª–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ò–≥—Ä–æ–≤–æ–π.</p>
        <input type="checkbox" id="fast-Styles" data-setting="fastStyles" />
        <label for="fast-Styles">–ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∏–ª–∏</label>
        <label id="uwu-what-this" title="
            ‚Äî –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ '–û –∫–æ—Ç–µ'
            ‚Äî –°–∫—Ä—ã—Ç—å –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            ‚Äî –°–∫—Ä—ã—Ç—å —Ñ–æ–Ω –ò–≥—Ä–æ–≤–æ–≥–æ –ü–æ–ª—è
            ‚Äî –°–∫—Ä—ã—Ç—å –ù–µ–±–æ
            ‚Äî –í—Å–µ–≥–¥–∞ –¥–µ–Ω—å/—è—Ä–∫–æ
            ‚Äî –ì—Ä–∞–Ω–∏—Ü—ã –∫–ª–µ—Ç–æ–∫
            ">[?]</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–¢–µ–º—ã –∏ —Ü–≤–µ—Ç–∞ –ò–≥—Ä–æ–≤–æ–π</h2>

      <p>
        –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π. –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è "HEX"
        –∑–Ω–∞—á–µ–Ω–∏—è (–ü—Ä–∏–º–µ—Ä: #000) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏. –ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã –∏
        –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—ã–∫–ª—é—á–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞/—Ç–µ–º—ã –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö/–º–æ–¥–∞—Ö. –û—á–∏—Å—Ç–∏—Ç–µ –ø–æ–ª–µ
        —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ü–≤–µ—Ç–∞–º.
      </p>
      <input type="checkbox" id="user-theme" data-setting="userTheme" />
      <label for="user-theme-enabled">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ü–≤–µ—Ç–∞</label>

    <div id="theme-selector" class="uwu-select">
      <label for="theme-select">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:</label>
      <select id="theme-select" class="uwu-select-selected"></select>
      <button id="addThemeButton" class="uwu-button install-button">–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É</button>
      <button id="removeThemeButton" style="display: none;" class="uwu-button remove-button">–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É</button>
    </div>

      <div id="color-picker">
        <div id="color-picker-input">
          <input type="text" id="backgroundColorField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="backgroundColor" />
          <label>–¶–≤–µ—Ç —Ñ–æ–Ω–∞</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="blocksColorField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="blocksColor" />
          <label>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –±–ª–æ–∫–æ–≤</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="chatColorField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥" data-color="chatColor" />
          <label>–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —á–∞—Ç–∞</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="SettingTextColorField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥" data-color="textColor" />
          <label>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="colorField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥" data-color="linkColor" />
          <label>–¶–≤–µ—Ç —Å—Å—ã–ª–æ–∫</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="catTooltipBackgroundField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="catTooltipBackground" />
          <label>–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ "–û –ö–æ—Ç–µ"</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="settingFightPanelBackgroundField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="fightPanelBackground" />
          <label>–¶–≤–µ—Ç –ø–∞–Ω–µ–ª–∏ –ë–æ–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="settingsMoveNameColorField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="moveNameColor" />
          <label>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="settingsMoveNameBackgroundField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="moveNameBackground" />
          <label>–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="accentColorField1" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="accentColor1" />
          <label
            title="–í –æ—Å–Ω–æ–≤–Ω–æ–º –≤—Å—è–∫–∏–µ –∫–Ω–æ–ø–∫–∏, —Å–ª–∞–π–¥–µ—Ä—ã –∏ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ + —Ü–≤–µ—Ç –±—É–∫–≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∞—Å –≤ –ß–∞—Ç–µ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–æ–∫–∞ –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ç–µ–Ω–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.">[?]
            –ê–∫—Ü–µ–Ω—Ç—ã 1</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="accentColorField2" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="accentColor2" />
          <label title="–õ–∏–Ω–∏–∏ –≤ —á–∞—Ç–µ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö, –∫—Ä—É–∂–æ—á–µ–∫ —Å–ª–∞–π–¥–µ—Ä–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏.">[?] –ê–∫—Ü–µ–Ω—Ç—ã 2</label>
        </div>
        <div id="color-picker-input">
          <input type="text" id="accentColorField3" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ HEX –∫–æ–¥"
            data-color="accentColor3" />
          <label title="–¶–≤–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä –õ–° –∏ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –≤ –ß–∞—Ç–µ">[?] –ê–∫—Ü–µ–Ω—Ç—ã 3</label>
        </div>

        <div style="flex: 0 0 100%">
          <button id="saveThemeButton" class="uwu-button install-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <p>
            –û—Ç–ª–∏—á–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏:
            <a href="https://get-color.ru/transparent/" target="_blank">https://get-color.ru/transparent/</a>
          </p>
        </div>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–®—Ä–∏—Ñ—Ç—ã –∏ —Ç–µ–∫—Å—Ç</h2>
      
      <div>
        <p>–ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ –ò–≥—Ä–æ–≤–æ–π</p>
        <input type="checkbox" id="use-User-Fonts" data-setting="useUserFonts" />
        <label for="use-User-Fonts">–°–≤–æ–π —à—Ä–∏—Ñ—Ç</label>
      </div>

      <div>
        <input type="text" id="font-Size-Body" placeholder="14" data-font-size="fontSizeBody" />
        <label for="font-Size-Body">px; –†–∞–∑–º–µ—Ä –æ–±—â–µ–≥–æ —à—Ä–∏—Ñ—Ç</label>
      </div>

      <div>
        <input type="text" id="font-Size-Small" placeholder="12" data-font-size="fontSizeSmall" />
        <label for="font-Size-Small">px; –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫</label>
      </div>

      <div>
        <input type="text" id="font-Size-Location" placeholder="14" data-font-size="fontSizeLocation" />
        <label for="font-Size-Location">px; –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏</label>
      </div>

      <div>
        <p>–ü–æ–¥–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∞–π—Ç–æ–º: 
        <a href="https://fonts.google.com/?lang=ru_Cyrl" target="_blank">https://fonts.google.com/?lang=ru_Cyrl</a></p>
        <input type="text" id="font-Family-Body" placeholder="Verdana" data-font-size="fontFamilyBody" />
        <label for="font-Family-Body">–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ —à—Ä–∏—Ñ—Ç–∞</label>
      </div>

      <details>
        <summary style="cursor: pointer; font-size: 16px; font-weight: bold;">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ</summary>
        <div>
          <input type="text" id="vlm0" placeholder="10" data-font-size="vlm0" />
          <label for="vlm0">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 0 (–°–∞–º—ã–π —Ç–∏—Ö–∏–π)</label>
        </div>
        <div>
          <input type="text" id="vlm1" placeholder="11" data-font-size="vlm1" />
          <label for="vlm1">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 1</label>
        </div>
        <div>
          <input type="text" id="vlm2" placeholder="11.5" data-font-size="vlm2" />
          <label for="vlm2">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 2</label>
        </div>
        <div>
          <input type="text" id="vlm3" placeholder="12" data-font-size="vlm3" />
          <label for="vlm3">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 3</label>
        </div>
        <div>
          <input type="text" id="vlm4" placeholder="12.5" data-font-size="vlm4" />
          <label for="vlm4">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 4</label>
        </div>
        <div>
          <input type="text" id="vlm5" placeholder="13" data-font-size="vlm5" />
          <label for="vlm5">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 5 (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å)</label>
        </div>
        <div>
          <input type="text" id="vlm6" placeholder="15" data-font-size="vlm6" />
          <label for="vlm6">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 6</label>
        </div>
        <div>
          <input type="text" id="vlm7" placeholder="17" data-font-size="vlm7" />
          <label for="vlm7">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 7</label>
        </div>
        <div>
          <input type="text" id="vlm8" placeholder="19" data-font-size="vlm8" />
          <label for="vlm8">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 8</label>
        </div>
        <div>
          <input type="text" id="vlm9" placeholder="21" data-font-size="vlm9" />
          <label for="vlm9">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 9</label>
        </div>
        <div>
          <input type="text" id="vlm10" placeholder="23" data-font-size="vlm10" />
          <label for="vlm10">px; –ì—Ä–æ–º–∫–æ—Å—Ç—å 10 (–°–∞–º–∞—è –≥—Ä–æ–º–∫–∞—è)</label>
        </div>
      </details>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–†–µ–¥–∏–∑–∞–π–Ω—ã –ò–≥—Ä–æ–≤–æ–π</h2>

      <p>–¢–æ—Ç —Å–∞–º—ã–π –∑–Ω–∞–º–µ–Ω–∏—Ç–Ω—ã–π —Ä–µ–¥–∏–∑–∞–π–Ω, –Ω–æ —Å –ø–æ—á—Ç–∏ –±–æ–ª–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π.</p>
      <input type="checkbox" id="custom-layout" data-setting="customLayout" />
      <label for="custom-layout">–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–¥–∏–∑–∞–π–Ω</label>

      <div id="layout-customizer">
        <div id="layout-preview">
          <div class="column left">
            <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ -->
          </div>
          <div class="column center">
            <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ -->
            <div class="block center-block">–ü–æ–ª–µ –ò–≥—Ä–æ–≤–æ–π</div>
          </div>
          <div class="column right">
            <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ -->
          </div>
          <ul id="block-list">
            <!-- –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ -->
          </ul>
        </div>
      </div>
      <button id="SettingSaveButton4" class="uwu-button install-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>

      <div>
        <input type="text" id="chat-height" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ" data-setting="chatHeight" />
        <label for="chat-height">px; –í—ã—Å–æ—Ç–∞ –ß–∞—Ç–∞</label>
      </div>

      <div>
        <input type="text" id="history-height" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ" data-setting="historyHeight" />
        <label for="history-height">px; –í—ã—Å–æ—Ç–∞ –ò—Å—Ç–æ—Ä–∏–∏</label>
      </div>

      <label>–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –î—É—à–µ–≤—ã—Ö –∫–æ—Ç–æ–≤:</label>
      <div class="custom-select" id="showOtherCatsList">
        <div class="select-selected">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –î—É—à–µ–≤—ã—Ö –∫–æ—Ç–æ–≤</div>
        <div class="select-items">
          <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
        </div>
      </div>

      <div>
        <p>–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –Ω–∞ –º–µ–Ω—å—à–∏–µ –±–ª–æ–∫–∏ "–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ò—Å—Ç–æ—Ä–∏–∏ –∏ –†–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏".</p>
        <input type="checkbox" id="slice-info-block" data-setting="sliceInfoBlock" />
        <label for="slice-info-block">–†–∞–∑–¥–µ–ª–∏—Ç—å –±–ª–æ–∫ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</label>
      </div>

      <div>
        <p>–°–∫—Ä—É–≥–ª—è–µ—Ç –∫—Ä–∞—è –±–ª–æ–∫–æ–≤ –≤ –ò–≥—Ä–æ–≤–æ–π.</p>
        <input type="checkbox" id="edge-trim-blocks" data-setting="edgeTrimBlocks" />
        <label for="edge-trim-blocks">–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–¥–∏–∑–∞–π–Ω—ã</h2>
      
      <div>
        <p>–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Å—Ç—é–º–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. 
        –í—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ç—è–Ω—É—Ç—å –≤—ã—Å–æ—Ç—É —Å—Ç–æ–ª–±—Ü–æ–≤ –∑–∞ –∏—Ö —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º –∫—Ä–∞—é!</p>
        <input type="checkbox" id="redesign-Costums-Settings" data-setting="redesignCostumsSettings" />
        <label for="redesign-Costums-Settings">–†–µ–¥–∏–∑–∞–π–Ω –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Å—Ç—é–º–æ–≤</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–û–±—â–µ–Ω–∏–µ</h2>

      <div>
        <p>–î–æ–±–∞–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä —Å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞ –µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ª–µ–Ω—Ç–∞—Ö –∏ –±–ª–æ–≥–∞—Ö.</p>
        <input type="checkbox" id="comments-avatars" data-setting="commentsAvatars" />
        <label for="comments-avatars">–ê–≤–∞—Ç–∞—Ä–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö</label>
      </div>

      <div>
        <p>–ë–æ–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ß–∞—Ç: –¥–æ–ø–∏—Å—å ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞—à–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏.
        </p>
        <input type="checkbox" id="new-chat" data-setting="newChat" />
        <label for="new-chat">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ß–∞—Ç</label>
      </div>

      <div>
        <p>–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —á–∞—Ç–æ–º". –û—Ç–æ–±—Ä–∞–∂–µ—Ç —á–∞—Ç —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –∞ —Ç–∞–∫ –∂–µ —Å–º–µ—â–∞–µ—Ç –æ–∫–Ω–æ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ —á–∞—Ç.</p>
        <input type="checkbox" id="reverse-Chat" data-setting="reverseChat" />
        <label for="reverse-Chat">–ò–Ω–≤–µ—Ä—Å–∏—è —á–∞—Ç–∞</label>
      </div>

      <div id="myNameNotificationSoundContainer">
        <div class="custom-select" id="myNameNotificationSound">
          <div class="select-selected">–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫</div>
          <div class="select-items">
            <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
        </div>
      </div>
    
      <div id="notification-volume">
      <p>–ì—Ä–æ–º–∫–æ—Å—Ç—å</p>
        <input type="range" min="1" max="10" value="5" class="uwu-range-slider" id="notification-MyName-Volume" list="volumeStep"
          data-setting="notificationMyNameVolume">
        <datalist id="volumeStep">
          <option value="1">10%</option>
          <option value="5">50%</option>
          <option value="10">100%</option>
        </datalist>
      </div>
    </div>

    <div>
      <p>–í–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –∏ –∫–ª–∏—á–∫–∏ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç–µ. –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: –ú—è—É, –ú—è—É–∏—á, –ú—è—É–í–∫–∏–Ω</p>
      <input type="text" id="names-For-Notification" placeholder=". . ." data-setting="namesForNotification" />
    </div>

      <div>
        <p>–ë–æ–ª–µ–µ —É–¥–æ–±–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–¥ —á–∞—Ç–æ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è. –ü–æ–∫–∞ —á—Ç–æ –Ω–∞—Å–∏–ª—å–Ω–æ –±–µ—Ä—ë—Ç —Ü–≤–µ—Ç–∞ —Å "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ü–≤–µ—Ç–∞".</p>
        <input type="checkbox" id="new-chat-input" data-setting="newChatInput" />
        <label for="new-chat-input">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–≤—ã–∫–∏</h2>
      
      <div>
        <p>–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–≥–ª—è–¥–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä—è–¥–æ–º —Å —Å–æ–±–æ–π —Å–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç.</p>
        <input type="checkbox" id="display-Parameters-Percentages" data-setting="displayParametersPercentages" />
        <label for="display-Parameters-Percentages">–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</label>
      </div>

      <div>
        <p>–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ù–∞–≤—ã–∫–æ–≤ –Ω–∞ –≤–∞—à.</p>
        <input type="checkbox" id="user-Parameters-Theme" data-setting="userParametersTheme" />
        <label for="user-Parameters-Theme">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—ë –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ</label>
      </div>

  <div id="parameters-color-settings" class="parameters-color-settings">
    <table class="parameters-color-table">
      <thead>
        <tr>
          <th class="parameters-color-table--header">–ì—Ä–∞–¥–∏–µ–Ω—Ç</th>
          <th class="parameters-color-table--header">–û—Ç</th>
          <th class="parameters-color-table--header">–î–æ</th>
          <th class="parameters-color-table--header">–û—Ç</th>
          <th class="parameters-color-table--header">–î–æ</th>
        </tr>
      </thead>
      <tbody id="color-settings-body" class="parameters-color-table--body">
        <tr>
          <th class="parameters-color-table--cell" colspan="5">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</th>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–°–æ–Ω</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dream" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dream" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dream" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dream" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ì–æ–ª–æ–¥</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="hunger" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="hunger" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="hunger" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="hunger" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ñ–∞–∂–¥–∞</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="thirst" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="thirst" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="thirst" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="thirst" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ù—É–∂–¥–∞</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="need" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="need" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="need" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="need" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ó–¥–æ—Ä–æ–≤—å–µ</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="health" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="health" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="health" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="health" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ß–∏—Å—Ç–æ—Ç–∞</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="clean" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="clean" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="clean" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="clean" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <th class="parameters-color-table--cell" colspan="5">–ù–∞–≤—ã–∫–∏</th>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ó–∞–ø–∞—Ö</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="smell" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="smell" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="smell" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="smell" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ö–æ–ø–∞–Ω–∏–µ</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dig" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dig" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dig" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="dig" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ü–ª–∞–≤–∞–Ω–∏–µ</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="swim" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="swim" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="swim" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="swim" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ë–£</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="might" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="might" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="might" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="might" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–õ–∞–∑–∞–Ω–∏–µ</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="tree" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="tree" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="tree" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="tree" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <td class="parameters-color-table--cell">–ó–æ—Ä–∫–æ—Å—Ç—å</td>
          <td class="parameters-color-table--cell"><input type="color" data-param="observ" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="observ" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="observ" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="observ" data-color-type="bg-to"></td>
        </tr>
        <tr>
          <th class="parameters-color-table--cell" colspan="5">–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</th>
        </tr>
        <tr>
          <td class="parameters-color-table--cell"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="other" data-color-type="bar-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="other" data-color-type="bar-to"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="other" data-color-type="bg-from"></td>
          <td class="parameters-color-table--cell"><input type="color" data-param="other" data-color-type="bg-to"></td>
        </tr>
      </tbody>
    </table>
  </div>

      <div>
        <p>–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö —Ü–≤–µ—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–∑–æ—Ä–∞–º–∏.</p>
        <input type="checkbox" id="parameters-Background-Image" data-setting="parametersBackgroundImage" />
        <label for="parameters-Background-Image">–£–∑–æ—Ä—ã</label>
      </div>

      <div>
        <p>–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö —É–∂–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</p>
        <input type="checkbox" id="parameters-User-Background-Image" data-setting="parametersUserBackgroundImage" />
        <label for="parameters-User-Background-Image">–°–≤–æ–∏ —É–∑–æ—Ä—ã:</label>
        <input type="text" id="parametersUserBackgroundImageField" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ URL" data-setting="parametersUserBackgroundImageURL" />
        <button id="SettingSaveButton1" class="uwu-button install-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </div>

    </div>

    <div id="utility-panel">

      <h2>–ü–æ–¥—Å–≤–µ—Ç–∫–∞</h2>

      <div>
        <p>–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –æ–±–≤–æ–¥–∫–æ–π –∫–ª–µ—Ç–∫–∏ –ø–æ–ª–µ–∑–Ω—ã–µ, –∏ –Ω–µ –æ—á–µ–Ω—å, —Ä–µ—Å—É—Ä—Å—ã</p>
        <input type="checkbox" id="highlight-Resources" data-setting="highlightResources" />
        <label for="highlight-Resources">–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤</label>
      </div>

      <label>–°—Ç–∏–ª—å –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</label>
      <div class="custom-select" id="highlightResourcesStyle">
        <div class="select-selected">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</div>
        <div class="select-items">
          <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
        </div>
      </div>
      <label id="uwu-what-this" title="–°—Ç–∏–ª—å '–§–æ–Ω' –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –≤—Å—é –∫–ª–µ—Ç–∫—É –∏ –Ω–µ –Ω–∞–≥—Ä—É–∂–∞–µ—Ç –ò–≥—Ä–æ–≤—É—é. –°—Ç–∏–ª—å '–°–≤–µ—á–µ–Ω–∏–µ' –¥—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ –∏ —Å—Ç–∏–ª–∏–∑—É–µ—Ç –µ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç –Ω–∞–≥—Ä—É–∂–∞—Ç—å –ò–≥—Ä–æ–≤—É—é.">[?]</label>

      <table class="uwu-table-highlight-Resources">
        <thead>
            <tr>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–¶–≤–µ—Ç</th>
                <th>–ü–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å?</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>–¢—Ä–∞–≤—ã</td>
                <td><input type="color" class="uwu-color-picker" data-resource="–¢—Ä–∞–≤—ã" value="#90EE90"></td>
                <td class="uwu-checkbox-cell"><input type="checkbox" class="uwu-highlight-checkbox" data-resource="–¢—Ä–∞–≤—ã"></td>
            </tr>
            <tr>
                <td>–ú–æ—Ö</td>
                <td><input type="color" class="uwu-color-picker" data-resource="–ú–æ—Ö" value="#90EE90"></td>
                <td class="uwu-checkbox-cell"><input type="checkbox" class="uwu-highlight-checkbox" data-resource="–ú–æ—Ö"></td>
            </tr>
            <tr>
                <td>–ü–∞—É—Ç–∏–Ω–∞</td>
                <td><input type="color" class="uwu-color-picker" data-resource="–ü–∞—É—Ç–∏–Ω–∞" value="#90EE90"></td>
                <td class="uwu-checkbox-cell"><input type="checkbox" class="uwu-highlight-checkbox" data-resource="–ü–∞—É—Ç–∏–Ω–∞"></td>
            </tr>
            <tr>
                <td>–ü—ã–ª—å</td>
                <td><input type="color" class="uwu-color-picker" data-resource="–ü—ã–ª—å" value="#DDA0DD"></td>
                <td class="uwu-checkbox-cell"><input type="checkbox" class="uwu-highlight-checkbox" data-resource="–ü—ã–ª—å"></td>
            </tr>
            <tr>
                <td>–í–µ—Ç–∫–∏, –≤—å—é–Ω–∫–∏, –∫–æ—Å—Ç–æ–ø—Ä–∞–≤—ã</td>
                <td><input type="color" class="uwu-color-picker" data-resource="–í–µ—Ç–∫–∏, –≤—å—é–Ω–∫–∏, –∫–æ—Å—Ç–æ–ø—Ä–∞–≤—ã" value="#90EE90"></td>
                <td class="uwu-checkbox-cell"><input type="checkbox" class="uwu-highlight-checkbox" data-resource="–í–µ—Ç–∫–∏, –≤—å—é–Ω–∫–∏, –∫–æ—Å—Ç–æ–ø—Ä–∞–≤—ã"></td>
            </tr>
            <tr>
                <td>–¢—Ä–∞–≤—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã</td>
                <td><input type="color" class="uwu-color-picker" data-resource="–¢—Ä–∞–≤—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã" value="#FF0000"></td>
                <td class="uwu-checkbox-cell"><input type="checkbox" class="uwu-highlight-checkbox" data-resource="–¢—Ä–∞–≤—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"></td>
            </tr>
        </tbody>
      </table>

      <hr class="uwu-hr-head" />

      <h2>–®–∞–±–ª–æ–Ω—ã</h2>

      <div>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –±—ã—Å—Ç—Ä–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π.</p>
        <input type="checkbox" id="show-Templates" data-setting="showTemplates" />
        <label for="show-Templates">–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —à–∞–±–ª–æ–Ω—ã</label>
      </div>

      <table id="uwu-table-templates">
      <thead>
          <tr>
              <th>–°–æ–æ–±—â–µ–Ω–∏—è</th>
              <th>–ß–∞—Ç—ã</th>
              <th>–ë–ª–æ–≥–∏ –∏ –õ–µ–Ω—Ç–∞</th>
          </tr>
        </thead>
        <tbody>
          <tr>
              <td class="uwu-checkbox-cell"><input type="checkbox" data-setting="templatesInLs"></td>
              <td class="uwu-checkbox-cell"><input type="checkbox" data-setting="templatesInChats"></td>
              <td class="uwu-checkbox-cell"><input type="checkbox" data-setting="templatesInBlogsAndSniffs"></td>
          </tr>
        </tbody>
        </table>

      <hr class="uwu-hr-head" />

      <h2>–ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º</h2>

      <div>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –ë–æ–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞ —à—Ç—É—á–∫—É.</p>
        <input type="checkbox" id="dragging-Fight-Panel" data-setting="draggingFightPanel" />
        <label for="dragging-Fight-Panel">–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ë–æ–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞</label>
      </div>

      <div>
        <p>–°–æ–∫—Ä–∞—â–∞–µ—Ç –∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É–¥–∞—Ä–æ–≤.</p>
        <input type="checkbox" id="compact-Fight-Log" data-setting="compactFightLog" />
        <label for="compact-Fight-Log">–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–æ–µ–≤–æ–π –ª–æ–≥</label>
      </div>

      <div>
        <p>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏ –∏ –µ—ë –Ω–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞.</p>
        <input type="checkbox" id="fight-Panel-Adjustable-Height" data-setting="fightPanelAdjustableHeight" />
        <label for="fight-Panel-Adjustable-Height">–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏</label>
        <input type="text" id="fightPanelHeightField" placeholder=". . ." data-setting="fightPanelHeight" />
        <label>px; - –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏</label>
      </div>

      <div>
        <p>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –ü–∞–Ω–µ–ª–∏ –ë–æ–µ–≤–æ–≥–æ –†–µ–∂–∏–º–∞.</p>
        <input type="checkbox" id="Fight-Teams" data-setting="fightTeams" />
        <label for="fight-Teams">–ö–æ–º–∞–Ω–¥—ã –≤ –ë–æ–µ–≤–æ–º –†–µ–∂–∏–º–µ</label>
        <input type="text" id="fightTeamsPanelHightField" placeholder=". . ." data-setting="fightTeamsPanelHight" />
        <label>px; - –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏ –ö–æ–º–∞–Ω–¥–Ω–æ–≥–æ –ë–æ—è</label>
      </div>

  <table id="colorSettingsTable">
    <thead>
      <tr>
        <th></th>
        <th>–≠–Ω–µ—Ä–≥–∏—è</th>
        <th>–°–Ω–µ—Å–µ–Ω–æ</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>–ö–æ–º–∞–Ω–¥–∞ 1</td>
        <td><input type="color" data-team="1" data-part="green" value="#41cd70"></td>
        <td><input type="color" data-team="1" data-part="red" value="#cd4141"></td>
      </tr>
      <tr>
        <td>–ö–æ–º–∞–Ω–¥–∞ 2</td>
        <td><input type="color" data-team="2" data-part="green" value="#c968ff"></td>
        <td><input type="color" data-team="2" data-part="red" value="#cd4141"></td>
      </tr>
      <tr>
        <td>–ö–æ–º–∞–Ω–¥–∞ 3</td>
        <td><input type="color" data-team="3" data-part="green" value="#44bcff"></td>
        <td><input type="color" data-team="3" data-part="red" value="#cd4141"></td>
      </tr>
      <tr>
        <td>–ö–æ–º–∞–Ω–¥–∞ 4</td>
        <td><input type="color" data-team="4" data-part="green" value="#FFFF00"></td>
        <td><input type="color" data-team="4" data-part="red" value="#cd4141"></td>
      </tr>
    </tbody>
  </table>
    
    <hr id="uwu-hr" class="uwu-hr">
    <h2>–ß–∞—Å—ã</h2>

    <div>
      <p>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —á–∞—Å—ã –≤ –ò–≥—Ä–æ–≤–æ–π?</p>
      <input type="checkbox" id="describe-show-clock" data-setting="showClock" />
      <label for="describe-show-clock">–ß–∞—Å—ã –≤ –ò–≥—Ä–æ–≤–æ–π</label>
    </div>

    <label>–°—Ç–∏–ª—å —á–∞—Å–æ–≤:</label>
    <div class="custom-select" id="clockStyle">
      <div class="select-selected">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —á–∞—Å–æ–≤</div>
      <div class="select-items">
        <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
      </div>
    </div>

    <div><!-- –î–µ–ª–µ–Ω–∏–µ --></div>

    <label>–ì–¥–µ –≤—Å—Ç–∞–≤–ª—è—Ç—å —á–∞—Å—ã:</label>
    <div class="custom-select" id="clockPosition">
      <div class="select-selected">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–∞—Å–æ–≤</div>
      <div class="select-items">
        <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
      </div>
    </div>

    <div>
      <input type="checkbox" id="describe-clock-Moscow-Time" data-setting="clockMoscowTime" />
      <label for="describe-clock-Moscow-Time">–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è</label>
    </div>

    <div>
      <p>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —á–∞—Å–æ–≤</p>
      <input type="text" id="clock-Font-Size" placeholder=". . ." data-setting="clockFontSize" />
    </div>

    <div>
      <button id="resetClockPosition" class="uwu-button remove-button">–°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ —á–∞—Å–æ–≤</button>
    </div>

    <hr id="uwu-hr" class="uwu-hr">
    <h2>–û—Ö–æ—Ç–∞</h2>

      <div>
        <p>–î–æ–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞–ø–∞—Ö–µ, –≤–æ –≤—Ä–µ–º—è –æ—Ö–æ—Ç—ã, –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –≤—ã –∏–ª–∏ –æ—Ç–¥–∞–ª—è–µ—Ç–µ—Å—å –æ—Ç —Ü–µ–ª–∏, –∞ —Ç–∞–∫ –∂–µ –≤–∫–ª—é—á–∞–µ—Ç —Ç–∞–π–º–µ—Ä.</p>
        <input type="checkbox" id="describe-Hunting-Smell" data-setting="describeHuntingSmell" />
        <label for="describe-Hunting-Smell">–ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –∑–∞–ø–∞—Ö–µ</label>
      </div>

    <hr id="uwu-hr" class="uwu-hr">
    <h2>–î–∂–æ–π—Å—Ç–∏–∫–∏</h2>

      <div>
        <p>–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –í–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ–Ω—Å–æ—Ä–Ω—É—é –î–∂–æ–π—Å—Ç–∏–∫–æ–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–æ –≤—Ä–µ–º—è –æ—Ö–æ—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</p>
        <input type="checkbox" id="hunting-Virtual-Joystick" data-setting="huntingVirtualJoystick" />
        <label for="hunting-Virtual-Joystick">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∂–æ–π—Å—Ç–∏–∫ –¥–ª—è –æ—Ö–æ—Ç—ã</label>
        <input type="text" id="sizeHuntingVirtualJoystickField" placeholder=". . ." data-setting="sizeHuntingVirtualJoystick" />
        <label>px; - –†–∞–∑–º–µ—Ä –î–∂–æ–π—Å—Ç–∏–∫–∞. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 150 px;</label>
      </div>

    <hr id="uwu-hr" class="uwu-hr">
    <h2>"–û –∫–æ—Ç–∞—Ö"</h2>

      <div>
        <p>–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ "–û –∫–æ—Ç–µ" –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–ª—å—à–µ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
        <input type="checkbox" id="show-More-Cat-Info" data-setting="showMoreCatInfo" />
        <label for="show-More-Cat-Info">–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ö–æ—Ç–µ</label>
      </div>

      <div>
        <p>–°–æ–∫—Ä–∞—â–∞–µ—Ç –∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ "–û –∫–æ—Ç–µ".</p>
        <input type="checkbox" id="compact-Mouth" data-setting="compactMouth" />
        <label for="compact-Mouth">–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏</label>
      </div>

      <div>
        <p>–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–ª—å—à–µ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
        <input type="checkbox" id="show-Parameter-Details" data-setting="showParametersDetails" />
        <label for="show-Parameter-Details">–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</label>
      </div>

      <div>
        <p>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∫–æ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –ë–£ —Ü–∏—Ñ—Ä–æ–π.</p>
        <input type="checkbox" id="more-Profile-Info" data-setting="moreProfileInfo" />
        <label for="more-Profile-Info">–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ</label>
      </div>

      <div>
        <p>–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª—è.</p>
        <input type="checkbox" id="calculators" data-setting="calculators" />
        <label for="calculators">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ –ª—É–Ω.</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ</h2>

      <div>
      <p>–õ–ö–ú - –≤—ã–±—Ä–∞—Ç—å –∫–ª–µ—Ç–∫—É. –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∏–Ω—ã —Å—Ç–∞–≤—è—Ç—Å—è –æ—Ç "0" –¥–æ "7". –ó–Ω–∞–∫ "–º–∏–Ω—É—Å" ( - ) —Ä–∞–≤–Ω—è–µ—Ç—Å—è –∫—Ä–∞—Å–Ω–æ–π –∫–ª–µ—Ç–∫–µ, –∞ "—Ä–∞–≤–Ω–æ" ( = ) —Å—Ç–∞–≤–∏—Ç –±–æ–ª–µ–µ —è—Ä–∫—É—é –∫–ª–µ—Ç–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤,
      –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –±—É–¥–µ—Ç –æ—á–∏—â–∞—Ç—å—Å—è –ø—Ä–∏ "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –ø–æ–ª–µ/—Ç–∞–±–ª–∏—Ü—É". –î–≤–∞ —Ä–∞–∑–∞ –õ–ö–ú –Ω–∞ —è—á–µ–π–∫—É, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ.</p>
        <p>–í–∫–ª—é—á–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ä—á–∏–≤–∞–Ω–∏—è –º–∏–Ω–Ω–æ–≥–æ –ø–æ–ª—è –≤ –ò–≥—Ä–æ–≤–æ–π.</p>
        <input type="checkbox" id="climbing-panel" data-setting="climbingPanel" />
        <label for="climbing-panel">–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ</label>
        <p>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–∞–±–ª–∏—Ü –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ.</p>
          <h4>–í–∫–ª–∞–¥–∫–∏</h4>
          <div id="uwu-buttonRow1-settings"></div>
          <h4>–õ–æ–∫–∞—Ü–∏–∏ / –¢–∞–±–ª–∏—Ü—ã</h4>
          <div id="uwu-buttonRow2-settings"></div>
      </div>

      <label>–î–∏–∑–∞–π–Ω –æ–∫–Ω–∞ –º–∏–Ω–Ω–æ–≥–æ –ø–æ–ª—è:</label>
      <div class="custom-select" id="climbingPanelOrientation">
        <div class="select-selected">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π</div>
        <div class="select-items">
          <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
        </div>
      </div>

      <div>
        <p>–î–æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —á–∞—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–∏—Å–ª–æ–º. –í —Å–ª—É—á–∞–µ —Å –ª–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ª–æ–∫–∞—Ü–∏—è–º–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–∞—Å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ –≤–∞—Å.</p>
        <input type="checkbox" id="climbing-Notifications-Numbers" data-setting="climbingNotificationsNumbers" />
        <label for="climbing-Notifications-Numbers">–ü–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
      </div>

      <div>
        <p>–ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.</p>
        <input type="checkbox" id="climbing-Refresh-Notification" data-setting="climbingRefreshNotification" />
        <label for="climbing-Refresh-Notification">–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ</label>
      </div>

      <div id="climbingRefreshNotificationSoundContainer">
        <div class="custom-select" id="climbingRefreshNotificationSound">
          <div class="select-selected">–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫</div>
        <div class="select-items">
          <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
        </div>
      </div>
    
      <div id="notification-volume">
      <p>–ì—Ä–æ–º–∫–æ—Å—Ç—å</p>
        <input type="range" min="1" max="10" value="5" class="uwu-range-slider" id="climbing-Refresh-Notification-Volume" list="volumeStep"
          data-setting="climbingRefreshNotificationVolume">
        <datalist id="volumeStep">
          <option value="1">10%</option>
          <option value="5">50%</option>
          <option value="10">100%</option>
        </datalist>
      </div>
    </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>BETA üöß –õ–æ–≥ —á–∏—Å—Ç–∏–ª—å—â–∏–∫–∞ üöß BETA</h2>

      <div>
        <p>–£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏, 
        –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–Ω—è—Ç–∏—è –∏ –æ–ø—É—Å–∫–∞–Ω–∏—è –∫–æ—Ç–æ–≤.</p>
        <input type="checkbox" id="cleaning-Log" data-setting="cleaningLog" />
        <label for="cleaning-Log">–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥ —á–∏—Å—Ç–∏–ª—å—â–∏–∫–∞</label>
      </div>

      <label>–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –õ–æ–≥–∞:</label>
      <div class="custom-select" id="cleaningLogStyle">
        <div class="select-selected">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –õ–æ–≥–∞</div>
        <div class="select-items">
          <!-- –û–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->
        </div>
      </div>
      <label id="uwu-what-this" title="
      –£–º–Ω—ã–π - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π –∏ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
      –ï—â—ë —Ç—É—Ç –±—ã–ª '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', –±–æ–ª–µ–µ –ø—Ä–∏–≤—ã—á–Ω—ã–π —Å—Ç–∞—Ä—ã–π –≤–∏–¥, –Ω–æ –µ–≥–æ —Å—ä–µ–ª–∏ —Ä–æ—Å–æ–º–∞—Ö–∏.
      ">[?]</label>

      <details>
        <summary style="cursor: pointer; font-size: 16px; font-weight: bold;">
        –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç?</summary>
        <hr id="uwu-hr" class="uwu-hr">
        <p>1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ç–∞ —Ç–∞–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –∫–∞–∫:</p>
        <p>‚Äî –ü–æ—Ç–µ—Ä–µ—Ç—å—Å—è –Ω–æ—Å –æ –Ω–æ—Å</p>
        <p>‚Äî –ü–æ—Ç–µ—Ä–µ—Ç—å—Å—è —â–µ–∫–æ–π –æ —â—ë–∫—É</p>
        <p>‚Äî –ü–æ–º—É—Ä–ª—ã–∫–∞—Ç—å –≤–º–µ—Å—Ç–µ</p>
        <p>‚Äî –û–±–Ω—é—Ö–∞—Ç—å</p>
        <p>–í–∞–º –≤—ã–≤–µ–¥–∏—Ç—Å—è, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–Ω—è—Ç—å –∫–æ—Ç–∞. –ï—Å–ª–∏ –æ–Ω "–ü—Ä–æ–≤–µ—Ä–µ–Ω", –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ...</p>
        <p>2. –ü–æ–¥–Ω—è—Ç—å –∫–æ—Ç–∞!</p>
        <p>–ï—Å–ª–∏ –∂–µ –∫–æ—Ç "–ù–µ —Å–ø–∏—Ç", –∏–ª–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–Ω—è—Ç–∏–µ–º –≤—ã –µ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —Ç–æ –õ–æ–≥ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–ø–∏—à–µ—Ç –µ–≥–æ.</p>
        <p>‚Äî –ë–æ–ª—å—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞–¥–ø–∏—Å–µ–π –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—Ç–∞, –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º!</p>
        <p>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –∏–ª–∏ –≤–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π, —Å—Ç—Ä–∞–Ω–Ω—ã –∏ –Ω–µ–ª–æ–≥–∏—á–Ω—ã, –∏–ª–∏ –¥–∞–∂–µ 
        —á—Ç–æ-—Ç–æ —Ç–µ—Ä—è–µ—Ç—Å—è, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ –≥—Ä—É–ø–ø—É –í–ö!</p>
        <hr id="uwu-hr" class="uwu-hr">
      </details>

      <div>
        <p>–ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö —Ç–∞–∫ –∂–µ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å—Å—è ID –∫–æ—Ç–∞. 
        –ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç ID –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É –≤ –ª–æ–≥–µ.</p>
        <input type="checkbox" id="cleaning-Log" data-setting="cleaningLogShowID" />
        <label for="cleaning-Log">–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å ID</label>
      </div>

      <div>
        <input type="text" id="cleaning-Log-Height" placeholder=". . ." data-setting="cleaningLogHeight" />
        <label>px; - –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –õ–æ–≥–∞</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏</h2>

      <p>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –ò–≥—Ä–æ–≤–æ–π.</p>
      <div>
        <input type="checkbox" id="quick-Link1" data-setting="quickLink1" />
        <label for="quick-Link1">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</label>
      </div>

      <div>
        <input type="checkbox" id="quick-Link2" data-setting="quickLink2" />
        <label for="quick-Link2">–ü–∞–º—è—Ç–∫–∞</label>
      </div>

      <div>
        <input type="checkbox" id="quick-Link3" data-setting="quickLink3" />
        <label for="quick-Link3">–ë–ª–æ–≥–∏</label>
      </div>

      <div>
        <input type="checkbox" id="quick-Link4" data-setting="quickLink4" />
        <label for="quick-Link4">–õ–µ–Ω—Ç–∞</label>
      </div>

      <div>
        <p>–í–∞—à–∏ —Å—Å—ã–ª–∫–∏. –í—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É, –ø—Ä–æ–±–µ–ª –∏ –ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä:
          https://–º—è—É –ö–æ—Ç–∏–∫–∏, https://–º—è—É2 –ë–æ–ª—å—à–µ-–∫–æ—Ç–∏–∫–æ–≤</p>
        <input type="text" id="users-quick-Links" placeholder=". . ." data-setting="userQuickLinks" />
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <div>
        <h2>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
        <p>–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–≤—É–∫–æ–º, –∫–æ–≥–¥–∞:</p>
      </div>
      
      <div>
        <input type="checkbox" id="notification-PM" data-setting="notificationPM" />
        <label for="notification-PM">–ù–æ–≤–æ–µ –õ–∏—á–Ω–æ–µ –°–æ–æ–±—â–µ–Ω–∏–µ</label>
      </div>

      <div>
        <input type="checkbox" id="notification-Action-End" data-setting="notificationActionEnd" />
        <label for="notification-Action-End">–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å</label>
      </div>

      <div>
        <input type="checkbox" id="notification-In-Mouth" data-setting="notificationInMouth" />
        <label for="notification-In-Mouth">–ö—Ç–æ-—Ç–æ –º–µ–Ω—è –ø–æ–¥–Ω—è–ª</label>
      </div>

      <div>
        <input type="checkbox" id="notification-In-Fight-Mode" data-setting="notificationInFightMode" />
        <label for="notification-In-Fight-Mode">–í–≤–µ–ª–∏ –≤ –±–æ–µ–≤—É—é —Å—Ç–æ–π–∫—É —á–µ—Ä–µ–∑ –¢+2 –∏–ª–∏ –¢+3</label>
      </div>

      <div>
        <p>–î—É–±–ª–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏.</p>
        <input type="checkbox" id="duplicate-Time-In-Browser-Tab" data-setting="duplicateTimeInBrowserTab" />
        <label for="duplicate-Time-In-Browser-Tab">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ</label>
      </div>

      <div>
        <p>–ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–Ω—é—Ö–∞—Ç—å.</p>
        <input type="checkbox" id="show-Hint-When-To-Sniff" data-setting="showHintWhenToSniff" />
        <label for="show-Hint-When-To-Sniff">–ö–æ–≥–¥–∞ –Ω—é—Ö–∞—Ç—å?</label>
      </div>

      <hr id="uwu-hr" class="uwu-hr">
      <h2>–û–±—â–µ–Ω–∏–µ</h2>

      <div>
        <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç –±–ª–æ–≥–∞. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –µ–≥–æ —Å–ª—É—á–∞–π–Ω–æ.</p>
        <input type="checkbox" id="restore-Blog-Creation" data-setting="restoreBlogCreation" />
        <label for="restore-Blog-Creation">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ë–ª–æ–≥–∞</label>
      </div>

      <div>
        <p>–ì–æ–≤–æ—Ä–∏—Ç —Å–∞–º–æ –∑–∞ —Å–µ–±—è.</p>
        <input type="checkbox" id="more-BB-Codes" data-setting="moreBBCodes" />
        <label for="more-BB-Codes">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ BB-–ö–æ–¥—ã</label>
      </div>

      <div>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–µ–Ω—Ç–∞—Ö –∏ –±–ª–æ–≥–∞—Ö.</p>
        <input type="checkbox" id="comment-Preview" data-setting="commentPreview" />
        <label for="comment-Preview">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π</label>
      </div>

      <div>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç "–æ—Ç–≤–µ—á–∞—Ç—å" –∏ "—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å" —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–µ–Ω—Ç–∞—Ö –∏ –±–ª–æ–≥–∞—Ö. –ü—Ä–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –∫—É—Å–æ—á–µ–∫ 
        —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å.</p>
        <input type="checkbox" id="more-Comment-Buttons" data-setting="moreCommentButtons" />
        <label for="more-Comment-Buttons">–ö–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ "–¶–∏—Ç–∏—Ä–æ–≤–∞—Ç—å"</label>
      </div>

      <div>
        <p>–û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞ –≤ –æ–±–æ–ª–æ—á–∫—É, –ø–æ—Ö–æ–∂—É—é –Ω–∞ —Ç—É –∫–æ—Ç–æ—Ä–∞—è –≤–æ "–í—Ö–æ–¥—è—â–∏–µ".</p>
        <input type="checkbox" id="ls-Wrap-Preview" data-setting="lsWrapPreview" />
        <label for="ls-Wrap-Preview">–ù–∞–≥–ª—è–¥–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞</label>
      </div>

    </div>

    <div id="modules-panel">

      <h2>–ì–ª–∞–≤–Ω–æ–µ</h2>
      <div>
        <p>–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–Ω–∏–µ –ü–∞–Ω–µ–ª–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ù–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ò–≥—Ä–æ–≤–æ–π. –°–∞–º–∞ –ø–æ —Å–µ–±–µ –ø—É—Å—Ç–∞—è.</p>
        <input type="checkbox" id="extended-settings-Panel" data-setting="extendedSettingsPanel" />
        <label for="extended-settings-Panel">‚öôÔ∏è–ü–∞–Ω–µ–ª—å –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ù–∞—Å—Ç—Ä–æ–µ–∫</label>
      </div>

      <div>
        <p>–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ ‚öôÔ∏è–ü–∞–Ω–µ–ª–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ò–≥—Ä–æ–≤–æ–π.</p>
        <input type="checkbox" id="show-Update-Notification" data-setting="showUpdateNotification" />
        <label for="show-Update-Notification">–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –°–∫—Ä–∏–ø—Ç–∞/–ú–æ–¥–∞ UwU</label>
      </div>

      <div>
        <p>‚öôÔ∏è–ü–∞–Ω–µ–ª–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ù–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –±—É–¥–µ—Ç —Ç–∞–∫ —Å–∫—É—á–Ω–æ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.</p>
        <input type="checkbox" id="show-Splash-Screens" data-setting="showSplashScreens" />
        <label for="show-Splash-Screens">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å Splash –Ω–∞–¥–ø–∏—Å–∏.</label>
      </div>

      <div>
        <p>–°–∫—Ä—ã–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º. –ü—Ä–∏–≤–µ—Ç, —è —Ç–∞ —Å–∞–º–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞. –î–µ–ª–∞–µ—Ç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CatWar UwU –æ—á–µ–Ω—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –Ω–∞ –≤–∏–¥.</p>
        <input type="checkbox" id="extended-Hints" data-setting="extendedHints" />
        <label for="extended-Hints">–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏</label>
      </div>

    <hr id="uwu-hr" class="uwu-hr">
      <h2>–°–±–æ—Ä–Ω–∏–∫ —Å—Ç–∏–ª–µ–π</h2>
      <p>–û–Ω–ª–∞–π–Ω —Å–±–æ—Ä–Ω–∏–∫ —Å—Ç–∏–ª–µ–π –æ—Ç –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.</p>
    <hr id="uwu-hr" class="uwu-hr">
      <div id="module-info">
        <!-- –°—é–¥–∞ –º–æ–¥—É–ª–∏ -->
      </div>

    <hr id="uwu-hr" class="uwu-hr">
      <h2>–ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç</h2>

      <div>
        <p>–ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ü–æ–∫–∞ –±–µ–∑ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ö–æ–º–ø–∞–∫—Ç–Ω–æ–π –ò–≥—Ä–æ–≤–æ–π, –°–±–æ—Ä–Ω–∏–∫–∞ –°—Ç–∏–ª–µ–π –∏ –ú–∏–Ω–Ω–æ–≥–æ –ø–æ–ª—è).</p>
        <input type="text" id="exportSettings" placeholder="–≠–∫—Å–ø–æ—Ä—Ç"/>
        <input type="text" id="importSettings" placeholder="–ò–º–ø–æ—Ä—Ç"/>
        <button id="importSettingsButton" class="uwu-button install-button">–í—Å—Ç–∞–≤–∏—Ç—å</button>
      </div>
      
      <div>
        <p>–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –í –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.</p>
        <button id="resetAllSaves" class="uwu-button remove-button">–°–±—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π</button>
      </div>

    </div>

  </div>
  <hr id="uwu-hr" class="uwu-hr-head">
</div>
`;
// ====================================================================================================================
//   . . . HTML –ë–õ–û–ö –ù–û–í–û–°–¢–ï–ô . . .
// ====================================================================================================================
const newsPanel = // html
`
<div id="news-panel">
    <button id="news-button">
        v${current_uwu_version} - üéÉ –õ–æ–≥ —á–∏—Å—Ç–∏–ª—å—â–∏–∫–æ–≤ –∏ –†–µ–¥–∏–∑–∞–π–Ω –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Å—Ç—é–º–æ–≤!
    </button>
    <div id="news-list" style="display: none">
        <h3>–ì–ª–∞–≤–Ω–æ–µ</h3>
        <p>‚Äî –ù–æ–≤—ã–π —Å—Ç–∏–ª—å –ß–∞—Å–æ–≤ - —Å—Ç—Ä–æ—á–Ω—ã–π! –£–¥–æ–±–Ω–æ, –∫–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å —á–∞—Å—ã –≤ –±–ª–æ–∫ –ø–æ–≥–æ–¥—ã. –¢–∞–∫ –∂–µ —Ä–∞—Å—à–∏—Ä–∏–ª–∞—Å—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏—Ö –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é... –ù–µ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ, 
        –Ω–æ –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–∞—ë—à—å –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –≤ –ò–≥—Ä–æ–≤—É—é!</p>
        <hr id="uwu-hr" class="uwu-hr">
        <h3>–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h3>
        <p>‚Äî üç§</p>
        <p>‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è "–ë—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∏–ª–µ–π", —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∞–º –±—ã–ª–æ —á—É—Ç—å –ø–æ–Ω—è—Ç–Ω–µ–µ, 
        —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç.</p>
        <hr id="uwu-hr" class="uwu-hr">
        <h3>–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞</h3>
        <p>‚Äî –ß–µ–∫-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–µ–≤–µ—Ä–Ω–æ–≥–æ —Å–∏—è–Ω–∏—è. –£–±—Ä–∞–ª–æ –æ—à–∏–±–∫—É –∏–∑ –∫–æ–Ω—Å–æ–ª–∏.</p>
        <p>‚Äî –ö–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ "–¶–∏—Ç–∏—Ä–æ–≤–∞—Ç—å" —Ç–µ–ø–µ—Ä—å –¥–æ–ø–æ–ª–Ω—è—é—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è, 
        –∞ –Ω–µ –æ—á–∏—â–∞—é—Ç –µ–≥–æ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω–µ–µ.</p>
        <p>‚Äî –í–µ–ª–∏–∫–∞—è –±–∏—Ç–≤–∞ —Å –ª–æ–º–∞–Ω–Ω—ã–º –ë–† –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–≤–µ—Ä–Ω–æ–µ. –ù–ê–î–ï–Æ–°–¨.</p>
        <p>‚Äî –¢–µ–ø–µ—Ä—å –ø—Ä–∏ "–û–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã" –≤ –ë–†, –∫–æ—Ç—ã —Å–º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –¥–æ 
        —ç—Ç–æ–≥–æ –±—ã–ª–∏ –∫—É–¥–∞-—Ç–æ –≤—ã–±—Ä–∞–Ω—ã.</p>
        <p>‚Äî‚Äî Release / Bump 1.33.3</p>
        <p>‚Äî‚Äî –ë–∞–º–ø –≤–µ—Ä—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ –≤–µ—Ä—Å–∏—è—Ö, –ø–æ—Ç–æ–º—É —á—Ç–æ –±—ã–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–æ–≥–∞ —á–∏—Å—Ç–∏–ª—å—â–∏–∫–∞.</p>
        <hr id="uwu-hr" class="uwu-hr">
        <p>–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: 06.11.24</p>
    </div>
</div>
`;
// ====================================================================================================================
//   . . . HTML –ü–ê–ù–ï–õ–¨ –†–ê–°–®–ò–†–ï–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö . . .
// ====================================================================================================================
const extendedSettingsButton = // html
`
<div id="uwu-extended-settings">
  <button type="button" id="extended-settings-button">
    <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/partly_sunny_rain.png" alt="–ò–∫–æ–Ω–∫–∞"
      width="36" height="36">
  </button>

  <div id="extended-settings-container">
    <div id="splash-screen-panel"></div>

  </div>
</div>
`;
// ====================================================================================================================
//   . . . HTML –ë–õ–û–ö –†–£–ß–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–ì–û–î–´ . . .
// ====================================================================================================================
const manualWeatherPanel = // html
`
<div id="manual-weather-panel">
<p>–ò–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏, –Ω–æ—Å—è—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.</p>
<h3>–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É</h3>
<input type="range" min="1" max="3" value="1" class="uwu-range-slider" id="manualWeather" list="WeatherStep">
<datalist id="WeatherStep">
  <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/sunny.png" width="36" height="36" option
    value="1"></option>
  <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/rain_cloud.png" width="36" height="36"
    option value="2"></option>
  <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/snow_cloud.png" width="36" height="36"
    option value="3"></option>
</datalist>
<div id="temperature-container">
  <p id="temperature"
    title="–ù–∞ —ç—Ç–æ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å —á–∞—Å—Ç–∏—Ü –∏ –¥–µ–ª–∏—Ç—Å—è –∏—Ö —Ä–∞–∑–º–µ—Ä. –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å.">
    [?] –¢–µ–∫—É—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ...—É—Ç–æ—á–Ω–µ–Ω–∏–µ...</p>
</div>

<h3>–°–µ–≤–µ—Ä–Ω–æ–µ –°–∏—è–Ω–∏–µ</h3>
<div class="button-container-1">
  <button type="button" id="manualAurora-Off" class="uwu-button-round">
    <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/icons8-nothern-lights-96.png"
      alt="–ò–∫–æ–Ω–∫–∞" width="48" height="48">
  </button>
  <button type="button" id="manualAurora-B" class="uwu-button-round">
    <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/icons8-nothern-lights-96_blue.png"
      alt="–ò–∫–æ–Ω–∫–∞" width="48" height="48">
  </button>
  <button type="button" id="manualAurora-G" class="uwu-button-round">
    <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/icons8-nothern-lights-96_green.png"
      alt="–ò–∫–æ–Ω–∫–∞" width="48" height="48">
  </button>
</div>

<h3>–°–≤–µ—Ç–ª—è—á–∫–∏</h3>
<div class="button-container-2">
  <button type="button" id="manualFirefly-On" class="uwu-button-round">
    <img src="https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/firefly.png" alt="–ò–∫–æ–Ω–∫–∞" width="48"
      height="48" title="–í–∫–ª—é—á–∞–µ—Ç/–í—ã–∫–ª—é—á–∞–µ—Ç">
  </button>
</div>

</div>
<div id="aurora-settings-panel">
<p>–ò–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è!</p>
<h5>–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –°–µ–≤–µ—Ä–Ω–æ–µ –°–∏—è–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–∫–ª—é—á–∞—Ç—å –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≥–æ–¥—ã,
  –ª–∏–±–æ –∑–∞–ø—Ä–µ—â–∞—Ç—å
  –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –ø–æ–≥–æ–¥–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏. –ù–æ —ç—Ç–æ –≤—Å—ë –ø–æ–∫–∞ —á—Ç–æ –ª–∏—à—å –º–µ—á—Ç–∞...</h5>
</div>
`;
// ====================================================================================================================
//   . . . –ì–õ–ê–í–ù–´–ô CSS –°–¢–ò–õ–¨ . . .
// ====================================================================================================================
// TODO - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç—ã, —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, –∑–∞–∫—Ä—É–≥–ª—ë–Ω–Ω–æ—Å—Ç—å —à—Ç—É—á–µ–∫ –Ω—É –∫–∞—Ä–æ—á–µ –≤—Å—ë –∫–∞–∫ –Ω–∞–¥–æ —á—Ç–æ–±—ã –Ω–µ —Å–¥–µ–ª–∞—Ç—å –≤ –∏—Ç–æ–≥–µ –ª–∞–±–∏—Ä–∏–Ω—Ç.
const css_uwu_main =
`
#uwu-settings {
    margin-top: 10px;
    margin-bottom: 10px;
}

#uwusettings {
  font-family: "Montserrat", sans-serif;
  margin: 0 auto;
  border-radius: 20px;
  border: 1px solid rgba(255, 255, 255, 0.1);
}
.main-settings-container {
  padding: 10px 15px 10px 15px;
}

#uwusettings-main {
  padding: 0px 15px 0px 15px;
}

#news-panel {
  padding: 5px 15px 15px 15px;
}

#uwu-what-this {
  color: #83e5ff;
  font: caption;
}

.main-settings-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
}

#uwusettings h1,
#uwusettings h2 {
  font-family: "Montserrat", sans-serif;
  margin-top: 10px;
  margin-bottom: 15px;
  text-align: center;
}

#uwusettings h4 {
  margin-top: 5px;
  margin-left: 5px;
  margin-bottom: 5px;
}

#uwusettings p {
  margin-bottom: 0px;
}

#uwusettings label {
  font-size: 16px;
}

#uwusettings ul {
  font-family: "Montserrat", sans-serif;
  list-style-type: "+ ";
}

.uwu-hr-head {
  border: rgba(255, 255, 255, 0.1) solid;
  border-radius: 0px;
}

.uwu-hr {
  border: rgba(255, 255, 255, 0.1) solid;
  border-radius: 15px;
}

#uwusettings .parameters-color-table,
#uwusettings .parameters-color-table tr,
#uwusettings .parameters-color-table td {
  border: 1px #383838 solid;
}

#colorSettingsTable,
#colorSettingsTable tr,
#colorSettingsTable td {
  border: 1px #383838 solid;
}

.uwu-table-highlight-Resources,
#uwu-table-templates {
  margin-top: 5px;
}
.uwu-table-highlight-Resources th, .uwu-table-highlight-Resources td,
#uwu-table-templates th, #uwu-table-templates td {
  border: 1px solid #383838;
}

.uwu-color-picker {
  border: none;
  vertical-align: middle;
}

.uwu-checkbox-cell {
  text-align: center;
  vertical-align: middle;
}

#uwusettings .parameters-color-table,
#colorSettingsTable {
  margin-top: 8px;
}

.header-rounded-image {
  background-repeat: repeat;
  background-attachment: fixed;
  border-radius: 20px 20px 0px 0px;
}

.main-rounded-image {
  background-repeat: repeat;
  background-attachment: fixed;
  border-radius: 20px;
}

#button-container-1 {
  display: flex;
  justify-content: space-evenly;
  width: 100%;
}

#button-container button {
  background-color: transparent;
  border: none;

  color: #ffffff57;

  padding: 10px 20px;
  cursor: pointer;
  transition: box-shadow 0.4s ease;
}

#button-container button.active {
  box-shadow: inset 0 -2px 0 0 #ffffff4d;
  transition: box-shadow 0.4s ease;
}

#button-container button.active h2 {
  color: #ffffff;
  transition: color 0.4s ease;
}

#modules-panel {
  display: none;
}

.module-container {
  width: 300px;
  min-height: 150px;
  position: relative;

  box-sizing: border-box;
  margin: 10px;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  padding: 15px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 10px;
  background-color: rgba(255, 255, 255, 0.03);
}

.module-info {
  flex-grow: 1;
  margin-bottom: 10px;
}

.module-panel {
  display: flex;
  justify-content: space-between;
  align-items: center;

  position: absolute;
  bottom: 10px;
  left: 10px;
  right: 10px;
}

#module-info {
  flex-grow: 1;
  margin-bottom: 10px;

  display: flex;
  flex-wrap: wrap;
  flex-basis: 100%;
}

.module-container label {
  margin-top: 10px;
}

#private-module-input {
  margin: 10px;
}

.module-container button {
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 5px 10px;
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin: 5px;
}

.install-button {
  background-color: #78c8ff87 !important;
}

.remove-button {
  background-color: #ff787887 !important;
}

#module-info input[type="checkbox"] {
  margin: 10px;
}

#color-picker {
  display: flex;
  flex-wrap: wrap;
}

#color-picker-input {
  flex: 30%;
}

#auroraPanel {
  width: 120px;
}

#notification-volume,
#step-slider {
  width: 150px;
}

#layout-preview button {
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 5px 10px;
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin: 5px;
}

#layout-customizer #layout-preview {
  display: flex;
  justify-content: center;
  margin-bottom: 1rem;
}

#layout-customizer .column {
  width: 200px;
  border: 1px solid #ffffff1a;
  border-radius: 10px;
  padding: 5px;
  margin: 0 5px;
}

#layout-customizer .block {
  border-radius: 10px;
  background-color: #ffffff08;
  padding: 5px;
  margin-bottom: 5px;
}

#layout-customizer .center-block {
  height: 100%;
  box-sizing: border-box;

  border-radius: 10px;
  background-color: #ffffff08;
}

#uwu-buttonRow1-settings,
#uwu-buttonRow2-settings {
  display: flex;
  margin-top: 3px;
}

#uwu-buttonRow1-settings button,
#uwu-buttonRow2-settings button  {
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 2px 10px;
  border-radius: 10px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin: 3px;
  margin-left: 0px;
}

#uwu-buttonRow1-settings > div > button.tab-button.active, #uwu-buttonRow2-settings > div > button.table-button.active {
  background-color: #abf6ffb0;
}

#uwu-buttonRow1-settings > .tab-container,
#uwu-buttonRow2-settings > .table-container {
  border-radius: 15px;
  background-color: #54545473;
  margin-right: 5px;
  padding-left: 4px;
  padding-right: 2px;
  padding-top: 2px;
  border-bottom-width: 2px;
  padding-bottom: 2px;
}

#uwu-global-container {
  width: 100%;
  height: 100%;
  overflow: hidden;
  pointer-events: none;
}

#uwu-main-container {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  overflow: hidden;
  pointer-events: none;
}

.weatherCanvas {
  pointer-events: none;
  position: fixed;
}

#extended-settings-button {
  position: fixed;
  bottom: 30px;
  right: 30px;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  backdrop-filter: blur(16px);
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: auto;
  cursor: pointer;

  background-color: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.1);
  font-size: 2em;
  font-weight: bold;
  color: #ff00ff;
}

#extended-settings-container {
  font-family: "Montserrat", sans-serif;
  color: white;
  font-size: 15px;
  text-align: center;

  position: fixed;
  bottom: 100px;
  right: 30px;
  width: 400px;
  height: 400px;
  backdrop-filter: blur(16px);
  border-radius: 10px;
  display: none;
  pointer-events: auto;

  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);

  display: grid;
  place-items: center;
  padding: 15px;
  box-sizing: border-box;
  overflow-y: auto;
}

.extended-settings-block {
  border-radius: 10px;
  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 5px;
  margin-bottom: 8px;
}

#news {
  margin-top: 20px;
}

#manual-weather-panel,
#news,
#news-button {
  width: 100%;
  border-radius: 10px;

  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);

  padding: 15px;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  box-sizing: border-box;
}

#color-picker {
  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);

  margin-top: 10px;
  padding: 15px;
  border-radius: 10px;
}

#news-button,
#news-list {
  font-family: "Montserrat", sans-serif;
  font-size: 15px;
  cursor: pointer;
}

#news-list h3 {
  margin-left: 40px;
}

#news-list p {
  margin-top: 3px;
  margin-bottom: 3px;
  margin-left: 20px;
}

#aurora-settings-panel {
  width: 100%;
  border-radius: 10px;

  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);

  padding: 15px;
  margin-top: 20px;
  box-sizing: border-box;
}

#WeatherStep,
#auroraStep,
#volumeStep,
#ThicknessStep,
.uwu-range-step {
  margin-top: 10px;
  display: flex;
  justify-content: space-between;
  width: 100%;
}

#extended-settings-container::-webkit-scrollbar {
  width: 10px;
}

#extended-settings-container::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

#extended-settings-container::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 4px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(16px);
  -webkit-backdrop-filter: blur(16px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  cursor: pointer;
}

#extended-settings-container::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.4);
}

#button-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  width: 100%;
}

.button-container-1 {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.button-container-2 {
  display: flex;
  justify-content: space-evenly;
  width: 100%;
}

.uwu-button-round {
  width: 60px;
  height: 60px;
  cursor: pointer;
  border-radius: 50%;

  background-color: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

#extended-settings-button:hover,
.uwu-button-round:hover {
  background-color: rgba(255, 255, 255, 0.15);
}

@property --gradient-angle {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: false;
}

@keyframes aurora-spin {
  0% {
    --gradient-angle: 0deg;
  }

  100% {
    --gradient-angle: 360deg;
  }
}

@keyframes auroraFadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes auroraFadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

.firefly {
  position: fixed;
  background-color: rgba(255, 255, 153, 1);
  border-radius: 50%;
  filter: blur(5px);
  pointer-events: none;

  animation: fadeIn 6s ease-in-out;
}

.firefly-glow {
  position: fixed;
  background-color: rgba(255, 255, 153, 0.2);
  border-radius: 50%;
  filter: blur(40px);
  pointer-events: none;

  animation: fadeIn 6s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

.firefly-disappearing {
  animation: fadeOut 6s ease-in-out forwards;
}

.custom-select {
  position: relative;
  display: inline-block;
}

.select-selected, .uwu-select-selected {
  margin-top: 10px;
  width: fit-content;
  border-radius: 10px;
  color: white;
  background-color: #5c5c5c;
  -webkit-backdrop-filter: blur(16px);
  backdrop-filter: blur(16px); 
  padding: 10px;
  cursor: pointer;
}

.uwu-select-selected {
  width: fit-content;
}

.select-items, uwu-select-items {
  margin-top: 5px;
  display: none;
  position: absolute;
  border-radius: 10px;
  width: max-content;
  color: white;
  background-color: #5c5c5c;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  -webkit-backdrop-filter: blur(16px);
  backdrop-filter: blur(16px); 
  z-index: 1;
}

.select-items div {
  padding: 8px 16px;
  cursor: pointer;
}

.select-items div:hover {
  background-color: #757575;
}

.custom-select.active .select-items {
  display: block;
}

#climbingRefreshNotificationSoundContainer button,
#myNameNotificationSoundContainer button {
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 2px 10px;
  border-radius: 10px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin: 3px;
  margin-left: 0px;
}

#climbingRefreshNotificationSoundContainer,
#myNameNotificationSoundContainer {
  gap: 5px;
  display: flex;
  align-items: center;
}

.update-notification {
  background-color: #78c8ff69;
  padding: 10px;
  border-radius: 10px;
  margin-bottom: 10px;
}

.new-update::before {
  content: "‚Ä¢";
  color: #78c8ff;
  font-size: 2em;
  position: absolute;
  top: -20px;
  right: -5px;
}

.random-phrase-block {
  margin-bottom: 10px;
  width: 100%;
  border-radius: 10px;

  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);

  box-sizing: border-box;
  padding: 5px;
}

`;

document.head.insertAdjacentHTML(
  "beforeend",
  `<style id="css-uwu-main">${css_uwu_main}</style>`
);

// ====================================================================================================================
//   . . . –ü–†–û–ó–†–ê–ß–ù–´–ô CSS –°–¢–ò–õ–¨ . . .
// ====================================================================================================================
// Glassmorphism –≤–ø–µ—Ä—ë–¥ Glassmorphism –≤–ø–µ—Ä—ë–¥ Glassmorphism –≤–ø–µ—Ä—ë–¥ Glassmorphism –≤–ø–µ—Ä—ë–¥ Glassmorphism –≤–ø–µ—Ä—ë–¥
const css_uwu_glass = // css
`
#uwusettings {
  backdrop-filter: blur(16px);
  background-color: rgba(255, 255, 255, 0.03);
}

.uwu-button {
  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 8px 15px;
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin: 5px;
  margin-left: 0px;
  color: #d5d5d5;
}

.uwu-button:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.uwu-range-slider {
  width: 100%;
  cursor: pointer;
  -webkit-appearance: none;
  background-color: rgba(255, 255, 255, 0.06) !important;
  border: 1px solid rgba(255, 255, 255, 0.1) !important;
  border-radius: 10px;
  height: 10px;
  outline: none;
}

.uwu-range-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  backdrop-filter: blur(16px);
  -webkit-backdrop-filter: blur(16px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  cursor: pointer;
}

.uwu-range-slider::-webkit-slider-thumb {
  transform: translateY(-35%);
}

#uwusettings input[type="checkbox"] {
  margin-right: 8px;
  appearance: none;
  transform: translate(-10%, 30%);
  width: 35px;
  height: 18px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
}

#uwusettings input[type="checkbox"]:checked {
  background-color: #90ff78a8;
}

#uwusettings input[type="checkbox"]:not(:checked) {
  background-color: rgba(255, 255, 255, 0.1);
}

#uwusettings input[type="checkbox"]:before {
  content: "";
  position: absolute;
  top: 50%;
  left: 4px;
  transform: translate(-50%, -50%);
  width: 25px;
  height: 25px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: background-color 0.2s ease-in-out, left 0.2s ease-in-out;
}

#uwusettings input[type="checkbox"]:checked:before {
  left: calc(100% - 4px);
}

#uwusettings input[type="text"] {
  width: 150px;
  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 8px;
  border-radius: 10px;
  outline: none;
  margin: 5px;
  margin-left: 0px;
}
`;
// ====================================================================================================================
//   . . . –¢–Å–ú–ù–ê–Ø –¢–ï–ú–ê . . .
// ====================================================================================================================
const css_uwu_dark = // css
`
#uwusettings {
  background-color: #242424;
  color: #dddddd;
}

#uwusettings-header-glass {
  border-radius: 20px 20px 0px 0px;
  backdrop-filter: blur(16px) brightness(0.9);
}

#news-button {
  color: #dddddd;
}

.uwu-button {
  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 8px 15px;
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin: 5px;
  margin-left: 0px;
}

.uwu-button:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.uwu-range-slider {
  width: 100%;
  cursor: pointer;
  -webkit-appearance: none;
  background-color: rgba(255, 255, 255, 0.06) !important;
  border: 1px solid rgba(255, 255, 255, 0.1) !important;
  border-radius: 10px;
  height: 10px;
  outline: none;
}

.uwu-range-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  backdrop-filter: blur(16px);
  -webkit-backdrop-filter: blur(16px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  cursor: pointer;
}

.uwu-range-slider::-webkit-slider-thumb {
  transform: translateY(-35%);
}

#uwusettings input[type="checkbox"] {
  margin-right: 8px;
  appearance: none;
  transform: translate(-10%, 30%);
  width: 35px;
  height: 18px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
}

#uwusettings input[type="checkbox"]:checked {
  background-color: #90ff78a8;
}

#uwusettings input[type="checkbox"]:not(:checked) {
  background-color: rgba(255, 255, 255, 0.1);
}

#uwusettings input[type="checkbox"]:before {
  content: "";
  position: absolute;
  top: 50%;
  left: 4px;
  transform: translate(-50%, -50%);
  width: 25px;
  height: 25px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: background-color 0.2s ease-in-out, left 0.2s ease-in-out;
}

#uwusettings input[type="checkbox"]:checked:before {
  left: calc(100% - 4px);
}

#uwusettings input[type="text"] {
  width: 150px;
  background-color: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 8px;
  border-radius: 10px;
  outline: none;
  margin: 5px;
  margin-left: 0px;
}
`;
// ====================================================================================================================
//   . . . –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø –¢–ï–ú–ê . . .
// ====================================================================================================================
// –ª–æ–ª –∞ –≥–¥–µ
const css_uwu_classic = `

`;
// ====================================================================================================================
//   . . . —Ç–æ–ø–æ–≤–æ–π —à—Ä–∏—Ñ—Ç –∫—Ç–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Ç–æ–º—É –≤ –≥–ª–∞–∑ üëÖüëÖüëÖüëÖüëÖüëÖ–±–µ –±–µ –±–µ –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É . . .
// ====================================================================================================================
var link = document.createElement('link');
link.rel = 'stylesheet';
link.href = 'https://fonts.googleapis.com/css?family=Montserrat';
document.head.appendChild(link);
// TODO - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–∞—á–∏–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç—ã –Ω—É–∂–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ —à—Ä–∏—Ñ—Ç–∞" –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
// ====================================================================================================================
//  . . . –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö . . .
// ====================================================================================================================
let settings;

function saveSettings() {
  try {
    localStorage.setItem("uwu_settings", JSON.stringify(settings));
    // console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", settings);
  } catch (error) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", error);
  }
}

function loadSettings() {
  const storedSettings = localStorage.getItem("uwu_settings");
  if (storedSettings && typeof storedSettings === "string") {
    const loadedSettings = JSON.parse(storedSettings);
    settings = { ...uwuDefaultSettings, ...loadedSettings };
  } else {
    settings = { ...uwuDefaultSettings };
    console.log("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫");
  }
}
// ====================================================================================================================
//   . . . –î–ò–ù–ê–ú–ò–ß–ù–´–ï –û–ë–û–ó–†–ï–í–ê–¢–ï–õ–ò . . .
// ====================================================================================================================
function debounce(func, wait) {
  let timeout;
  return function (...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}

// –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∫—É –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ —É—Å–ø–µ–ª –ø–æ—è–≤–∏—Ç—å—Å—è.
async function setupMutationObserver(
  selector,
  callback,
  options = { attributes: true, attributeFilter: ["style"] },
  maxAttempts = 8,
  delay = 500,
  debounceTime = 100,
) {
  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    const element = document.querySelector(selector);
    if (element) {
      const observer = new MutationObserver(debounce(callback, debounceTime));
      observer.observe(element, options);
      // console.log(`–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}".`);
      callback();
      return;
    }
    await new Promise((resolve) => setTimeout(resolve, delay));
  }
  // console.warn(
  //   `–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫.`
  // );
}

// –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –∫–∞–∫–æ–π-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ —É—Å–ø–µ–ª –ø–æ—è–≤–∏—Ç—å—Å—è.
async function setupSingleCallback(
  selector,
  callback,
  maxAttempts = 8,
  delay = 500,
) {
  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    const element = document.querySelector(selector);
    if (element) {
      callback();
      return;
    }
    await new Promise((resolve) => setTimeout(resolve, delay));
  }
  // console.warn(
  //   `–≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}" –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫.`
  // );
}
// ====================================================================================================================
//   . . . –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –†–ê–ë–û–¢–ê –° –¶–í–ï–¢–û–í–´–ú–ò –¢–ï–ú–ê–ú–ò . . .
// ====================================================================================================================
function getThemes() {
  const storedThemes = localStorage.getItem("uwu_colorThemes");
  const userThemes = storedThemes ? JSON.parse(storedThemes) : {};
  return { ...userThemes, ...defaultThemes };
}

function saveThemes(themes) {
  const themesToSave = Object.keys(themes)
    .filter(themeName => !isDefaultTheme(themeName))
    .reduce((obj, key) => {
      obj[key] = themes[key];
      return obj;
    }, {}); 

  localStorage.setItem("uwu_colorThemes", JSON.stringify(themesToSave));
}

function getCurrentThemeName() {
  return localStorage.getItem("uwu_currentTheme") || "–¢—ë–º–Ω–∞—è –¢–µ–º–∞";
}

function setCurrentThemeName(themeName) {
  localStorage.setItem("uwu_currentTheme", themeName);
}

function isDefaultTheme(themeName) {
  return Object.keys(defaultThemes).includes(themeName);
}

function updateSaveButtonState() {
  saveThemeButton.disabled = isDefaultTheme(currentThemeName);
}

// ====================================================================================================================
//  . . . –í–ù–ï–®–ù–ò–ô –í–ò–î –ü–ê–ù–ï–õ–ò –ù–ê–°–¢–†–û–ï–ö . . .
// ====================================================================================================================
function applyBackgroundImage(element, backgroundImage) {
  element.style.backgroundImage = backgroundImage;
}

function createSettingsBlock(blockId, content) {
  const siteTable = document.querySelector("#site_table");
  const isMobile = siteTable.getAttribute("data-mobile") === "0";

  const settingsElement = document.createElement("div");
  settingsElement.id = blockId;
  settingsElement.innerHTML = content;

  const settingsContainer = isMobile
    ? document.querySelector("#branch")
    : siteTable;
  settingsContainer.appendChild(settingsElement);
}
// ====================================================================================================================
//  . . . –†–ê–ë–û–¢–ê –ü–ê–ù–ï–õ–ò –ù–ê–°–¢–†–û–ï–ö . . .
// ====================================================================================================================
if (targetSettings.test(window.location.href)) {
  createSettingsBlock("uwu-settings", uwusettings);

  const uwuSettingsElement = document.getElementById("uwusettings");
  if (uwuSettingsElement) {
    uwuSettingsElement.insertAdjacentHTML("beforeend", newsPanel);
  }

  loadSettings();

  if (!settings.extendedHints) {
    const uwuHideHints = document.createElement("style");
    uwuHideHints.innerHTML = `
    #uwusettings p {
      display: none;
    }
    `;
    document.head.appendChild(uwuHideHints);
  }

  document
    .querySelectorAll("#uwusettings [data-setting]")
    .forEach((element) => {
      const setting = element.dataset.setting;
      if (element.type === "checkbox") {
        element.checked = settings[setting];
      } else {
        element.value = settings[setting];
      }
    });

  // ====================================================================================================================
  //  . . . –¢–ï–ú–ê UWU . . .
  // ====================================================================================================================
  function applySettingsTheme(theme) {
    let css;
    const settingsBlock = document.getElementById("uwu-settings");
    const settingsHeader = document.getElementById("uwusettings-header");
  
    switch (theme) {
      case "classic":
        css = css_uwu_classic;
        break;
      case "dark":
        css = css_uwu_dark;
        const backgroundImageDark = window.getComputedStyle(document.body).backgroundImage;
        applyBackgroundImage(settingsHeader, backgroundImageDark);
        settingsHeader.classList.add("header-rounded-image");
        break;
      case "glass":
        css = css_uwu_glass;
        const backgroundImageGlass = window.getComputedStyle(document.body).backgroundImage;
        applyBackgroundImage(settingsBlock, backgroundImageGlass);
        settingsBlock.classList.add("main-rounded-image");
        break;
      default:
        css = css_uwu_classic;
        break;
    }
  
    const oldStyle = document.getElementById("css-uwu-theme");
    if (oldStyle) {
      oldStyle.remove();
    }
  
    document.head.insertAdjacentHTML(
      "beforeend",
      `<style id="css-uwu-theme">${css}</style>`
    );
  }
  
  applySettingsTheme(settings.settingsTheme);
  // ====================================================================================================================
  //  . . . –®–†–ò–§–¢ –ì–†–û–ú–ö–û–°–¢–ò –ß–ê–¢–ê . . .
  // ====================================================================================================================
  function saveFontSettings() {
    let fontSize = {};
  
    document.querySelectorAll('input[data-font-size]').forEach(input => {
      fontSize[input.dataset.fontSize] = input.value;
    });
  
    localStorage.setItem('uwu_fontSize', JSON.stringify(fontSize));
  }
  
  function loadFontSettings() {
    let defaultFontSize = {
      vlm0: '10',
      vlm1: '11',
      vlm2: '11.5',
      vlm3: '12',
      vlm4: '12.5',
      vlm5: '13',
      vlm6: '15',
      vlm7: '17',
      vlm8: '19',
      vlm9: '21',
      vlm10: '23',
      fontSizeBody: '14',
      fontSizeSmall: '12',
      fontSizeLocation: '14',
      fontFamilyBody: 'Verdana'
    };
  
    let fontSize = JSON.parse(localStorage.getItem('uwu_fontSize')) || defaultFontSize;
  
    document.querySelectorAll('input[data-font-size]').forEach(input => {
      input.value = fontSize[input.dataset.fontSize] || ''; 
    });

    saveFontSettings();
  }
  
  document.querySelectorAll('input[data-font-size]').forEach(input => {
    input.addEventListener('input', saveFontSettings); 
  });
  
  loadFontSettings();
  // ====================================================================================================================
  //  . . . –¢–ï–ú–´ –ò –¶–í–ï–¢–ê –ò–ì–†–û–í–û–ô . . .
  // ====================================================================================================================
  const colorInputs = document.querySelectorAll("#color-picker input[type='text']");
  const saveThemeButton = document.getElementById("saveThemeButton");
  const themeSelect = document.getElementById("theme-select");
  const addThemeButton = document.getElementById("addThemeButton");
  const removeThemeButton = document.getElementById("removeThemeButton");
  
  let currentThemeName = getCurrentThemeName();
  let allThemes = getThemes();
  
  function loadThemeToInputs(themeName) {
    const theme = allThemes[themeName]?.colors;
    colorInputs.forEach((input) => {
      const colorKey = input.dataset.color;
      input.value = theme?.[colorKey] || "";
    });
  }
  
  function saveThemeFromInputs() {
    const themeData = { colors: {} };
    colorInputs.forEach((input) => {
      const colorKey = input.dataset.color;
      themeData.colors[colorKey] = input.value;
    });
    allThemes[currentThemeName] = themeData; 
    saveThemes(allThemes);
    console.log(`–¢–µ–º–∞ "${currentThemeName}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
  }
  
  function updateThemeSelect() {
    themeSelect.innerHTML = "";
    Object.keys(allThemes).forEach((name) => {
      const option = document.createElement("option");
      option.value = name;
      option.textContent = name;
      themeSelect.appendChild(option);
    });
    themeSelect.value = currentThemeName;
    removeThemeButton.style.display = Object.keys(defaultThemes).includes(currentThemeName) ? "none" : "inline";
  }
  
  themeSelect.addEventListener("change", (event) => {
    currentThemeName = event.target.value;
    setCurrentThemeName(currentThemeName);
    loadThemeToInputs(currentThemeName);
    updateThemeSelect(); 
    updateSaveButtonState();
  });
  
  addThemeButton.addEventListener("click", () => {
    const newThemeName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã:");
    if (newThemeName && !allThemes[newThemeName]) {
      allThemes[newThemeName] = { colors: {} };
      saveThemes(allThemes);
      updateThemeSelect();
      themeSelect.value = newThemeName;
      currentThemeName = newThemeName;
      setCurrentThemeName(currentThemeName);
      loadThemeToInputs(currentThemeName);
    }
  });
  
  removeThemeButton.addEventListener("click", () => {
    if (!Object.keys(defaultThemes).includes(currentThemeName)) {
      delete allThemes[currentThemeName];
      saveThemes(allThemes);
      currentThemeName = "–¢—ë–º–Ω–∞—è –¢–µ–º–∞";
      setCurrentThemeName(currentThemeName);
      updateThemeSelect();
      loadThemeToInputs(currentThemeName);
    }
  });
  
  saveThemeButton.addEventListener("click", () => {
    if (isDefaultTheme(currentThemeName)) {
      alert("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ–º—É.");
    } else {
      saveThemeFromInputs();
    }
  });
  
  colorInputs.forEach((input) => {
    input.addEventListener("input", () => {
      if (isDefaultTheme(currentThemeName)) {
        alert("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ–º—É.");
        loadThemeToInputs(currentThemeName); 
      } else {
        saveThemeFromInputs(); 
      }
    });
  });
  
  updateThemeSelect();
  loadThemeToInputs(currentThemeName);
  // ====================================================================================================================
  //  . . . –†–ê–ë–û–¢–ê –¶–í–ï–¢–û–í –ù–ê–í–´–ö–û–í –ò –ü–ê–†–ê–ú–ï–¢–†–û–í . . .
  // ====================================================================================================================
  document
    .querySelectorAll('#parameters-color-settings input[type="color"]')
    .forEach((element) => {
      element.addEventListener("change", () => {
        const paramId = element.dataset.param;
        const colorType = element.dataset.colorType;
        const colorValue = element.value;

        if (!settings.parametersColors[paramId]) {
          settings.parametersColors[paramId] = [];
        }
        const colorIndex =
          colorType === "bar-from"
            ? 0
            : colorType === "bar-to"
            ? 1
            : colorType === "bg-from"
            ? 2
            : 3;
        settings.parametersColors[paramId][colorIndex] = colorValue;

        saveSettings();
      });
    });

  function restoreColorPickers() {
    for (const paramId in settings.parametersColors) {
      const colors = settings.parametersColors[paramId];

      const barFromInput = document.querySelector(
        `#parameters-color-settings input[type="color"][data-param="${paramId}"][data-color-type="bar-from"]`
      );
      const barToInput = document.querySelector(
        `#parameters-color-settings input[type="color"][data-param="${paramId}"][data-color-type="bar-to"]`
      );
      const bgFromInput = document.querySelector(
        `#parameters-color-settings input[type="color"][data-param="${paramId}"][data-color-type="bg-from"]`
      );
      const bgToInput = document.querySelector(
        `#parameters-color-settings input[type="color"][data-param="${paramId}"][data-color-type="bg-to"]`
      );

      if (barFromInput) barFromInput.value = colors[0];
      if (barToInput) barToInput.value = colors[1];
      if (bgFromInput) bgFromInput.value = colors[2];
      if (bgToInput) bgToInput.value = colors[3];
    }
  }
  restoreColorPickers();
  // ====================================================================================================================
  //  . . . –ü–û–î–°–í–ï–¢–ö–ê –†–ï–°–£–†–°–û–í . . .
  // ====================================================================================================================
  function saveHighlightSettings() {
    const highlightResources = [];
  
    document.querySelectorAll('.uwu-table-highlight-Resources tbody tr').forEach(row => {
      const resourceName = row.querySelector('.uwu-color-picker').dataset.resource;
      const colorPicker = row.querySelector('.uwu-color-picker');
      const checkbox = row.querySelector('.uwu-highlight-checkbox');
  
      const resource = {
        name: resourceName,
        color: colorPicker.value,
        highlight: checkbox.checked
      };
  
      highlightResources.push(resource);
    });
  
    localStorage.setItem('uwu_highlightResources', JSON.stringify(highlightResources));
  }
  
  function restoreHighlightSettings() {
    const savedSettings = localStorage.getItem('uwu_highlightResources');
    if (savedSettings) {
      const highlightResources = JSON.parse(savedSettings);
  
      highlightResources.forEach(resource => {
        const colorPicker = document.querySelector(`.uwu-color-picker[data-resource="${resource.name}"]`);
        const checkbox = document.querySelector(`.uwu-highlight-checkbox[data-resource="${resource.name}"]`);
  
        if (colorPicker) colorPicker.value = resource.color;
        if (checkbox) checkbox.checked = resource.highlight;
      });
    }
  }

restoreHighlightSettings();

document.querySelectorAll('.uwu-color-picker').forEach(element => {
  element.addEventListener('input', saveHighlightSettings);
});

document.querySelectorAll('.uwu-highlight-checkbox').forEach(element => {
  element.addEventListener('change', saveHighlightSettings);
});

  // ====================================================================================================================
  //  . . . –¶–í–ï–¢–ê –ö–û–ú–ê–ù–î–ù–´–• –ë–û–Å–í . . .
  // ====================================================================================================================
  document
    .querySelectorAll('#colorSettingsTable input[type="color"]')
    .forEach((element) => {
      element.addEventListener("change", () => {
        const team = `team${element.dataset.team}`;
        const part = element.dataset.part === "green" ? 0 : 1;
        const colorValue = element.value;
        settings.fightTeamsColors[team][part] = colorValue;
        saveSettings();
      });
    });

  function restoreColorTeamsPickers() {
    document
      .querySelectorAll('#colorSettingsTable input[type="color"]')
      .forEach((element) => {
        element.addEventListener("change", () => {
          const team = `team${element.dataset.team}`;
          const part = element.dataset.part === "green" ? 0 : 1;
          const colorValue = element.value;
          settings.fightTeamsColors[team][part] = colorValue;
          saveSettings();
        });
      });
  }

  restoreColorTeamsPickers();
  // ====================================================================================================================
  //   . . . –°–ë–†–û–° –ù–ê–°–¢–†–û–ï–ö . . .
  // ====================================================================================================================
  const settingsKeys = [
    "uwu_settings",
    "uwu_version",
    "uwu_layoutSettings",
    "uwu_climbingPanelState",
    "uwu_moduleStates",
    "uwu_fightPanelPosition",
    "uwu_climbingPanelStatus",
    "uwu_privateModules",
    "uwu_colorThemes",
    "uwu_currentTheme",
    "uwu_fontSize",
    "uwu_clock",
    "uwu_templates",
    "uwu_highlightResources",
  ];

  function resetAllSaves() {
    const confirmReset = confirm(
      "–¢–æ—á–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ UwU –ù–∞—Å—Ç—Ä–æ–π–∫–∏? –≠—Ç–æ —É–¥–∞–ª–∏—Ç—å –¥–∞–∂–µ –≤–∞—à–∏ –∫–∞—Ä—Ç—ã –ú–∏–Ω–Ω—ã—Ö –ø–æ–ª–µ–π, —Ç–µ–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
    );
    if (confirmReset) {
      settingsKeys.forEach((key) => {
        localStorage.removeItem(key);
        console.log(`–£–¥–∞–ª–µ–Ω–æ ${key}`);
      });
      console.log("–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
    } else {
      console.log("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω");
    }
  }

  document
    .getElementById("resetAllSaves")
    .addEventListener("click", resetAllSaves);
  // ====================================================================================================================
  //  . . . –í–ó–ê–ò–ú–û–ò–°–ö–õ–Æ–ß–ê–Æ–©–ò–ï–°–Ø –ß–ï–ö–ë–û–ö–°–´ . . .
  // ====================================================================================================================
  const exclusiveCheckboxGroups = [
    ["backgroundRepeat", "backgroundUser"],
    ["parametersBackgroundImage", "parametersUserBackgroundImage"],
  ];

  document
    .querySelectorAll("#uwusettings [data-setting]")
    .forEach((element) => {
      const setting = element.dataset.setting;
      element.addEventListener("change", () => {
        if (element.type === "checkbox") {
          const group = exclusiveCheckboxGroups.find((g) =>
            g.includes(setting)
          );
          if (group) {
            group.forEach((s) => {
              if (s !== setting) {
                settings[s] = false;
                document.querySelector(
                  `#uwusettings [data-setting="${s}"]`
                ).checked = false;
              }
            });
          }
          settings[setting] = element.checked;
        } else {
          settings[setting] = element.value;
        }
        saveSettings();
      });
    });
  // ====================================================================================================================
  //  . . . –°–û–ó–î–ê–ù–ò–ï –í–´–ü–ê–î–ê–Æ–©–ò–• –°–ü–ò–°–ö–û–í –ü–†–ò –ü–û–ú–û–©–ò –§–£–ù–ö–¶–ò–ò createCustomSelect . . .
  // ====================================================================================================================
  loadSettings();
  // –ó–≤—É–∫–∏ –∑–≤—É–∫–∏ –∑–≤—É–∫–∏, –≤—É—Ö—É.
  const notificationSounds = [
    { name: "–ó–≤—É–∫ 1", id: "notificationSound1" },
    { name: "–ó–≤—É–∫ 2", id: "notificationSound2" },
    { name: "–ó–≤—É–∫ 3", id: "notificationSound3" },
  ];

  createCustomSelect("climbingRefreshNotificationSound", notificationSounds);
  createCustomSelect("myNameNotificationSound", notificationSounds);
  // ==============================================================================
  const howShowOtherCatsList = [
    { name: "–ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å", id: "1" },
    { name: "–ö–æ–º–ø–∞–∫—Ç–Ω–æ", id: "2" },
    { name: "–¶–µ–ª–∏–∫–æ–º", id: "3" },
  ];

  createCustomSelect("showOtherCatsList", howShowOtherCatsList);
  // ==============================================================================
  const themeOptions = [
    { id: "classic", name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è" },
    { id: "dark", name: "–¢—ë–º–Ω–∞—è" },
    { id: "glass", name: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è" },
  ];
  
  createCustomSelect("settingsTheme", themeOptions);
  // ==============================================================================
  const climbingPanelOrientations = [
    { id: "vertical", name: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π" },
    { id: "horizontal", name: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π" },
  ]

  createCustomSelect("climbingPanelOrientation", climbingPanelOrientations);
    // ==============================================================================
    const clockStyles = [
      { id: "compact", name: "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π" },
      { id: "standard", name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" },
      { id: "string", name: "–°—Ç—Ä–æ—á–Ω—ã–π" },
    ]
  
    createCustomSelect("clockStyle", clockStyles);
    // ==============================================================================
    const clockPositions = [
      { id: "fly", name: "–°–≤–æ–±–æ–¥–Ω–æ" },
      { id: "tos", name: "–í –±–ª–æ–∫–µ –ø–æ–≥–æ–¥—ã" },
    ]
  
    createCustomSelect("clockPosition", clockPositions);
    // ==============================================================================
    const highlightResourcesStyles = [
      { id: "background", name: "–§–æ–Ω / –ë—ã—Å—Ç—Ä–æ" },
      { id: "glow", name: "–°–≤–µ—á–µ–Ω–∏–µ / –ú–µ–¥–ª–µ–Ω–Ω–æ" },
    ]
    
    createCustomSelect("highlightResourcesStyle", highlightResourcesStyles);
    // ==============================================================================
    const cleaningLogStyles = [
      { id: "smart", name: "–£–º–Ω—ã–π" },
      // { id: "standart", name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" },
    ]
  
    createCustomSelect("cleaningLogStyle", cleaningLogStyles);
  // ====================================================================================================================
  //   . . . –°–û–ó–î–ê–ù–ò–ï –í–´–ü–ê–î–ê–Æ–©–ò–• –°–ü–ò–°–ö–û–í . . .
  // ====================================================================================================================
  function createCustomSelect(selectId, options) {
  
    const selectContainer = document.getElementById(selectId);
    const selectedElement = selectContainer.querySelector(".select-selected");
    const optionsContainer = selectContainer.querySelector(".select-items");
  
    if (settings && settings[selectId] !== undefined) {
      const selectedOption = options.find(
        (option) => option.id === settings[selectId]
      );
      if (selectedOption) {
        selectedElement.textContent = selectedOption.name;
      }
    }
  
    options.forEach((option, index) => {
      const optionElement = document.createElement("div");
      optionElement.textContent = option.name;
      optionElement.dataset.id = option.id;
  
      optionElement.addEventListener("click", () => {
        selectedElement.textContent = option.name;
        settings[selectId] = option.id;
        saveSettings();
        selectContainer.classList.remove("active");
      });
  
      optionsContainer.appendChild(optionElement);
    });
  
    selectedElement.addEventListener("click", () => {
      selectContainer.classList.toggle("active");
    });
  }
  // ====================================================================================================================
  //  . . . –ö–ù–û–ü–ö–ê –ù–û–í–û–°–¢–ï–ô . . .
  // ====================================================================================================================
  window.addEventListener("load", () => {
    const newsButton = document.getElementById("news-button");
    const newsList = document.getElementById("news-list");

    if (newsButton && newsList) {
      newsButton.addEventListener("click", () => {
        if (newsList.style.display === "none") {
          newsList.style.display = "block";
        } else {
          newsList.style.display = "none";
        }
      });
    }
  });
  // ====================================================================================================================
  //   . . . –ö–ù–û–ü–ö–ê –¢–ï–°–¢–ê –ó–í–£–ö–û–í . . .
  // ====================================================================================================================
  function addSoundTestButton(
    containerId,
    settingsKeyForSound,
    settingsKeyForVolume
  ) {
    const container = document.getElementById(containerId);
    if (!container) {
      console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å ID ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }

    const testButton = document.createElement("button");
    testButton.textContent = "–¢–µ—Å—Ç –∑–≤—É–∫–∞";
    testButton.addEventListener("click", () => {
      const selectedSoundId = settings[settingsKeyForSound];
      const volume = settings[settingsKeyForVolume] || 5;
      if (selectedSoundId) {
        soundManager.playSound(selectedSoundId, volume);
      } else {
        console.error(
          `–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–≤—É–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
        );
      }
    });

    container.appendChild(testButton);
  }

  addSoundTestButton(
    "climbingRefreshNotificationSoundContainer",
    "climbingRefreshNotificationSound",
    "climbingRefreshNotificationVolume"
  );
  addSoundTestButton(
    "myNameNotificationSoundContainer",
    "myNameNotificationSound",
    "notificationMyNameVolume"
  );
  // ====================================================================================================================
  //  . . . –°–ë–†–û–° –ü–û–ó–ò–¶–ò–ò –ß–ê–°–ò–ö–û–í . . .
  // ====================================================================================================================
  document.getElementById('resetClockPosition').addEventListener('click', () => {
    const defaultPosition = { x: 10, y: 10 };
    localStorage.setItem("uwu_clock", JSON.stringify(defaultPosition));
  });
  // ====================================================================================================================
  //  . . . –ò–ú–ü–û–†–¢ / –≠–ö–°–ü–û–†–¢ –ù–ê–°–¢–†–û–ï–ö . . .
  // ====================================================================================================================
  const importButton = document.getElementById("importSettingsButton");
  const importSettingsInput = document.getElementById("importSettings");
  const exportSettingsInput = document.getElementById("exportSettings");

  importButton.addEventListener("click", () => {
    const importedSettings = importSettingsInput.value;

    try {
      const parsedSettings = JSON.parse(importedSettings);
      settings = { ...settings, ...parsedSettings };
      localStorage.setItem("uwu_settings", JSON.stringify(settings));
      console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:", settings);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
    }
    updateExportField();
  });

  function updateExportField() {
    const settingsToExport = JSON.stringify(settings);
    exportSettingsInput.value = settingsToExport;
  }

  loadSettings();
  updateExportField();
  // ====================================================================================================================
//  . . . –†–ï–î–ò–ó–ê–ô–ù –ù–ê–°–¢–†–û–ï–ö –ö–û–°–¢–Æ–ú–û–í . . .
// ====================================================================================================================
if (settings.redesignCostumsSettings) {
  function addStyles() {
    const style = document.createElement('style');
    style.innerHTML = // css
      `
        .list-group-item {
            display: grid !important;
            grid-template-columns: auto 1fr;
            grid-template-rows: auto auto;
            align-items: center;
            margin-bottom: 10px;
            width: 280px !important;
        }
        .list-group-item img {
            margin-right: 10px;
            width: 50px;
            height: 80px;
        }
        .costume-image-container {
            grid-column: 1;
            grid-row: 1 / span 2;
            margin-right: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .list-group {
          resize: vertical;
          display: flex;
          flex-direction: column;
          align-items: center;
          width: 100%;
        }
        .list-group-item span {
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
        .costume-id {
            font-weight: bold;
            margin-bottom: 5px;
            grid-column: 2;
            grid-row: 1;
        }
        .costume-text {
            grid-column: 2;
            grid-row: 2;
        }

        .col-3 {
          display: flex;
          flex-direction: row;
          flex-wrap: wrap;
        }

        .col-3 > button {
          height: 22px;
        }
    `;
    document.head.appendChild(style);
  }

  function addCostumePreview() {
    const items = document.querySelectorAll('.list-group-item');
    items.forEach(item => {
        const costumeId = item.textContent.trim().split(' ')[0];
        const imageContainer = item.querySelector('.costume-image-container');
        const img = imageContainer ? imageContainer.querySelector('img') : null;

        if (!imageContainer || !img || img.getAttribute('data-costume-id') !== costumeId) {
            const imgUrl = `https://catwar.net/cw3/cats/0/costume/${costumeId}.png`;

            if (!imageContainer) {
                const newImageContainer = document.createElement('div');
                newImageContainer.classList.add('costume-image-container');

                const newImg = document.createElement('img');
                newImg.src = imgUrl;
                newImg.alt = `Costume ${costumeId}`;
                newImg.setAttribute('data-costume-id', costumeId);

                newImageContainer.appendChild(newImg);

                item.insertBefore(newImageContainer, item.firstChild);
            } else {
                img.src = imgUrl;
                img.setAttribute('data-costume-id', costumeId);
            }
        }
    });
  }

  addStyles();
  setupMutationObserver(".double-container", addCostumePreview, {
    childList: true,
    subtree: true,
  });
}
  // ====================================================================================================================
  //  . . . –ú–ê–ö–ï–¢ –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò –ò–ì–†–û–í–û–ô . . .
  // ====================================================================================================================
  const blockNames = {
    tr_info: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    tr_tos: "–ü–æ–≥–æ–¥–∞",
    tr_chat: "–ß–∞—Ç",
    tr_actions: "–î–µ–π—Å—Ç–≤–∏—è",
    tr_mouth: "–í–æ —Ä—Ç—É",
    // 'tr_sky': '–ù–µ–±–æ',
  };
  const leftColumn = document.querySelector("#layout-customizer .column.left");
  const rightColumn = document.querySelector(
    "#layout-customizer .column.right"
  );

  function createBlockElement(blockId) {
    const blockElement = document.createElement("div");
    blockElement.classList.add("block", blockId);

    const blockName = document.createElement("span");
    blockName.textContent = blockNames[blockId];
    blockElement.appendChild(blockName);

    const controlsWrapper = document.createElement("div");
    controlsWrapper.classList.add("controls");

    if (blockId === "tr_info") {
      const moveInfoButton = document.createElement("button");
      moveInfoButton.textContent = "‚è™–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å‚è©";
      moveInfoButton.classList.add("move-info", "install-button");
      moveInfoButton.addEventListener("click", () => {
        swapColumns(blockElement);
      });
      controlsWrapper.appendChild(moveInfoButton);
    } else {
      const moveUpButton = document.createElement("button");
      moveUpButton.textContent = "üîº–í–≤–µ—Ä—Ö";
      moveUpButton.classList.add("move-up", "install-button");
      moveUpButton.addEventListener("click", () => {
        const previousBlock = blockElement.previousElementSibling;
        if (previousBlock) {
          blockElement.parentNode.insertBefore(blockElement, previousBlock);
        }
      });
      controlsWrapper.appendChild(moveUpButton);

      const moveDownButton = document.createElement("button");
      moveDownButton.textContent = "üîΩ–í–Ω–∏–∑";
      moveDownButton.classList.add("move-down", "install-button");
      moveDownButton.addEventListener("click", () => {
        const nextBlock = blockElement.nextElementSibling;
        if (nextBlock) {
          blockElement.parentNode.insertBefore(nextBlock, blockElement);
        }
      });
      controlsWrapper.appendChild(moveDownButton);
    }

    blockElement.appendChild(controlsWrapper);
    return blockElement;
  }

  function swapColumns(blockElement) {
    if (blockElement.parentNode === leftColumn) {
      const rightColumnBlocks = Array.from(rightColumn.children);
      rightColumn.innerHTML = "";
      rightColumn.appendChild(blockElement);
      rightColumnBlocks.forEach((block) => leftColumn.appendChild(block));
    } else {
      const leftColumnBlocks = Array.from(leftColumn.children);
      leftColumn.innerHTML = "";
      leftColumn.appendChild(blockElement);
      leftColumnBlocks.forEach((block) => rightColumn.appendChild(block));
    }
  }

  const saveButton = document.getElementById("SettingSaveButton4");

  saveButton.addEventListener("click", () => {
    const leftBlocks = Array.from(leftColumn.querySelectorAll(".block")).map(
      (block) => block.classList[1]
    );
    const rightBlocks = Array.from(rightColumn.querySelectorAll(".block")).map(
      (block) => block.classList[1]
    );

    const layoutSettings = {
      leftBlocks,
      rightBlocks,
    };

    localStorage.setItem("uwu_layoutSettings", JSON.stringify(layoutSettings));
  });

  function loadLayoutSettings() {
    const savedSettings = localStorage.getItem("uwu_layoutSettings");
    if (savedSettings) {
      const { leftBlocks, rightBlocks } = JSON.parse(savedSettings);

      leftColumn.innerHTML = "";
      rightColumn.innerHTML = "";

      leftBlocks.forEach((blockId) => {
        const blockElement = createBlockElement(blockId);
        leftColumn.appendChild(blockElement);
      });

      rightBlocks.forEach((blockId) => {
        const blockElement = createBlockElement(blockId);
        rightColumn.appendChild(blockElement);
      });
    } else {
      const defaultLeftBlocks = ["tr_info"];
      const defaultRightBlocks = [
        "tr_tos",
        "tr_chat",
        "tr_actions",
        "tr_mouth",
      ];

      defaultLeftBlocks.forEach((blockId) => {
        leftColumn.appendChild(createBlockElement(blockId));
      });

      defaultRightBlocks.forEach((blockId) => {
        rightColumn.appendChild(createBlockElement(blockId));
      });

      const layoutSettings = {
        leftBlocks: defaultLeftBlocks,
        rightBlocks: defaultRightBlocks,
      };
      localStorage.setItem(
        "uwu_layoutSettings",
        JSON.stringify(layoutSettings)
      );
    }
  }

  window.addEventListener("load", loadLayoutSettings);
  // ====================================================================================================================
  //  . . . –†–ï–î–ê–ö–¢–û–† –í–ö–õ–ê–î–û–ö –ò –¢–ê–ë–õ–ò–¶ –ú–ò–ù–ù–û–ì–û –ü–û–õ–Ø . . .
  // ====================================================================================================================
  // –∫–∞–∫ –∂–µ —è –Ω–µ–Ω–∞–≤–∏–∂—É –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ –∫–∞–∫ –∂–µ —è –Ω–µ–Ω–∞–≤–∏–∂—É –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ –∫–∞–∫ –∂–µ —è –Ω–µ–Ω–∞–≤–∏–∂—É –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ
  const tabManager = {
    tabs: [],
    currentTabIndex: 0,
  
    createTab(name) {
      const newTab = {
        name: name,
        tables: [],
        currentTableId: 0,
      };
  
      this.tabs.push(newTab);
      this.render();
      this.switchTab(this.tabs.length - 1);
    },
  
    createTable(
      tableName = `–õ–æ–∫–∞—Ü–∏—è ${this.tabs[this.currentTabIndex].tables.length + 1}`
    ) {
      const currentTab = this.tabs[this.currentTabIndex];
      currentTab.tables.push({ name: tableName });
      this.saveState();
      this.render();
    },
  
    removeTable(tableIndex) {
      const currentTab = this.tabs[this.currentTabIndex];
      if (currentTab && currentTab.tables[tableIndex]) {
        currentTab.tables.splice(tableIndex, 1);
        if (currentTab.currentTableId === tableIndex) {
          currentTab.currentTableId = Math.max(
            0,
            currentTab.currentTableId - 1
          );
        }
        this.saveState();
        this.render();
      }
    },
  
    removeTab(index) {
      this.tabs.splice(index, 1);
      if (index === this.currentTabIndex) {
        this.currentTabIndex = Math.max(0, this.currentTabIndex - 1);
      }
      this.saveState();
      this.render();
    },
  
    switchTab(index) {
      this.currentTabIndex = index;
      this.render();
    },
  
    switchTable(tableIndex) {
      const currentTab = this.tabs[this.currentTabIndex];
      if (currentTab) {
        currentTab.currentTableId = tableIndex;
        this.saveState();
        this.render();
      }
    },
  
    renameTab(index) {
      const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≤–∫–ª–∞–¥–∫–∏:", this.tabs[index].name);
      if (newName) {
        this.tabs[index].name = newName;
        this.saveState();
        this.render();
      }
    },
  
    renameTable(tableIndex) {
      const currentTab = this.tabs[this.currentTabIndex];
      if (currentTab) {
        const newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—è:", currentTab.tables[tableIndex].name);
        if (newName) {
          currentTab.tables[tableIndex].name = newName;
          this.saveState();
          this.render();
        }
      }
    },
  
    saveState() {
      localStorage.setItem("uwu_climbingPanelState", JSON.stringify(this));
    },
  
    render() {
      this.renderTabs();
      this.renderTables();
    },
  
    renderTabs() {
      const tabRow = document.getElementById("uwu-buttonRow1-settings");
      tabRow.innerHTML = "";
  
      this.tabs.forEach((tab, index) => {
        const tabButton = document.createElement("button");
        tabButton.textContent = tab.name;
        tabButton.classList.add("tab-button");
  
        if (index === this.currentTabIndex) {
          tabButton.classList.add("active");
        }
  
        tabButton.addEventListener("click", () => this.switchTab(index));
  
        const removeButton = document.createElement("button");
        removeButton.textContent = "X";
        removeButton.classList.add("remove-button");
  
        removeButton.addEventListener("click", () => this.removeTab(index));
  
        const renameButton = document.createElement("button");
        renameButton.textContent = "‚úé";
        renameButton.classList.add("rename-button");
  
        renameButton.addEventListener("click", () => this.renameTab(index));
  
        const tabContainer = document.createElement("div");
        tabContainer.classList.add("tab-container");
        tabContainer.appendChild(tabButton);
        tabContainer.appendChild(renameButton);
        tabContainer.appendChild(removeButton);
  
        tabRow.appendChild(tabContainer);
      });
  
      const addTabButton = document.createElement("button");
      addTabButton.textContent = "+";
      addTabButton.classList.add("add-button");
      addTabButton.addEventListener("click", () => {
        const tabName = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∫–ª–∞–¥–∫–∏:");
        if (tabName) {
          this.createTab(tabName);
        }
      });
      tabRow.appendChild(addTabButton);
    },
  
    renderTables() {
      const tableRow = document.getElementById("uwu-buttonRow2-settings");
      tableRow.innerHTML = "";
  
      const currentTab = this.tabs[this.currentTabIndex];
  
      if (currentTab) {
        currentTab.tables.forEach((table, index) => {
          const tableButton = document.createElement("button");
          tableButton.textContent = table.name;
          tableButton.classList.add("table-button");
  
          tableButton.addEventListener("click", () => this.switchTable(index));
  
          const removeButton = document.createElement("button");
          removeButton.textContent = "X";
          removeButton.classList.add("remove-button");
  
          removeButton.addEventListener("click", () => this.removeTable(index));
  
          const renameButton = document.createElement("button");
          renameButton.textContent = "‚úé";
          renameButton.classList.add("rename-button");
  
          renameButton.addEventListener("click", () => this.renameTable(index));
  
          const tableContainer = document.createElement("div");
          tableContainer.classList.add("table-container");
          tableContainer.appendChild(tableButton);
          tableContainer.appendChild(renameButton);
          tableContainer.appendChild(removeButton);
  
          tableRow.appendChild(tableContainer);
        });
  
        const addTableButton = document.createElement("button");
        addTableButton.textContent = "+";
        addTableButton.classList.add("add-button");
  
        addTableButton.addEventListener("click", () => {
          const tableName = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—è:");
          if (tableName) {
            this.createTable(tableName);
          }
        });
  
        tableRow.appendChild(addTableButton);
      }
    },
  };
  
  const savedState = localStorage.getItem("uwu_climbingPanelState");
  if (!savedState) {
    tabManager.createTab("–í–∫–ª–∞–¥–∫–∞ 1");
    for (let i = 0; i < 5; i++) {
      tabManager.createTable(`–ü–æ–ª–µ ${i + 1}`);
    }
  
    tabManager.createTab("–í–∫–ª–∞–¥–∫–∞ 2");
    for (let i = 0; i < 5; i++) {
      tabManager.createTable(`–ü–æ–ª–µ ${i + 1}`);
    }
  
    tabManager.saveState();
  } else {
    const state = JSON.parse(savedState);
    Object.assign(tabManager, state);
  }
  
  tabManager.render();
}
// ====================================================================================================================
//  . . . –í–ö–õ–ê–î–ö–ò –ì–õ–ê–í–ù–´–• –ù–ê–°–¢–†–û–ï–ö . . .
// ====================================================================================================================
if (targetSettings.test(window.location.href)) {
  const buttonContainer = document.getElementById("button-container");

  buttonContainer.addEventListener("click", (event) => {
    const clickedElement = event.target;
    const clickedButton = clickedElement.closest("button");
    if (!clickedButton) return;

    const panelId = clickedButton.id.replace("button", "panel");
    const targetPanel = document.getElementById(panelId);

    buttonContainer.querySelectorAll("button").forEach((button) => {
      const correspondingPanelId = button.id.replace("button", "panel");
      const correspondingPanel = document.getElementById(correspondingPanelId);

      correspondingPanel.style.display =
        correspondingPanel === targetPanel ? "block" : "none";
      button.classList.toggle("active", button === clickedButton);
    });
  });

  const defaultButton = buttonContainer.querySelector("button");
  const defaultPanelId = defaultButton.id.replace("button", "panel");
  const defaultPanel = document.getElementById(defaultPanelId);

  buttonContainer.querySelectorAll("button").forEach((button) => {
    const correspondingPanelId = button.id.replace("button", "panel");
    const correspondingPanel = document.getElementById(correspondingPanelId);

    if (correspondingPanel !== defaultPanel) {
      correspondingPanel.style.display = "none";
    }
  });

  defaultPanel.style.display = "block";
  defaultButton.classList.add("active");
}
// ====================================================================================================================
//  . . . –û–ù–õ–ê–ô–ù –ú–ê–ì–ê–ó–ò–ù –°–¢–ò–õ–ï–ô . . .
// ====================================================================================================================
// –±—É–¥—É –≤–µ—á–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–æ–º, –∞ –∑–∞—á–µ–º —è —ç—Ç–æ –≤–æ–æ–±—â–µ —Å–¥–µ–ª–∞–ª..................
const moduleStates = {};
const defaultModules = [
  // "style.css",
  // ...
];
const privateModules = {};

function loadModuleStates() {
  const storedModuleStates = localStorage.getItem("uwu_moduleStates");
  if (storedModuleStates) {
    const loadedModuleStates = JSON.parse(storedModuleStates);
    Object.assign(moduleStates, loadedModuleStates);
  } else {
    for (const moduleName of defaultModules) {
      moduleStates[moduleName] = true;
    }
  }

  const storedPrivateModules = localStorage.getItem("uwu_privateModules");
  if (storedPrivateModules) {
    Object.assign(privateModules, JSON.parse(storedPrivateModules));
  }
}

async function loadModuleListOnSettings() {
  const url =
    "https://raw.githubusercontent.com/Ibirtem/CatWar/main/modules/modules.txt";

  const targetSettings = /^https:\/\/catwar\.net\/settings/;
  if (!targetSettings.test(window.location.href)) {
    return;
  }

  try {
    const response = await fetch(url);
    const moduleList = await response.text();
    const modules = moduleList.split("\n").filter((line) => line.trim() !== "");

    const moduleInfoContainer = document.getElementById("module-info");

    if (!moduleInfoContainer) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥—É–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    for (const moduleInfo of modules) {
      const [moduleName, description, version] = moduleInfo.split("|");
      const isOnlineModule = !localStorage.getItem(moduleName);
      const moduleContainer = createModuleContainer(
        moduleName,
        description,
        version,
        isOnlineModule
      );
      moduleInfoContainer.appendChild(moduleContainer);

      if (moduleStates[moduleName]) {
        loadModule(moduleName, description, version);
      }
    }

    for (const [moduleName, moduleInfo] of Object.entries(privateModules)) {
      const { description, version } = moduleInfo;
      const isPrivateModule = true;
      const moduleContainer = createModuleContainer(
        moduleName,
        description,
        version,
        false,
        isPrivateModule
      );
      moduleInfoContainer.appendChild(moduleContainer);

      if (moduleStates[moduleName]) {
        loadModule(moduleName, description, version);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π:", error);
  }
}

async function activateModules() {
  const url =
    "https://raw.githubusercontent.com/Ibirtem/CatWar/main/modules/modules.txt";

  try {
    const response = await fetch(url);
    const moduleList = await response.text();
    const modules = moduleList.split("\n").filter((line) => line.trim() !== "");

    for (const moduleInfo of modules) {
      const [moduleName, description, version] = moduleInfo.split("|");
      const isOnlineModule = !localStorage.getItem(moduleName);

      if (moduleStates[moduleName]) {
        loadModule(moduleName, description, version);
      }
    }

    for (const [moduleName, moduleInfo] of Object.entries(privateModules)) {
      const { description, version } = moduleInfo;

      if (moduleStates[moduleName]) {
        loadModule(moduleName, description, version);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π:", error);
  }
}

function createModuleContainer(
  moduleName,
  description,
  version,
  isOnlineModule = false,
  isPrivateModule = false
) {
  const moduleContainer = document.createElement("div");
  moduleContainer.classList.add("module-container");

  const moduleInfo = document.createElement("div");
  moduleInfo.classList.add("module-info");
  moduleInfo.textContent = `${description}`;

  const modulePanel = document.createElement("div");
  modulePanel.classList.add("module-panel");

  const versionInfo = document.createElement("span");
  versionInfo.textContent = `–í–µ—Ä—Å–∏—è: ${version}`;
  modulePanel.appendChild(versionInfo);

  if (isOnlineModule) {
    const installButton = document.createElement("button");
    installButton.textContent = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å";
    installButton.classList.add("install-button");
    installButton.addEventListener("click", () => {
      loadModule(moduleName, description, version);
      moduleContainer.remove();
      createModuleContainer(
        moduleName,
        description,
        version,
        false,
        isPrivateModule
      );
    });
    modulePanel.appendChild(installButton);
  } else {
    const checkboxContainer = document.createElement("div");
    checkboxContainer.classList.add("checkbox-container");

    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.id = moduleName;
    checkbox.checked = moduleStates[moduleName] || false;
    checkboxContainer.appendChild(checkbox);

    const removeButton = document.createElement("button");
    removeButton.textContent = "–£–¥–∞–ª–∏—Ç—å";
    removeButton.classList.add("remove-button");
    removeButton.addEventListener("click", () => {
      unloadModule(moduleName);
      moduleContainer.remove();
    });
    modulePanel.appendChild(removeButton);

    checkbox.addEventListener("change", () => {
      moduleStates[moduleName] = checkbox.checked;
      localStorage.setItem("uwu_moduleStates", JSON.stringify(moduleStates));

      if (checkbox.checked) {
        loadModule(moduleName, description, version);
      }
    });

    moduleInfo.appendChild(checkboxContainer);
  }

  moduleContainer.appendChild(moduleInfo);
  moduleContainer.appendChild(modulePanel);

  return moduleContainer;
}

async function loadModule(moduleName, description, version) {
  const cachedModule = localStorage.getItem(moduleName);

  if (cachedModule) {
    activateModule(cachedModule, moduleName, description, version);
  } else {
    const url = `https://raw.githubusercontent.com/Ibirtem/CatWar/main/modules/${moduleName}`;
    try {
      const response = await fetch(url);
      if (response.ok) {
        const data = await response.text();
        localStorage.setItem(moduleName, data);
        activateModule(data, moduleName, description, version);

        moduleStates[moduleName] = true;
        localStorage.setItem("uwu_moduleStates", JSON.stringify(moduleStates));

        createModuleContainer(moduleName, description, version, false);

        loadModuleStates();
        clearModuleInfoContainer();
        loadModuleListOnSettings();
      } else {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è "${moduleName}": ${response.status} ${response.statusText}`
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è:", error);
    }
  }
}

function addStyle(css) {
  const style = document.createElement('style');
  style.appendChild(document.createTextNode(css));
  document.head.appendChild(style);
}

function activateModule(data, moduleName, description, version) {
  if (moduleName.endsWith(".css")) {
    addStyle(data);
  } else if (moduleName.endsWith(".js")) {
    try {
      new Function(data);
      eval(data);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥—É–ª—è "${moduleName}":`, error);
    }
  }
}

function unloadModule(moduleName) {
  localStorage.removeItem(moduleName);
  delete moduleStates[moduleName];
  localStorage.setItem("uwu_moduleStates", JSON.stringify(moduleStates));

  if (privateModules[moduleName]) {
    delete privateModules[moduleName];
    localStorage.setItem("uwu_privateModules", JSON.stringify(privateModules));
  }

  loadModuleStates();
  clearModuleInfoContainer();
  loadModuleListOnSettings();
}

function clearModuleInfoContainer() {
  const moduleInfoContainer = document.getElementById("module-info");
  while (moduleInfoContainer.firstChild) {
    moduleInfoContainer.removeChild(moduleInfoContainer.firstChild);
  }
}

loadModuleStates();
loadModuleListOnSettings();
window.addEventListener("load", activateModules);
// ====================================================================================================================
//   . . . –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö . . .
// ====================================================================================================================
loadSettings();
// ====================================================================================================================
//   . . . –ê–í–ê–¢–ê–†–´ –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–• . . .
// ====================================================================================================================
if (window.location.href !== targetCW3) {
  if (settings.commentsAvatars) {
    const styleElement = document.createElement("style");
    styleElement.textContent = `
      .avatar-img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        float: left;
        margin: 5px;
        border: black solid 1px;
      }
    `;
    document.head.appendChild(styleElement);

    startCheckingForComments();
  }

  function startCheckingForComments() {
    setupMutationObserver("#view_comments", insertAvatars, {
      childList: true,
    });
  }

  function insertAvatars() {
    const comments = document.querySelectorAll(".view-comment");
    comments.forEach((comment) => {
      if (!comment.querySelector('.avatar-img')) {
        const authorLink = comment.querySelector(".author");
        const catId = authorLink ? authorLink.getAttribute("href").match(/\/cat(\d+)/)?.[1] : null;

        const avatarImg = document.createElement("img");
        avatarImg.alt = "–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
        avatarImg.classList.add("avatar-img");

        if (!catId) {
          avatarImg.src = "https://e.catwar.net/avatar/0.jpg";
        } else {
          loadAvatar(catId, (avatarUrl) => {
            avatarImg.src = avatarUrl || "https://e.catwar.net/avatar/0.jpg";
          });
        }

        comment.insertBefore(avatarImg, comment.firstChild);
      }
    });
  }

  function loadAvatar(catId, callback) {
    const formats = ["png", "jpg", "gif"];
    let currentFormat = 0;

    function tryNextFormat() {
      const url = `https://e.catwar.net/avatar/${catId}.${formats[currentFormat]}`;
      const img = new Image();

      img.onload = () => callback(url);
      img.onerror = () => {
        currentFormat++;
        if (currentFormat < formats.length) {
          tryNextFormat();
        } else {
          callback(null);
        }
      };

      img.src = url;
    }

    tryNextFormat();
  }
}
// ====================================================================================================================
//   . . . –ú–ï–ù–ï–î–ñ–ï–† –ó–í–£–ö–û–í . . .
// ====================================================================================================================
function createSoundManager() {
  const sounds = {};
  let isUserInteracted = false;
  let lastPendingSound = null;

  function loadSound(id, url) {
    const audio = new Audio(url);
    sounds[id] = audio;
  }

  function playSound(id, volume) {
    return new Promise((resolve, reject) => {
      if (sounds[id]) {
        sounds[id].currentTime = 0;
        sounds[id].volume = volume / 10;
        sounds[id]
          .play()
          .then(resolve)
          .catch((error) => {
            if (!isUserInteracted) {
              console.warn(
                "–ü–æ–ª–∏—Ç–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∑–≤—É–∫. –ñ–¥—ë–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏."
              );
              lastPendingSound = { id, volume, resolve };
            } else {
              reject(error);
            }
          });
      } else {
        reject(new Error(`–ó–≤—É–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      }
    });
  }

  function playSoundNow(id, volume, resolve) {
    sounds[id]
      .play()
      .then(resolve)
      .catch((error) => {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —Å ID ${id}:`, error);
        resolve();
      });
  }

  function handleUserInteraction() {
    isUserInteracted = true;
    document.removeEventListener("click", handleUserInteraction);
    document.removeEventListener("touchstart", handleUserInteraction);
    document.removeEventListener("keydown", handleUserInteraction);

    if (lastPendingSound) {
      const { id, volume, resolve } = lastPendingSound;
      playSoundNow(id, volume, resolve);
      lastPendingSound = null;
    }
  }

  document.addEventListener("click", handleUserInteraction);
  document.addEventListener("touchstart", handleUserInteraction);
  document.addEventListener("keydown", handleUserInteraction);

  return {
    loadSound,
    playSound,
  };
}

const soundManager = createSoundManager();

// ===================== –°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –ó–í–£–ö–û–í =====================

soundManager.loadSound(
  "notificationSound1",
  "https://github.com/Ibirtem/CatWar/raw/main/sounds/notification_1.mp3"
);
soundManager.loadSound(
  "notificationSound2",
  "https://github.com/Ibirtem/CatWar/raw/main/sounds/notification_2.mp3"
);
soundManager.loadSound(
  "notificationSound3",
  "https://github.com/Ibirtem/CatWar/raw/main/sounds/notification_3.mp3"
);

// ====================================================================================================================
//  . . . –ó–ê–ì–†–£–ó–ö–ê –ö–û–î–ê –í –ò–ì–†–û–í–û–ô . . .
// ====================================================================================================================
// –ò–≥—Ä–æ–≤–∞—è –ª–∏... –Ø —á—ë –∑–Ω–∞—é?
if (window.location.href === targetCW3) {
  const containerElement = document.querySelector("body");
  const globalContainerElement = document.createElement("div");
  globalContainerElement.id = "uwu-global-container";
  containerElement.appendChild(globalContainerElement);

  const mainContainerElement = document.createElement("div");
  mainContainerElement.id = "uwu-main-container";
  globalContainerElement.appendChild(mainContainerElement);

  // ====================================================================================================================
  //  . . . –ü–û–î–ì–†–£–ó–ö–ê –¶–í–ï–¢–û–í–´–• –¢–ï–ú . . .
  // ====================================================================================================================
  const currentThemeName = getCurrentThemeName();
  const allThemes = getThemes();
  const theme = allThemes[currentThemeName]?.colors || {};
  // ====================================================================================================================
  //  . . . –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò . . .
  // ====================================================================================================================
  const extendedSettingsButtonElement = document.createElement("div");
  extendedSettingsButtonElement.innerHTML = extendedSettingsButton;
  mainContainerElement.appendChild(extendedSettingsButtonElement);

  const panel = extendedSettingsButtonElement.querySelector(
    "#uwu-extended-settings"
  );
  const extendedSettingsContainer = extendedSettingsButtonElement.querySelector(
    "#extended-settings-container"
  );
  const button = extendedSettingsButtonElement.querySelector(
    "#extended-settings-button"
  );

  extendedSettingsContainer.style.display = "none";

  const shouldShowPanel = () => {
    return (
      settings.extendedSettingsPanel ||
      settings.showSplashScreens ||
      settings.showUpdateNotification ||
      settings.manualWeatherPanel ||
      settings.fastStyles
    );
  };

  if (shouldShowPanel()) {
    panel.style.display = "block";
  } else {
    panel.style.display = "none";
  }

  button.addEventListener("click", () => {
    extendedSettingsContainer.style.display =
      extendedSettingsContainer.style.display === "none" ? "block" : "none";

    button.classList.remove("new-update");
  });
  // ====================================================================================================================
  //  . . . –°–ü–õ–ï–® –°–ö–†–ò–ù . . .
  // ====================================================================================================================
  if (settings.showSplashScreens) {
    const randomPhraseBlock = document.createElement("div");
    const splashPanel = extendedSettingsButtonElement.querySelector(
      "#splash-screen-panel"
    );
    randomPhraseBlock.classList.add("random-phrase-block");
    splashPanel.appendChild(randomPhraseBlock);

    function loadRandomPhrase(url) {
      fetch(url)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
          }
          return response.text();
        })
        .then((text) => {
          const phrases = text.split("\n").filter((line) => line.trim() !== "");
          const randomIndex = Math.floor(Math.random() * phrases.length);
          randomPhraseBlock.innerHTML = parseColorCodes(phrases[randomIndex]);
        })
        .catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã:", error);
          randomPhraseBlock.textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—É :(";
        });
    }

    function parseColorCodes(text) {
      const colorMap = {
        "&0": "</span>", // - –°–±—Ä–æ—Å -
        "&1": "<span style='color: blue;'>", // –°–∏–Ω–∏–π
        "&2": "<span style='color: green;'>", // –ó–µ–ª–µ–Ω—ã–π
        "&3": "<span style='color: aqua;'>", // –ë–∏—Ä—é–∑–æ–≤—ã–π
        "&4": "<span style='color: red;'>", // –ö—Ä–∞—Å–Ω—ã–π
        "&5": "<span style='color: #dc00dc;'>", // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        "&6": "<span style='color: gold;'>", // –ó–æ–ª–æ—Ç–æ–π
        "&7": "<span style='color: pink;'>", // –†–æ–∑–æ–≤—ã–π
        "&8": "<span style='color: white;'>", // –ë–µ–ª—ã–π
        "&9": "<span style='color: black;'>", // –ß–µ—Ä–Ω—ã–π
      };

      text = "<b>" + text;

      for (const code in colorMap) {
        text = text.replace(new RegExp(code, "g"), colorMap[code]);
      }

      return text;
    }

    window.addEventListener("load", () => {
      loadRandomPhrase(
        "https://raw.githubusercontent.com/Ibirtem/CatWar/main/texts/text.txt"
      );
    });
  }
  // ====================================================================================================================
  //  . . . –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–ë–ù–û–í–õ–ï–ù–ò–ò . . .
  // ====================================================================================================================
  function showUpdateNotification(oldVersion) {
    const panel = document.getElementById("extended-settings-container");
    const notificationBlock = document.createElement("div");
    notificationBlock.classList.add("update-notification");
    notificationBlock.innerHTML = `
          <p>–°–∫—Ä–∏–ø—Ç/–ú–æ–¥ UwU –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–µ—Ä—Å–∏–∏ v${
            oldVersion || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π"
          } –¥–æ –≤–µ—Ä—Å–∏–∏ v${current_uwu_version}!</p>
          <p>–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å <a href="https://catwar.net/settings" target="_blank">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a> –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.</p>
        `;
    panel.appendChild(notificationBlock);
    const button = extendedSettingsButtonElement.querySelector("button");
    button.classList.add("new-update");
  }

  window.addEventListener("load", () => {
    const savedVersion = localStorage.getItem("uwu_version");
    if (savedVersion !== current_uwu_version) {
      localStorage.setItem("uwu_version", current_uwu_version);
    }
    if (
      settings.showUpdateNotification &&
      savedVersion !== current_uwu_version
    ) {
      showUpdateNotification(savedVersion);
    }
  });

  // ====================================================================================================================
  //  . . . –†–£–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ì–û–î–û–ô . . .
  // ====================================================================================================================
  if (settings.manualWeatherPanel) {
    const panel = extendedSettingsButtonElement.querySelector(
      "#extended-settings-container"
    );
    panel.innerHTML += manualWeatherPanel;

    const manualAuroraOffButton = document.getElementById("manualAurora-Off");
    const manualAuroraBButton = document.getElementById("manualAurora-B");
    const manualAuroraGButton = document.getElementById("manualAurora-G");

    const fireflyOnButton = document.getElementById("manualFirefly-On");

    manualAuroraOffButton.addEventListener("click", () => {
      for (const auroraElement of auroras) {
        removeAurora(auroraElement);
      }
    });

    manualAuroraBButton.addEventListener("click", () => {
      createAurora("blue");
    });

    manualAuroraGButton.addEventListener("click", () => {
      createAurora("green");
    });

    fireflyOnButton.addEventListener("click", () => {
      toggleFireflies();
    });
  }
  // ====================================================================================================================
  //   . . . –ß–ê–°–´ . . .
  // ====================================================================================================================
  if (settings.showClock) {
    const style = document.createElement("style");
    style.textContent = // css
    `
        #uwu-clock {
          border-radius: 10px;
          width: min-content;
          height: min-content;
          background-color: ${theme?.blocksColor || "#242424"};
          color: ${theme?.textColor || "#d5d5d5"};
          border: 1px solid #ffffff1a;
          display: grid;
          grid-template-columns: auto 1fr;
          grid-template-rows: auto auto;
          align-items: center;
          justify-content: space-between;
          font-family: Arial, sans-serif;
          text-align: center;
          cursor: move;
          pointer-events: auto;
          position: absolute;
          z-index: 10;
          padding: 5px;
          font-size: ${settings.clockFontSize || 14}px;
        }

        #uwu-clock .time {
          font-size: 2em;
        }

        #uwu-clock .icon {
          cursor: help;
        }

        .compact #uwu-clock {
          column-gap: 5px;
          grid-template-columns: auto 1fr;
          grid-template-rows: auto auto;
        }

        .compact #uwu-clock .time {
          grid-column: 1 / 2;
          grid-row: 1 / 3;
        }

        .compact #uwu-clock .icon {
          grid-column: 2 / 3;
          grid-row: 1 / 2;
        }

        .compact #uwu-clock .date {
          grid-column: 2 / 3;
          grid-row: 2 / 3;
        }

        .standard #uwu-clock {
          grid-template-columns: auto auto;
          grid-template-rows: auto auto;
        }

        .standard #uwu-clock .time {
          text-align: start;
          grid-column: 1 / 2;
          grid-row: 1 / 2;
        }

        .standard #uwu-clock .icon {
          grid-column: 2 / 3;
          grid-row: 1 / 2;
        }

        .standard #uwu-clock .date {
          font-size: 1.2em;
          grid-column: 1 / 3;
          grid-row: 2 / 3;
          width: max-content;
        }

        .string #uwu-clock {
          column-gap: 5px;
          grid-template-columns: auto auto;
          grid-template-rows: auto auto;
        }

        .string #uwu-clock .date {
          font-size: 2em;
          grid-column: 2 / 3;
        }

        .string #uwu-clock .icon {
          grid-column: 3 / 3;
          grid-row: 1 / 2;
        }
    `;
    document.head.appendChild(style);

    const tosStyle = document.createElement("style");
    tosStyle.textContent = `
      #uwu-clock {
        position: relative;
      }
    `;
    
    const flyStyle = document.createElement("style");
    flyStyle.textContent = `

    `;

    const container = document.getElementById("uwu-global-container");
    const clockElement = document.createElement("div");
    clockElement.id = "uwu-clock";

    const timeElement = document.createElement("span");
    timeElement.className = "time";
    clockElement.appendChild(timeElement);

    const iconElement = document.createElement("span");
    iconElement.className = "icon";
    clockElement.appendChild(iconElement);

    const dateElement = document.createElement("span");
    dateElement.className = "date";
    clockElement.appendChild(dateElement);

    if (settings.clockPosition === "fly") {
      container.appendChild(clockElement);
      document.head.appendChild(flyStyle);
  } else if (settings.clockPosition === "tos") {
      const trTos = document.getElementById("tr_tos").querySelector("tbody tr");
      const newTd = document.createElement("td");
      newTd.appendChild(clockElement);
      trTos.appendChild(newTd);
      document.head.appendChild(tosStyle);
  }

    let useInternetTime = false;
    let isDragging = false;
    let offsetX, offsetY;
    let internetTime = null;
    let timerInterval = null;

    function updateClock(timeSource = new Date()) {
      const hours = String(timeSource.getHours()).padStart(2, "0");
      const minutes = String(timeSource.getMinutes()).padStart(2, "0");
      const seconds = String(timeSource.getSeconds()).padStart(2, "0");
      const day = String(timeSource.getDate()).padStart(2, "0");
      const month = String(timeSource.getMonth() + 1).padStart(2, "0");
      const year = String(timeSource.getFullYear());
  
      timeElement.textContent = `${hours}:${minutes}:${seconds}`;
  
      if (settings.clockStyle === "compact" || settings.clockStyle === "string") {
          dateElement.textContent = `${day}.${month}.${year.slice(-2)}`;
      } else if (settings.clockStyle === "standard") {
          const dayOfWeek = ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"][timeSource.getDay()];
          const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
          const monthName = monthNames[timeSource.getMonth()];
          dateElement.textContent = `${day} (${dayOfWeek}), ${monthName}, ${year}`;
      }
  
      if (useInternetTime) {
          iconElement.textContent = "üåçÔ∏é";
          iconElement.title = "–¢–æ—á–Ω–æ–µ –æ–Ω–ª–∞–π–Ω –≤—Ä–µ–º—è";
          if (settings.clockMoscowTime) {
              iconElement.textContent += " MSK";
          }
      } else {
          iconElement.textContent = "‚å®";
          iconElement.title =
              "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –æ–Ω–ª–∞–π–Ω –≤—Ä–µ–º—è! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞";
      }
  }

    async function fetchInternetTime() {
        try {
            const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            const url = settings.clockMoscowTime
                ? "https://timeapi.io/api/Time/current/zone?timeZone=Europe/Moscow"
                : `https://timeapi.io/api/Time/current/zone?timeZone=${userTimezone}`;
            const response = await fetch(url);
            if (!response.ok) throw new Error(`–û–Ω–ª–∞–π–Ω –æ—Ç–≤–µ—Ç –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
            const data = await response.json();
            internetTime = new Date(data.dateTime);
            useInternetTime = true;
            updateClockWithInternetTime();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –≤—Ä–µ–º–µ–Ω–∏:', error);
            useInternetTime = false;
            updateClock();
        }
        startTimer();
    }

    function updateClockWithInternetTime() {
      if (internetTime) {
          internetTime.setSeconds(internetTime.getSeconds() + 1);
          updateClock(internetTime);
          if (settings.clockMoscowTime) {
              iconElement.textContent = "üåçÔ∏é MSK";
          }
      }
  }

    function startTimer() {
        if (timerInterval) {
            clearInterval(timerInterval);
        }
        timerInterval = setInterval(() => {
            if (useInternetTime) {
                updateClockWithInternetTime();
            } else {
                updateClock();
            }
        }, 1000);
    }

    if (settings.clockPosition === "fly") {
        clockElement.addEventListener("mousedown", (e) => {
            isDragging = true;
            offsetX = e.clientX - clockElement.offsetLeft;
            offsetY = e.clientY - clockElement.offsetTop;
            document.body.style.userSelect = "none";
        });

        document.addEventListener("mousemove", (e) => {
            if (isDragging) {
                clockElement.style.left = `${e.clientX - offsetX}px`;
                clockElement.style.top = `${e.clientY - offsetY}px`;
            }
        });

        document.addEventListener("mouseup", () => {
            isDragging = false;
            document.body.style.userSelect = "auto";
            saveClockPosition();
        });
    }

    function saveClockPosition() {
        const clockPosition = {
            x: clockElement.offsetLeft,
            y: clockElement.offsetTop,
        };
        localStorage.setItem("uwu_clock", JSON.stringify(clockPosition));
    }

    function loadClockPosition() {
        const storedPosition = localStorage.getItem("uwu_clock");
        if (storedPosition) {
            const clockPosition = JSON.parse(storedPosition);
            clockElement.style.left = `${clockPosition.x}px`;
            clockElement.style.top = `${clockPosition.y}px`;
        }
    }

    document.addEventListener("visibilitychange", () => {
        if (!document.hidden) {
            fetchInternetTime();
        }
    });

    window.addEventListener("focus", () => {
        fetchInternetTime();
    });

    fetchInternetTime();
    if (settings.clockPosition === "fly") {
        loadClockPosition();
    }

    document.body.classList.add(settings.clockStyle);
}
  // ====================================================================================================================
  //  . . . –î–ï–ô–°–¢–í–ò–Ø –ü–†–ò –ù–ê–í–û–î–ö–ï –ù–ê .cat . . .
  // ====================================================================================================================
  document.addEventListener("mouseover", (event) => {
    const catElement = event.target.closest(".cat");

    if (catElement) {
      const catTooltip = catElement.querySelector(".cat_tooltip");

      if (
        settings.showMoreCatInfo &&
        !catTooltip.querySelector(".more-info-link")
      ) {
        const moreInfoLink = document.createElement("a");
        moreInfoLink.classList.add("more-info-link");
        moreInfoLink.textContent = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ";
        moreInfoLink.addEventListener("click", () => {
          showCatInfo(catElement);
        });

        const moreInfoContainer = document.createElement("div");
        moreInfoContainer.classList.add("more-info-container");
        moreInfoContainer.appendChild(moreInfoLink);

        const onlineSpan = catTooltip.querySelector("span.online");
        onlineSpan.parentNode.insertBefore(moreInfoContainer, onlineSpan);
      }

      if (settings.compactMouth) {
        compactInventory(catElement);
      }
    }
  });
  // ====================================================================================================================
  //  . . . –ö–û–ú–ü–ê–ö–¢–ù–´–ô –†–û–¢ –ê–•–•–ê–•–•–ê . . .
  // ====================================================================================================================
  function compactInventory(cat) {
    const originalMouth = cat.querySelector(".cat_tooltip .mouth");

    if (originalMouth) {
      const existingSortedMouths = cat.querySelectorAll(".mouth.uwu-sorted");
      existingSortedMouths.forEach((mouth) => mouth.remove());

      const newMouth = document.createElement("ol");
      newMouth.classList.add("mouth", "uwu-sorted");
      originalMouth.parentNode.insertBefore(
        newMouth,
        originalMouth.nextSibling
      );

      originalMouth.style.display = "none";

      const inventory = new Map();
      const cats = [];

      [...originalMouth.querySelectorAll("li img")].forEach((img) => {
        const itemSrc = img.getAttribute("src");
        inventory.set(itemSrc, (inventory.get(itemSrc) || 0) + 1);
      });

      [...originalMouth.querySelectorAll("li")].forEach((item) => {
        if (!item.querySelector("img")) {
          cats.push(item.innerHTML);
        }
      });

      newMouth.innerHTML = "";
      for (const [itemSrc, count] of inventory) {
        const listItem = document.createElement("li");
        const itemImage = document.createElement("img");
        itemImage.setAttribute("src", itemSrc);
        listItem.appendChild(itemImage);

        if (count > 1) {
          const countSpan = document.createElement("span");
          countSpan.textContent = `x${count}`;
          listItem.appendChild(countSpan);
        }

        newMouth.appendChild(listItem);
      }

      cats.forEach((catHtml) => {
        const listItem = document.createElement("li");
        listItem.innerHTML = catHtml;
        newMouth.appendChild(listItem);
      });
    }
  }
  // ====================================================================================================================
  //  . . . –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ô –ö–û–ù–¢–ï–ô–ù–ï–† . . .
  // ====================================================================================================================
  let globalContainer = document.getElementById("uwu-global-container");
  if (!globalContainer) {
    globalContainer = document.createElement("div");
    globalContainer.id = "uwu-global-container";
    globalContainer.style.display = "none";
    document.body.appendChild(globalContainer);
  }

  function createCatInfoContainer() {
    const catInfoElement = document.createElement("div");
    catInfoElement.classList.add("cat-info");

    const contentContainer = document.createElement("div");
    contentContainer.classList.add("content-container");
    catInfoElement.appendChild(contentContainer);

    const closeButton = document.createElement("button");
    closeButton.textContent = "–ó–∞–∫—Ä—ã—Ç—å";
    closeButton.classList.add("close-info");
    closeButton.addEventListener("click", () => {
      globalContainer.removeChild(catInfoElement);
    });
    catInfoElement.appendChild(closeButton);

    const css_catDefects = document.createElement("style");
    css_catDefects.innerHTML = // css
    `
      .cat-info {
        pointer-events: auto;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px #00000033;
        z-index: 5;
        width: 300px;
        text-align: center;
        display: block;
        background-color: white;
        color: black;
      }

      .other-cat-info-container {
      display: grid;
      grid-template-columns: 1fr 2fr;
      }
    
      .close-info-container {
        text-align: right;
      }
    
      .close-info {
        cursor: pointer;
      }
    
      .more-info-container {
        cursor: pointer;
      }

      .parameter-details-container {
        text-align: left;
      }

      .cat-details {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-left: 8px;
      }

      .cat-details > p,
      .cat-details > div > p {
        margin-top: 5px;
        margin-bottom: 5px;
      }

      #uwu-global-container > div.cat-info > div > div > div.cat-details > div {
        margin-top: 8px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }
    `;

    document.head.appendChild(css_catDefects);

    return { catInfoElement, contentContainer };
  }
  // ====================================================================================================================
  //  . . . –ë–û–õ–¨–®–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –í "–û –ö–û–¢–ï" . . .
  // ====================================================================================================================
  const defectsInfo = {
    wound: {
      name: "–†–∞–Ω—ã",
      states: {
        1: "—Ü–∞—Ä–∞–ø–∏–Ω—ã",
        2: "–ª—ë–≥–∫–∏–µ —Ä–∞–Ω—ã",
        3: "–≥–ª—É–±–æ–∫–∏–µ —Ä–∞–Ω—ã",
        4: "—Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–Ω—ã",
      },
    },
    poisoning: {
      name: "–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ",
      states: {
        1: "–Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ",
        2: "–ª—ë–≥–∫–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ",
        3: "—Å–∏–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ",
        4: "—Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ",
      },
    },
    drown: {
      name: "–¢—Ä–∞–≤–º—ã –æ—Ç —É—Ç–æ–ø–ª–µ–Ω–∏—è",
      states: {
        1: "—Å—Å–∞–¥–∏–Ω—ã",
        2: "–Ω–µ–±–æ–ª—å—à–∏–µ –∫—Ä–æ–≤–æ–ø–æ–¥—Ç—ë–∫–∏",
        3: "—Å–∏–ª—å–Ω—ã–µ —Ç—Ä–∞–≤–º—ã",
        4: "—Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–≤–º—ã",
      },
    },
    disease: {
      name: "–ë–æ–ª–µ–∑–Ω—å",
      states: {
        1: "–∫–∞—à–µ–ª—å",
        2: "–∫–∞—à–µ–ª—å",
        3: "–∫–∞—à–µ–ª—å",
        4: "–∫–∞—à–µ–ª—å",
      },
    },
    trauma: {
      name: "–ü–µ—Ä–µ–ª–æ–º—ã",
      states: {
        1: "—Å–∏–Ω—è–∫–∏",
        2: "–ª—ë–≥–∫–∏–µ —É—à–∏–±—ã",
        3: "—Å–∏–ª—å–Ω—ã–µ —É—à–∏–±—ã",
        4: "—Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–µ —É—à–∏–±—ã",
      },
    },
    dirt: {
      name: "–ì—Ä—è–∑—å",
      states: {
        1: "–≥—Ä—è–∑–Ω—ã–µ –ª–∞–ø—ã",
        2: "–≥—Ä—è–∑–µ–≤—ã–µ –ø—è—Ç–Ω–∞",
        3: "–∫–ª–µ—â–∏",
        4: "–±–ª–æ—Ö–∏",
      },
    },
  };

  function showCatInfo(cat) {
    const catName = cat.querySelector(".cat_tooltip a").textContent;
    const catSize = cat.querySelector(".d .first").style.backgroundSize;
    const catImage = cat
      .querySelector(".d .first")
      .style.backgroundImage.slice(5, -2);

    const defectElements = Array.from(
      cat.querySelectorAll(".d > div:not(.first)")
    );

    const uniqueDefects = new Set();

    const catDefects = defectElements
      .map((element) => {
        const defectUrl = element.style.backgroundImage;

        if (defectUrl.includes("/defects/")) {
          const defectParts = defectUrl.split("/");
          const lastPart = defectParts.pop();
          const defectLevel = parseInt(lastPart.split("/")[0]);
          const defectType = defectParts[5];
          const defectKey = `${defectType}-${defectLevel}`;

          if (!uniqueDefects.has(defectKey)) {
            uniqueDefects.add(defectKey);
            return { type: defectType, level: defectLevel };
          }
        }
        return null;
      })
      .filter(Boolean);

    const catId = cat
      .querySelector(".cat_tooltip a")
      .getAttribute("href")
      .slice(4);

    let { catInfoElement, contentContainer } = createCatInfoContainer();

    contentContainer.innerHTML = // html
    `
      <h2>${catName}</h2>
      <div class="other-cat-info-container">
        <div>
          <img src="${catImage}" class="cat-image">
        </div>
        <div class="cat-details">
          <p><strong>ID</strong>: ${catId}</p>
          <p><strong>–†–∞–∑–º–µ—Ä</strong>: ${catSize}</p>
        </div>
      </div>
    `;

    const defectsContainer = document.createElement("div");
    if (catDefects.length > 0) {
      defectsContainer.innerHTML = "<p>–î–µ—Ñ–µ–∫—Ç—ã:</p>";
      catDefects.forEach((defect) => {
        const defectData = defectsInfo[defect.type];
        if (defectData) {
          const defectState = defectData.states[defect.level] || "";
          const defectLine = document.createElement("p");
          const defectNameSpan = document.createElement("strong");
          defectNameSpan.textContent = defectData.name;
          defectLine.appendChild(defectNameSpan);
          defectLine.insertAdjacentHTML(
            "beforeend",
            ` (${defect.level} —Å—Ç–∞–¥–∏—è, ${defectState})`
          );

          defectsContainer.appendChild(defectLine);
        }
      });
      contentContainer
        .querySelector(".cat-details")
        .appendChild(defectsContainer);
    } else {
      contentContainer.querySelector(".cat-details").innerHTML +=
        "<p><strong>–ó–¥–æ—Ä–æ–≤—ã–π</strong></p>";
    }

    globalContainer.appendChild(catInfoElement);
  }
  // ====================================================================================================================
  //  . . . –°–û–ë–°–¢–í–ï–ù–ù–´–ô –§–û–ù –õ–û–ö–ê–¶–ò–ò –ò–ì–†–û–í–û–ô . . .
  // ====================================================================================================================
  if (settings.gameFieldBackgroundUser) {
    const css_gameField = document.createElement("style");
    css_gameField.textContent = `
      #cages_div {
          background-image: url(${settings.gameFieldBackgroundUserImageURL}) !important;
      }
  `;
    document.head.appendChild(css_gameField);
  }
  // ====================================================================================================================
  //  . . . –ì–†–ê–ù–ò–¶–´ –Ø–ß–ï–ï–ö . . . cellsNumbers
  // ====================================================================================================================
  function updateCellsBordersStyle(checked) {
    let styleElement = document.getElementById("cellsBordersStyle");
    const cellsBordersStyle = `
      .cage {
        box-shadow: inset 0 0 0 0.${settingsMap.uwu_settings.cellsBordersThickness}px ${settings.cellsBordersColor};
      }
    `;

    if (checked) {
      if (!styleElement) {
        styleElement = document.createElement("style");
        styleElement.id = "cellsBordersStyle";
        styleElement.innerHTML = cellsBordersStyle;
        document.head.appendChild(styleElement);
      }
    } else {
      if (styleElement) {
        document.head.removeChild(styleElement);
      }
    }
  }
  // ====================================================================================================================
  //  . . . –ù–£–ú–ï–†–ê–¶–ò–Ø –Ø–ß–ï–ï–ö . . .
  // ====================================================================================================================
  if (settings.cellsNumbers) {
    function createCellNumbers(style) {
      let css = // css
      `
        #cages_div { position: relative; }
        #cages > tbody > tr > td { position: relative; }
        #cages > tbody > tr > td::before { 
          content: attr(data-cell-num);
          position: absolute; 
          z-index: 0; 
          top: 5px; 
          right: 5px;
          color: ${style.color || "#000"}; 
          opacity: ${style.opacity || 0.4}; 
          font-size: 16px; 
          font-weight: bold;
        }
      `;
  
      let cagesNums = document.createElement("style");
      cagesNums.id = "cages_nums";
      cagesNums.innerHTML = css;
      document.head.appendChild(cagesNums);
  
      let table = document.getElementById("cages");
      if (!table) return;
      let rows = table.querySelectorAll("tbody > tr");
      for (let i = 0; i < rows.length; i++) {
        let cells = rows[i].querySelectorAll("td");
        for (let j = 0; j < cells.length; j++) {
          cells[j].setAttribute("data-cell-num", (j + 1).toString());
        }
      }
    }
  
    createCellNumbers({
      color: "white",
      opacity: 0.8,
    });
  }
  // ====================================================================================================================
  //   . . . –ü–†–û–¶–ï–ù–¢–´ –ü–ê–†–ê–ú–ï–¢–†–û–í . . .
  // ====================================================================================================================
  if (settings.displayParametersPercentages) {
    const parameterTableIds = [
      "dream_table",
      "hunger_table",
      "thirst_table",
      "need_table",
      "health_table",
      "clean_table",
    ];

    function updateParameterPercentages(tableId) {
      const table = document.getElementById(tableId);
      if (table) {
        const row = table.querySelector("tbody tr");
        if (!row) {
          console.warn(`–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å ID "${tableId}".`);
          return;
        }
        const greenBar = row.querySelector(
          "td[style*='background-color: green;']"
        );
        const redBar = row.querySelector("td[style*='background-color: red;']");
        if (!greenBar || !redBar) {
          console.warn(`–ë–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã —Å ID "${tableId}".`);
          return;
        }
        const greenBarWidth = parseInt(greenBar.style.width, 10);
        const redBarWidth = parseInt(redBar.style.width, 10);
        const totalWidth = greenBarWidth + redBarWidth;
        let percentage = (greenBarWidth / totalWidth) * 100;
        percentage =
          percentage % 1 !== 0 ? percentage.toFixed(2) : Math.round(percentage);

        let percentageCell = row.querySelector(".percentage-cell");
        if (!percentageCell) {
          percentageCell = document.createElement("td");
          percentageCell.classList.add("percentage-cell");
          row.appendChild(percentageCell);
        }
        percentageCell.textContent = `${percentage}%`;
      } else {
        console.warn(`–¢–∞–±–ª–∏—Ü–∞ —Å ID "${tableId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      }
    }

    async function setupTableObservers() {
      for (const tableId of parameterTableIds) {
        const tableSelector = `#${tableId}`;
        const rowSelector = `${tableSelector} tbody tr`;
        const greenBarSelector = `${rowSelector} td[style*='background-color: green;']`;
        const redBarSelector = `${rowSelector} td[style*='background-color: red;']`;

        await setupMutationObserver(tableSelector, () =>
          updateParameterPercentages(tableId)
        );
        await setupMutationObserver(greenBarSelector, () =>
          updateParameterPercentages(tableId)
        );
        await setupMutationObserver(redBarSelector, () =>
          updateParameterPercentages(tableId)
        );
      }
    }

    window.addEventListener("load", setupTableObservers);
  }
  // ====================================================================================================================
  //   . . . –ü–û–î–†–û–ë–ù–ï–ï –û –ü–ê–†–ê–ú–ï–¢–†–ê–• (–ò –ù–ê–í–´–ö–û–í?) . . .
  // ====================================================================================================================
  function createMoreInfoButton() {
    const parametersBlock = document.getElementById("parameters_block");

    const buttonContainer = document.createElement("div");
    buttonContainer.classList.add("button-container");
    buttonContainer.style.paddingBottom = "5px";

    const moreInfoLink = document.createElement("a");
    moreInfoLink.href = "#";
    moreInfoLink.textContent = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ";
    moreInfoLink.classList.add("more-info-link");
    moreInfoLink.addEventListener("click", (event) => {
        event.preventDefault();
        showParameterDetails();
    });

    buttonContainer.appendChild(moreInfoLink);

    parametersBlock.insertBefore(buttonContainer, parametersBlock.firstChild);
  }

  function showParameterDetails() {
    const parameters = [
      {
        id: "dream_table",
        name: "–°–æ–Ω–ª–∏–≤–æ—Å—Ç—å",
        timePerPixel: 20,
        formula: null,
      },
      {
        id: "hunger_table",
        name: "–ì–æ–ª–æ–¥",
        timePerPixel: null,
        formula: (red) => Math.ceil((red / 150) * 9) * 15,
      },
      { id: "thirst_table", name: "–ñ–∞–∂–¥–∞", timePerPixel: 60, formula: null },
      { id: "need_table", name: "–ù—É–∂–¥–∞", timePerPixel: 30, formula: null },
      {
        id: "health_table",
        name: "–ó–¥–æ—Ä–æ–≤—å–µ",
        timePerPixel: null,
        formula: null,
      },
      {
        id: "clean_table",
        name: "–ß–∏—Å—Ç–æ—Ç–∞",
        timePerPixel: null,
        formula: (red) => {
          red = red % 3 ? red : red - 0.5;
          return ((red - 1) / 1.5) * 100 + 100;
        },
      },
    ];

    let { catInfoElement, contentContainer } = createCatInfoContainer();
    contentContainer.classList.add("parameter-details-container");

    parameters.forEach(({ id, name, timePerPixel, formula }) => {
      const table = document.getElementById(id);
      if (table) {
        const row = table.querySelector("tbody tr");
        if (!row) {
          console.warn(`–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å ID "${id}".`);
          return;
        }
        const greenBar = row.querySelector(
          "td[style*='background-color: green;']"
        );
        const redBar = row.querySelector("td[style*='background-color: red;']");
        if (!greenBar || !redBar) {
          console.warn(`–ë–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã —Å ID "${id}".`);
          return;
        }
        const greenBarWidth = parseInt(greenBar.style.width, 10);
        const redBarWidth = parseInt(redBar.style.width, 10);
        const totalWidth = greenBarWidth + redBarWidth;
        let percentage = (greenBarWidth / totalWidth) * 100;
        percentage =
          percentage % 1 !== 0 ? percentage.toFixed(2) : Math.round(percentage);

        let timeInfo = "";
        let totalTimeSeconds;
        if (formula) {
          totalTimeSeconds = formula(redBarWidth);
        } else if (timePerPixel !== null) {
          totalTimeSeconds = redBarWidth * timePerPixel;
        }

        if (totalTimeSeconds !== undefined) {
          const hours = Math.floor(totalTimeSeconds / 3600);
          const minutes = Math.floor((totalTimeSeconds % 3600) / 60);
          const seconds = totalTimeSeconds % 60;
          if (hours > 0) {
            timeInfo = ` (> ${hours} —á ${minutes} –º–∏–Ω)`;
          } else if (minutes > 0) {
            timeInfo = ` (${minutes} –º–∏–Ω ${seconds} —Å–µ–∫)`;
          } else {
            timeInfo = ` (${seconds} —Å–µ–∫)`;
          }
        }

        const detailLine = document.createElement("p");
        detailLine.innerHTML = `<strong>${name}:</strong> <span style="color: #00cc00;">${greenBarWidth}px</span> / <span style="color: red;">${redBarWidth}px</span> - ${percentage}%`;
        detailLine.style.marginBottom = "0";
        contentContainer.appendChild(detailLine);

        if (timeInfo) {
          const detailLineTime = document.createElement("p");
          detailLineTime.innerHTML = `‚âà${timeInfo}`;
          detailLineTime.style.marginTop = "0";
          contentContainer.appendChild(detailLineTime);
        }
      } else {
        console.warn(`–¢–∞–±–ª–∏—Ü–∞ —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      }
    });

    globalContainer.appendChild(catInfoElement);
  }

  if (settings.showParametersDetails) {
    setupSingleCallback("#dream_table", createMoreInfoButton);
  }
  // ====================================================================================================================
  //   . . . –ß–ò–°–õ–û–í–ê–Ø –ì–†–û–ú–ö–û–°–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô . . .
  // ====================================================================================================================
  if (settings.climbingNotificationsNumbers) {
    function addClimbingNotificationsStyles() {
      const styles = Array.from(
        { length: 11 },
        (_, i) => `
          .vlm${i} > .nick[style*="italic"]:after {
            content: " [${i}]";
          }
        `
      ).join("");

      const styleElement = document.createElement("style");
      styleElement.textContent = styles;
      document.head.appendChild(styleElement);
    }

    addClimbingNotificationsStyles();
  }
  // ====================================================================================================================
  //   . . . –ó–í–£–ö–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò –ö–õ–ï–¢–û–ö . . .
  // ====================================================================================================================
  // TODO - debounceTimer, –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–π. P.S. –í—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
  if (settings.climbingRefreshNotification) {
    function handleClimbingRefresh() {
      const refreshRegex = /–£—Å–ª—ã—à–∞–ª–∞? –æ–≥–ª—É—à–∏—Ç–µ–ª—å–Ω/;
      let previousHistory = "";

      const updateHistory = () => {
        const istElement = document.getElementById("ist");
        const currentHistory = istElement.innerHTML;

        if (currentHistory !== previousHistory) {
          previousHistory = currentHistory;

          const entries = currentHistory.split(".");
          const lastEntry = entries[entries.length - 2];

          if (lastEntry !== undefined && refreshRegex.test(lastEntry)) {
            const lastPlayedEntry = entries[entries.length - 3];

            if (!lastPlayedEntry || !refreshRegex.test(lastPlayedEntry)) {
              soundManager.playSound(
                settings.climbingRefreshNotificationSound,
                settings.climbingRefreshNotificationVolume
              );
            }
          }
        }
      };

      const historyBlock = document.getElementById("history_block");
      const observer = new MutationObserver(() => {
        updateHistory();
      });

      const config = {
        childList: true,
        subtree: true,
        characterData: true,
      };
      observer.observe(historyBlock, config);
    }

    handleClimbingRefresh();
  }
  // ====================================================================================================================
  //   . . . –ú–ò–ù–ù–û–ï –ü–û–õ–ï . . .
  // ====================================================================================================================
  // –í—Ç–æ—Ä–∞—è –ø–æ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∞–º–∏. –ù–æ —É–∂–µ –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ –∞ –Ω–µ –∫ —Å–∞–π—Ç—É.........
  // —á–∞—Ç —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–±—å—ë—Ç....... –Ω–∞–≤–µ—Ä–Ω–æ????????????
  // TODO - –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å—ë —ç—Ç–æ –º–µ—Å—Å–∏–≤–æ –∫ —á–µ—Ä—Ç—è–º, —ç—Ç–æ –∫–æ—à–º–∞—Ä –∫–∞–∫–æ–π-—Ç–æ. –ö–∞–∫ –æ–Ω–æ –≤–æ–æ–±—â–µ –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç?????? –ß—Ç–æ —è —É–ø–æ—Ç—Ä–µ–±–ª—è–ª?????????????????????
  if (settings.climbingPanel) {
    let isDragging = false;
    let initialX;
    let initialY;
    let currentX;
    let currentY;
    let wasDragging = false;

    function saveClimbingPanelStatus() {
      const status = {
        x: currentX,
        y: currentY,
        isOpen: climbingPanelContainer.classList.contains("open"),
        isChecked: transferCheckbox.checked,
        currentTabIndex: tabManager.currentTabIndex,
        currentTableId: tabManager.currentTableId,
      };
      localStorage.setItem("uwu_climbingPanelStatus", JSON.stringify(status));
    }

    function loadClimbingPanelStatus() {
      const savedStatus = localStorage.getItem("uwu_climbingPanelStatus");

      if (savedStatus) {
        const status = JSON.parse(savedStatus);

        currentX = status.x;
        currentY = status.y;

        climbingPanelContainer.classList.toggle("open", status.isOpen);
        transferCheckbox.checked = status.isChecked;

        tabManager.currentTabIndex = status.currentTabIndex;
        if (
          status.currentTableId !== null &&
          tabManager.tabs[status.currentTabIndex].tables[status.currentTableId]
        ) {
          tabManager.currentTableId = status.currentTableId;
        }

        tabManager.render();

        if (status.isChecked) {
          transferColors();
        }
      } else {
        tabManager.render();
      }

      checkAndResetPanelPosition();
    }

    function updateCell(cell, value) {
      cell.dataset.value = value || "";
      cell.textContent = value === "mine" || value === "transit" ? "" : value;
      switch (value) {
        case "mine":
          cell.style.backgroundColor = "#5b000073";
          break;
        case "transit":
          cell.style.backgroundColor = "#ffffff87";
          break;
        default:
          cell.style.backgroundColor = "";
      }
    }

    function transferColors() {
      const transferCheckbox = document.getElementById("uwu-transferCheckbox");
      if (!transferCheckbox.checked) return;

      const climbingPanelCells = Array.from(
        document.querySelectorAll("#uwu-climbingPanel td")
      );
      const cagesCells = Array.from(
        document.querySelectorAll("#cages tbody td.cage")
      );

      climbingPanelCells.forEach((cell, i) => {
        if (cagesCells[i]) {
          cagesCells[i].style.backgroundColor =
            getComputedStyle(cell).backgroundColor;
        }
      });
    }

    function clearColors() {
      const cagesCells = document.querySelectorAll("#cages tbody td.cage");
      cagesCells.forEach((cell) => {
        cell.style.backgroundColor = "";
      });
    }

    let lastClickedCell = null;

    function handleCellClick(event) {
      const cell = event.target.closest("td");
      if (!cell || !cell.closest("#uwu-climbingPanel")) return;

      if (lastClickedCell === cell) {
        updateCell(cell, "");
        saveTableData(tabManager.currentTableId);
        transferColors();
        lastClickedCell = null;
      } else {
        lastClickedCell = cell;
      }
    }

    function handleKeyDown(event) {
      const keyPressed = event.key;
      const activeElement = document.activeElement;

      if (
        activeElement &&
        activeElement.tagName === "TD" &&
        activeElement.closest("#uwu-climbingPanel")
      ) {
        switch (keyPressed) {
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
            updateCell(activeElement, keyPressed);
            break;
          case "-":
            updateCell(activeElement, "mine");
            break;
          case "=":
            updateCell(activeElement, "transit");
            break;
          default:
            return;
        }

        saveTableData(tabManager.currentTableId);
        transferColors();
      }
    }

    function handleTransferCheckboxChange(event) {
      event.target.checked ? transferColors() : clearColors();
      saveClimbingPanelStatus();
    }

    const uwuClimbingPanelContainer = // html
    `
      <div id="uwu-climbingMainPanel">
        <div id="uwu-climbingPanelButton">
            <div class="left-content">
                <h2>–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ</h2>
            </div>
            <div class="right-content">
                <span id="uwu-arrow">‚ñº</span>
            </div>
        </div>
      <div id="uwu-climbingPanelContainer">
          <div id="uwu-climbingPanelContent">
              <div id="uwu-buttonContainer">
                  <h3>–í–∫–ª–∞–¥–∫–∞</h3>
                  <div id="uwu-buttonRow1"></div>
                  <hr id="uwu-hr">
                  <h3>–õ–æ–∫–∞—Ü–∏—è</h3>
                  <div id="uwu-buttonRow2"></div>
              </div>
              <div id="uwu-functionButtonsContainer">
                  <input type="checkbox" id="uwu-transferCheckbox">
                  <label for="uwu-transferCheckbox">–ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ</label>
              </div>
              <div id="uwu-tableContainer"></div>
          </div>
      </div>
      </div>
    `;

    function createClimbingPanel() {
      const globalContainer = document.getElementById("uwu-global-container");
      globalContainer.insertAdjacentHTML(
        "beforeend",
        uwuClimbingPanelContainer
      );

      const transferCheckbox = document.getElementById("uwu-transferCheckbox");

      document.addEventListener("keydown", handleKeyDown);
      transferCheckbox.addEventListener("change", handleTransferCheckboxChange);
    }

    function saveTableData(tableIndex) {
      const climbingPanel = document.getElementById("uwu-climbingPanel");
      if (!climbingPanel) return;

      const tableData = getTableData(climbingPanel.id);
      const currentTab = tabManager.tabs[tabManager.currentTabIndex];
      currentTab.tables[tableIndex] = {
        name: currentTab.tables[tableIndex].name,
        data: tableData,
      };
      tabManager.saveState();
    }

    function clearTable() {
      const climbingPanel = document.getElementById("uwu-climbingPanel");
      if (!climbingPanel) return;

      const cells = Array.from(climbingPanel.querySelectorAll("td"));
      cells.forEach((cell) => {
        if (cell.dataset.value !== "transit") {
          updateCell(cell, "");
        }
      });

      const currentTab = tabManager.tabs[tabManager.currentTabIndex];
      currentTab.tables[tabManager.currentTableId] = {
        name: currentTab.tables[tabManager.currentTableId].name,
        data: getTableData(climbingPanel.id),
      };
      tabManager.saveState();
      transferColors();
    }

    const tabManager = {
      tabs: [],
      currentTabIndex: 0,
      currentTableId: 0,

      createTab(name) {
        const newTab = {
          name: name,
          tables: [],
        };

        this.tabs.push(newTab);
        this.render();
        this.switchTab(this.tabs.length - 1);
      },

      switchTab(index) {
        this.currentTabIndex = index;
        const currentTab = this.tabs[this.currentTabIndex];
        this.currentTableId =
          currentTab && currentTab.tables.length > 0 ? 0 : null;

        if (currentTab && currentTab.tables.length === 0) {
          this.renderNoTableMessage();
        } else {
          this.render();
        }

        transferColors();
        saveClimbingPanelStatus();
      },

      switchTable(tableIndex) {
        this.currentTableId = tableIndex;
        this.render();
        transferColors();
        saveClimbingPanelStatus();
      },

      saveState() {
        localStorage.setItem("uwu_climbingPanelState", JSON.stringify(this));
      },

      render() {
        this.renderTabs();
        this.renderTables();
        if (this.currentTableId !== null) {
          this.renderTable(this.currentTableId);
        }
      },

      renderTabs() {
        const tabRow = document.getElementById("uwu-buttonRow1");
        tabRow.innerHTML = "";

        this.tabs.forEach((tab, index) => {
          const tabButton = document.createElement("button");
          tabButton.textContent = tab.name;
          tabButton.classList.add("tab-button");

          if (index === this.currentTabIndex) {
            tabButton.classList.add("active");
          }

          tabButton.addEventListener("click", () => this.switchTab(index));

          const tabContainer = document.createElement("div");
          tabContainer.classList.add("tab-container");
          tabContainer.appendChild(tabButton);

          tabRow.appendChild(tabContainer);
        });
      },

      renderTables() {
        const tableRow = document.getElementById("uwu-buttonRow2");
        tableRow.innerHTML = "";

        const currentTab = this.tabs[this.currentTabIndex];
        if (currentTab) {
          currentTab.tables.forEach((table, index) => {
            const tableButton = document.createElement("button");
            tableButton.textContent = table.name || `–õ–æ–∫–∞—Ü–∏—è ${index + 1}`;
            tableButton.classList.add("table-button");

            if (index === this.currentTableId) {
              tableButton.classList.add("active");
            }

            tableButton.addEventListener("click", () =>
              this.switchTable(index)
            );

            const tableContainer = document.createElement("div");
            tableContainer.classList.add("table-container");
            tableContainer.appendChild(tableButton);

            tableRow.appendChild(tableContainer);
          });
        }
      },

      renderTable(tableIndex) {
        const tableContainer = document.getElementById("uwu-tableContainer");
        tableContainer.innerHTML = "";

        const currentTab = this.tabs[this.currentTabIndex];
        const climbingPanel = document.createElement("table");
        climbingPanel.id = "uwu-climbingPanel";

        for (let i = 0; i < 6; i++) {
          const row = document.createElement("tr");
          for (let j = 0; j < 10; j++) {
            const cell = document.createElement("td");
            cell.setAttribute("tabindex", "0");
            cell.addEventListener("click", handleCellClick);
            row.appendChild(cell);
          }
          climbingPanel.appendChild(row);
        }

        const tableData = currentTab.tables[tableIndex]?.data;

        if (tableData) {
          tableData.forEach((rowData, i) => {
            rowData.forEach((cellData, j) => {
              updateCell(climbingPanel.rows[i].cells[j], cellData.value);
            });
          });
        }

        tableContainer.appendChild(climbingPanel);

        const clearButton = document.createElement("button");
        clearButton.textContent = "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –ø–æ–ª–µ/—Ç–∞–±–ª–∏—Ü—É";
        clearButton.id = "button-clear-table";
        clearButton.addEventListener("click", clearTable);
        tableContainer.appendChild(clearButton);
      },

      renderNoTableMessage() {
        const tableContainer = document.getElementById("uwu-tableContainer");
        tableContainer.innerHTML = "";

        const message = document.createElement("div");
        message.textContent = "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ/—Ç–∞–±–ª–∏—Ü—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö";
        message.style.textAlign = "center";
        message.style.marginTop = "20px";
        tableContainer.appendChild(message);

        this.renderTabs();
        this.renderTables();
      },
    };

    function loadSavedState() {
      const savedState = localStorage.getItem("uwu_climbingPanelState");
      if (savedState) {
        const state = JSON.parse(savedState);
        Object.assign(tabManager, state);
        tabManager.currentTabIndex = 0;

        const currentTab = tabManager.tabs[tabManager.currentTabIndex];
        if (currentTab && currentTab.tables.length > 0) {
          if (tabManager.currentTableId >= currentTab.tables.length) {
            tabManager.currentTableId = 0;
          }
        } else {
          tabManager.currentTableId = null;
        }
      }
    }

    loadSavedState();
    createClimbingPanel();
    tabManager.render();

    function getTableData(tableId) {
      const table = document.getElementById(tableId);
      if (!table) {
        console.error(`–¢–∞–±–ª–∏—Ü–∞ —Å id ${tableId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return [];
      }

      const tableData = [];

      for (let i = 0; i < table.rows.length; i++) {
        const rowData = [];
        for (let j = 0; j < table.rows[i].cells.length; j++) {
          const cell = table.rows[i].cells[j];
          rowData.push({
            value: cell.dataset.value || "",
          });
        }
        tableData.push(rowData);
      }

      return tableData;
    }

    // ===================== –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–ï =====================

    const climbingMainPanel = document.getElementById("uwu-climbingMainPanel");
    const climbingPanelButton = document.getElementById(
      "uwu-climbingPanelButton"
    );
    const climbingPanelContainer = document.getElementById(
      "uwu-climbingPanelContainer"
    );
    const transferCheckbox = document.getElementById("uwu-transferCheckbox");

    function dragStart(e) {
      e.preventDefault();
      const savedStatus = JSON.parse(
        localStorage.getItem("uwu_climbingPanelStatus")
      );
      initialX =
        e.clientX -
        (savedStatus ? savedStatus.x : climbingMainPanel.offsetLeft);
      initialY =
        e.clientY - (savedStatus ? savedStatus.y : climbingMainPanel.offsetTop);

      if (e.target === climbingPanelButton) {
        isDragging = true;
        wasDragging = false;
      }
    }

    function drag(e) {
      if (isDragging) {
        e.preventDefault();

        currentX = e.clientX - initialX;
        currentY = e.clientY - initialY;

        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        const panelWidth = climbingMainPanel.offsetWidth;
        const panelHeight = climbingMainPanel.offsetHeight;

        const maxX = windowWidth - panelWidth;
        currentX = Math.max(0, Math.min(currentX, maxX));

        const maxY = windowHeight - panelHeight;
        currentY = Math.max(0, Math.min(currentY, maxY));

        setPosition(currentX, currentY, climbingMainPanel);

        wasDragging = true;
      }
    }

    function dragEnd(e) {
      if (isDragging) {
        saveClimbingPanelStatus();
      }
      isDragging = false;
    }

    function setPosition(x, y, el) {
      el.style.left = `${x}px`;
      el.style.top = `${y}px`;
    }

    function togglePanelContainer(e) {
      if (!wasDragging) {
        const arrow = document.getElementById("uwu-arrow");
        climbingPanelContainer.classList.toggle("open");
        saveClimbingPanelStatus();
  
        if (climbingPanelContainer.classList.contains("open")) {
          arrow.textContent = "‚ñ≤";
        } else {
          arrow.textContent = "‚ñº";
        }
      }
      wasDragging = false;
    }

    function checkAndResetPanelPosition() {
      const windowWidth = window.innerWidth;
      const windowHeight = window.innerHeight;
      const panelWidth = climbingMainPanel.offsetWidth;
      const panelHeight = climbingMainPanel.offsetHeight;

      const savedStatus = JSON.parse(
        localStorage.getItem("uwu_climbingPanelStatus")
      );

      if (savedStatus) {
        currentX = savedStatus.x;
        currentY = savedStatus.y;
      } else {
        currentX = 0;
        currentY = 0;
      }

      if (
        currentX + panelWidth > windowWidth ||
        currentY + panelHeight > windowHeight
      ) {
        currentX = 0;
        currentY = 0;
        saveClimbingPanelStatus();
      }

      setPosition(currentX, currentY, climbingMainPanel);
    }

    climbingPanelButton.addEventListener("mousedown", dragStart);
    document.addEventListener("mouseup", dragEnd);
    document.addEventListener("mousemove", drag);
    climbingPanelButton.addEventListener("click", togglePanelContainer);

    setTimeout(loadClimbingPanelStatus, 10);

    const uwuClimbingPanel = document.createElement("style");
    uwuClimbingPanel.innerHTML = // css
    `
    #uwu-climbingPanelContainer {
      background-color: "";
      display: none;
      padding: 5px;
    }
    
    #uwu-climbingPanelContainer.open {
      display: block;
    }

    #uwu-climbingMainPanel {
      z-index: 2;
      pointer-events: auto;
      width: 260px;
      position: absolute;
      background-color: #ffffff08;
      border: 1px solid #ffffff1a;
      backdrop-filter: blur(20px);
      border-radius: 10px;
    }

    #uwu-climbingPanelButton .left-content {
      pointer-events: none;
      width: 90%;
    }

    #uwu-climbingPanelButton .right-content {
      pointer-events: none;
      width: 10%;
      text-align: right;
    }

    #uwu-arrow {
      font-size: 18px;
      margin-right: 8px;
    }

    #uwu-climbingPanelButton {
      cursor: grab;
      background-color: #00000026;
      border-radius: 10px;
      border: 1px solid #ffffff1a;
      display: flex;
      align-items: center;
      justify-content: space-around;
    }

    #uwu-climbingPanelButton h2 {
      display: flex;
      margin-top: 2px;
      margin-bottom: 2px;
      justify-content: center;
      pointer-events: none;
    }

    #uwu-climbingPanel {
      font-size: 26px;
      border-collapse: collapse;
      width: fit-content;
      background-color: #ffffff1a;
      border: 2px solid black;
    }
  
    #uwu-climbingPanel > tr> td {
      width: 23px;
      height: 32px;
      border: 1px solid black;
      text-align: center;
      cursor: pointer;
      pointer-events: auto;
      position: relative;
    }

    #uwu-climbingPanelContainer h3 {
      margin-top: 5px;
      margin-bottom: 5px;
    }

    #uwu-functionButtonsContainer {
      height: 25px;
    }

    #uwu-climbingPanel > tr > td:focus {
      outline: 2px solid white;
    }

    #uwu-climbingPanel > tr > td:not(:empty) {
      background-color: #cccccc4d;
    }

    #uwu-transferCheckbox, #uwu-transferValuesCheckbox {
    pointer-events: auto;
    cursor: pointer;
    }

    #uwu-buttonRow1,
    #uwu-buttonRow2 {
      display: flex;
      flex-wrap: wrap;
    }

    #uwu-climbingPanel > tab-container, #uwu-climbingPanel > table-container {
      display: inline-block;
      margin-right: 10px;
    }
  
    #uwu-climbingPanelContainer button {
      background-color: #ffffff4d;
      border: 1px solid rgba(255, 255, 255, 0.1);
      padding: 2px 10px;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin: 3px;
      margin-left: 0px;
    }

    #uwu-buttonRow1 > div > button.tab-button.active,
    #uwu-buttonRow2 > div > button.table-button.active {
      background-color: #abf6ffb0;
    }

    #button-clear-table {
      margin-top: 5px !important;
      width: 100%;
      border-radius: 5px !important;
    }
  `;
    document.head.appendChild(uwuClimbingPanel);

    const uwuClimbingPanelHorizontal = document.createElement("style");
    uwuClimbingPanelHorizontal.innerHTML = // css
    `
    #uwu-climbingMainPanel {
      width: 390px !important;
    }

    #uwu-climbingPanelContent {
      display: grid !important;
      grid-template-columns: 1fr 2fr;
      grid-template-rows: auto auto;
    }
    
    #uwu-buttonContainer {
      overflow-y: auto;
      grid-column: 1 / 2;
      grid-row: 1 / 3;
    }
    
    #uwu-functionButtonsContainer {
      grid-column: 2 / 3;
      grid-row: 1 / 2;
    }
    
    #uwu-tableContainer {
      grid-column: 2 / 3;
      grid-row: 2 / 3;
    }
    `;

    if (settings.climbingPanelOrientation === "horizontal") {
      document.head.appendChild(uwuClimbingPanelHorizontal);
    }
  }
  // ====================================================================================================================
  //   . . . –ë–´–°–¢–†–´–ï –°–¢–ò–õ–ò . . .
  // ====================================================================================================================
  const settingsContainer = document.getElementById(
    "extended-settings-container"
  );
  if (!settingsContainer) {
    console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #extended-settings-container –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  const checkboxes = [
    {
      label: "–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ '–û –∫–æ—Ç–µ'",
      key: "hideCatTooltip",
      storageKey: "uwu_fastStyles",
      style: ".cat_tooltip { display: none !important; }",
      callback: function (checked) {
        if (checked) {
          const style = document.createElement("style");
          style.innerHTML = this.style;
          document.head.appendChild(style);
        } else {
          const styles = document.head.querySelectorAll("style");
          styles.forEach((style) => {
            if (style.innerHTML === this.style) {
              document.head.removeChild(style);
            }
          });
        }
      },
    },
    {
      label: "–°–∫—Ä—ã—Ç—å –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ",
      key: "hideGameField",
      storageKey: "uwu_fastStyles",
      style: "#cages_overflow { visibility: hidden !important; }",
      callback: function (checked) {
        if (checked) {
          const style = document.createElement("style");
          style.innerHTML = this.style;
          document.head.appendChild(style);
        } else {
          const styles = document.head.querySelectorAll("style");
          styles.forEach((style) => {
            if (style.innerHTML === this.style) {
              document.head.removeChild(style);
            }
          });
        }
      },
    },
    {
      label: "–°–∫—Ä—ã—Ç—å —Ñ–æ–Ω –ò–≥—Ä–æ–≤–æ–≥–æ –ü–æ–ª—è",
      key: "hideGameFieldBackground",
      storageKey: "uwu_fastStyles",
      style: "#cages_div { background-image: none !important; }",
      callback: function (checked) {
        if (checked) {
          const style = document.createElement("style");
          style.innerHTML = this.style;
          document.head.appendChild(style);
        } else {
          const styles = document.head.querySelectorAll("style");
          styles.forEach((style) => {
            if (style.innerHTML === this.style) {
              document.head.removeChild(style);
            }
          });
        }
      },
    },
    {
      label: "–°–∫—Ä—ã—Ç—å –ù–µ–±–æ",
      key: "hideSky",
      storageKey: "uwu_fastStyles",
      style: "#tr_sky { display: none !important; }",
      callback: function (checked) {
        if (checked) {
          const style = document.createElement("style");
          style.innerHTML = this.style;
          document.head.appendChild(style);
        } else {
          const styles = document.head.querySelectorAll("style");
          styles.forEach((style) => {
            if (style.innerHTML === this.style) {
              document.head.removeChild(style);
            }
          });
        }
      },
    },
    {
      label: "–í—Å–µ–≥–¥–∞ –¥–µ–Ω—å/—è—Ä–∫–æ",
      key: "alwaysDay",
      storageKey: "uwu_settings",
      callback: function (checked) {
        updateAlwaysDayStyle(checked);
      },
    },
    {
      label: "–ì—Ä–∞–Ω–∏—Ü—ã –∫–ª–µ—Ç–æ–∫",
      key: "cellsBorders",
      storageKey: "uwu_settings",
      callback: function (checked) {
        updateCellsBordersStyle(checked);
      },
    },
  ];

  const loadSettings = (storageKey) => {
    const savedSettings = localStorage.getItem(storageKey);
    return savedSettings ? JSON.parse(savedSettings) : {};
  };

  const saveSettings = (storageKey, settings) => {
    localStorage.setItem(storageKey, JSON.stringify(settings));
  };

  const settingsMap = {
    uwu_fastStyles: loadSettings("uwu_fastStyles"),
    uwu_settings: loadSettings("uwu_settings"),
  };

  const applyStyles = () => {
    checkboxes.forEach((checkbox) => {
      if (settingsMap[checkbox.storageKey][checkbox.key] === true) {
        checkbox.callback.call(checkbox, true);
      }
    });
  };

  if (settings.fastStyles) {
    const settingsDiv = document.createElement("div");
    settingsDiv.id = "fast-Styles-container";
    settingsDiv.classList.add("extended-settings-block");

    checkboxes.forEach((checkbox) => {
      const label = document.createElement("div");
      const input = document.createElement("input");
      input.type = "checkbox";
      input.name = checkbox.key;

      const storedValue = settingsMap[checkbox.storageKey][checkbox.key];
      if (storedValue === true) {
        input.checked = true;
        checkbox.callback.call(checkbox, true);
      }

      input.addEventListener("change", function () {
        settingsMap[checkbox.storageKey][checkbox.key] = this.checked;
        saveSettings(checkbox.storageKey, settingsMap[checkbox.storageKey]);
        checkbox.callback.call(checkbox, this.checked);
      });

      label.appendChild(input);
      label.appendChild(document.createTextNode(checkbox.label));
      settingsDiv.appendChild(label);
    });

    settingsContainer.appendChild(settingsDiv);

    const style = document.createElement("style");
    style.innerHTML = `
      .extended-settings-block {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }
      .extended-settings-block div {
        display: flex;
       align-items: center;
      }
    `;
    document.head.appendChild(style);
  } else {
    applyStyles();
  }
  // ====================================================================================================================
  //   . . . –ë–´–°–¢–†–´–ï –°–°–´–õ–ö–ò –í –ò–ì–†–û–í–û–ô . . .
  // ====================================================================================================================
  const quickLinks = {
    quickLink1: {
      href: "/settings",
      text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    },
    quickLink2: {
      href: "/ls?id=0",
      text: "–ü–∞–º—è—Ç–∫–∞",
    },
    quickLink3: {
      href: "/blogs",
      text: "–ë–ª–æ–≥–∏",
    },
    quickLink4: {
      href: "/sniff",
      text: "–õ–µ–Ω—Ç–∞",
    },
  };

  const spanElement = document.querySelector("span.small");

  Object.entries(quickLinks).forEach(([key, link]) => {
    if (settings[key]) {
      const newLink = document.createElement("a");
      newLink.href = link.href;
      newLink.textContent = link.text;

      const pipe = document.createTextNode(" | ");
      spanElement.appendChild(pipe);
      spanElement.appendChild(newLink);
    }
  });

  if (settings.userQuickLinks) {
    const userLinksArray = settings.userQuickLinks.split(", ");

    userLinksArray.forEach((userLink) => {
      const [href, text] = userLink.trim().split(" ");

      const newLink = document.createElement("a");
      newLink.href = href;
      newLink.textContent = text;

      const pipe = document.createTextNode(" | ");
      spanElement.appendChild(pipe);
      spanElement.appendChild(newLink);
    });
  }
  // ====================================================================================================================
  //  . . . –ü–û–î–°–í–ï–¢–ö–ê –†–ï–°–£–†–°–û–í . . .
  // ====================================================================================================================
  if (settings.highlightResources) {
    function hexToRGBA(hex, alpha) {
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }
  
    const ITEM_MAP = {
      '–¢—Ä–∞–≤—ã': ['13', '15', '17', '19', '21', '23', '25', '26', '106', '108', '109', '110', '111', '112', '115', '116', '119', '655'],
      '–ú–æ—Ö': ['75', '78', '95'],
      '–ü–∞—É—Ç–∏–Ω–∞': ['20'],
      '–ü—ã–ª—å': ['94', '385', '386', '387', '388', '389', '390', '391', '392'],
      '–í–µ—Ç–∫–∏, –≤—å—é–Ω–∫–∏, –∫–æ—Å—Ç–æ–ø—Ä–∞–≤—ã': ['565', '566', '562', '563', '3993'],
      '–¢—Ä–∞–≤—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã': ['985', '986', '987', '988', '989', '44', '180', '77', '7801', '7802', '7803', '7804', '7805', '7806']
    };
  
    function generateHighlightStyles(cageItem) {
      const savedSettings = localStorage.getItem('uwu_highlightResources');
      if (!savedSettings) return;
    
      const uwu_highlightResources = JSON.parse(savedSettings);
    
      if (settings.highlightResourcesStyle === "background") {
        const styleElement = document.getElementById('resourcesStyle') || document.createElement('style');
        styleElement.id = 'resourcesStyle';
        styleElement.textContent = '';
    
        uwu_highlightResources.forEach(resource => {
          if (resource.highlight) {
            const rgbaColor = hexToRGBA(resource.color, 0.4);
            let cssRules = '';
    
            const items = ITEM_MAP[resource.name];
            if (!items) {
              console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å:", resource.name);
              return;
            }
    
            items.forEach(itemName => {
              cssRules += `
                .cage_items[style*='things/${itemName}.png'] {
                  background-color: ${rgbaColor} !important;
                }`;
            });
    
            if (cssRules) {
              styleElement.textContent += cssRules;
            }
          }
        });
    
        document.head.appendChild(styleElement);
      } else if (settings.highlightResourcesStyle === "glow") {
        const style = cageItem.getAttribute("style");
        if (!style) return;
    
        const oldHighlights = cageItem.querySelectorAll("style.uwu_itemHighlight");
        oldHighlights.forEach(oldHighlight => oldHighlight.remove());
    
        cageItem.style.position = 'relative';
    
        uwu_highlightResources.forEach((resource) => {
          if (resource.highlight) {
            const rgbaColor = hexToRGBA(resource.color, 1);
            let highlightedItems = [];
    
            const items = ITEM_MAP[resource.name];
            if (!items) {
              console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å:", resource.name);
              return;
            }
    
            items.forEach((itemName) => {
              const backgroundImages = style.match(/url\("things\/(.*?)\.png"\) (\d+)% (\d+)% no-repeat/g) || [];
    
              backgroundImages.forEach((backgroundImage) => {
                if (backgroundImage.includes(`things/${itemName}.png`)) {
                  const positionMatch = backgroundImage.match(/(url\("things\/(.*?)\.png"\)) (\d+)% (\d+)% no-repeat/);
                  const imageUrl = positionMatch ? positionMatch[1] : "";
                  const positionX = positionMatch ? positionMatch[3] : "0";
                  const positionY = positionMatch ? positionMatch[4] : "0";
    
                  highlightedItems.push(
                    `${imageUrl} ${positionX}% ${positionY}% no-repeat`
                  );
                }
              });
            });
    
            if (highlightedItems.length > 0) {
              const styleBody = `
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                background: ${highlightedItems.join(", ")};
                filter: drop-shadow(0 0 8px ${rgbaColor}) drop-shadow(0 0 8px ${rgbaColor});
              `;
    
              const styleElement = document.createElement('style');
              styleElement.classList.add('uwu_itemHighlight');
              styleElement.textContent = `
                .cage_items[style*='${style}']::before {
                  ${styleBody}
                }
              `;
              cageItem.appendChild(styleElement);
            }
          }
        });
      }
    }
  
    function setupMutationObserver(targetNode, callback, config) {
      const observer = new MutationObserver((mutationsList, observer) => {
        for (let mutation of mutationsList) {
          if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
            callback(targetNode);
          }
        }
      });
  
      observer.observe(targetNode, config);
    }
  
    document.querySelectorAll(".cage_items").forEach((cageItem) => {
      generateHighlightStyles(cageItem);
      setupMutationObserver(cageItem, generateHighlightStyles, {
        attributes: true,
        childList: true,
        subtree: true,
      });
    });
  }
  // ====================================================================================================================
  //   . . . –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–ö–ò–ô –§–û–ù . . .
  // ====================================================================================================================
  const cagesDiv = document.querySelector("#cages_div");

  function createBackgroundDiv() {
    const backgroundDiv = document.createElement("div");
    backgroundDiv.style.position = "fixed";
    backgroundDiv.style.top = "-1%";
    backgroundDiv.style.left = "-1%";
    backgroundDiv.style.width = "102%";
    backgroundDiv.style.height = "102%";
    backgroundDiv.style.zIndex = "-2";
    backgroundDiv.style.overflow = "hidden";
    return backgroundDiv;
  }

  function updateBackgroundImage(backgroundDiv, imageUrl) {
    if (imageUrl) {
      backgroundDiv.style.backgroundImage = `url(${imageUrl})`;
      backgroundDiv.style.backgroundSize = "cover";
      backgroundDiv.style.backgroundPosition = "center";
      backgroundDiv.style.backgroundRepeat = "no-repeat";
    } else {
      backgroundDiv.style.backgroundImage = "none";
    }
  }

  if (settings.backgroundRepeat) {
    const backgroundDiv = createBackgroundDiv();

    backgroundDiv.style.filter = "blur(16px)";
    backgroundDiv.style.backgroundBlendMode = "overlay";
    backgroundDiv.style.backgroundColor = "rgba(0, 0, 0, 0.5)";

    const backgroundImageStyle =
      window.getComputedStyle(cagesDiv).backgroundImage;
    const url = backgroundImageStyle.match(/url\("?(.+?)"?\)/);
    const backgroundImageUrl = url ? url[1] : null;

    updateBackgroundImage(backgroundDiv, backgroundImageUrl);
    globalContainerElement.appendChild(backgroundDiv);

    setupMutationObserver(
      "#cages_div",
      () => {
        const backgroundImageStyle =
          window.getComputedStyle(cagesDiv).backgroundImage;
        const url = backgroundImageStyle.match(/url\("?(.+?)"?\)/);
        const backgroundImageUrl = url ? url[1] : null;
        updateBackgroundImage(backgroundDiv, backgroundImageUrl);
      },
      { attributes: true, attributeFilter: ["style"] },
      8,
      500,
      10
    );
  }

  if (settings.backgroundUser) {
    const backgroundDiv = createBackgroundDiv();
    updateBackgroundImage(backgroundDiv, settings.backgroundUserImageURL);
    globalContainerElement.appendChild(backgroundDiv);
  }
  // ====================================================================================================================
  //   . . . –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¶–í–ï–¢–ê –ù–ê–í–´–ö–û–í –ò –ü–ê–†–ê–ú–ï–¢–†–û–í . . .
  // ====================================================================================================================
  if (settings.userParametersTheme) {
    const defaultBackgroundImageUrl =
      "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/parametersBackgroundImageURL.png";

    function applyParameterColors() {
      let cssStyles = "";

      const otherColors = settings.parametersColors.other;
      const otherFirstCellBackground = `linear-gradient(to right, ${otherColors[0]}, ${otherColors[1]})`;
      const otherLastCellBackground = `linear-gradient(to right, ${otherColors[2]}, ${otherColors[3]})`;

      cssStyles += `#parameters_block .parameter td:first-child { background: ${otherFirstCellBackground}; }\n`;
      cssStyles += `#parameters_block .parameter td:last-child { background: ${otherLastCellBackground}; }\n`;

      for (const paramId in settings.parametersColors) {
        if (paramId === "other") continue;

        const colors = settings.parametersColors[paramId];
        const backgroundImageURL = settings.parametersUserBackgroundImage
          ? settings.parametersUserBackgroundImageURL
          : defaultBackgroundImageUrl;
        const firstCellBackground =
          settings.parametersBackgroundImage ||
          settings.parametersUserBackgroundImage
            ? `url(${backgroundImageURL}), linear-gradient(to right, ${colors[0]}, ${colors[1]})`
            : `linear-gradient(to right, ${colors[0]}, ${colors[1]})`;
        const lastCellBackground =
          settings.parametersBackgroundImage ||
          settings.parametersUserBackgroundImage
            ? `url(${backgroundImageURL}), linear-gradient(to right, ${colors[2]}, ${colors[3]})`
            : `linear-gradient(to right, ${colors[2]}, ${colors[3]})`;

        cssStyles += `#${paramId}_table .parameter td:first-child { background: ${firstCellBackground}; }\n`;
        cssStyles += `#${paramId}_table .parameter td:last-child { background: ${lastCellBackground}; }\n`;
      }

      const styleTag = document.createElement("style");
      styleTag.id = "custom-parameter-styles";
      styleTag.innerHTML = cssStyles;
      document.head.appendChild(styleTag);
    }

    applyParameterColors();
  }
  // ====================================================================================================================
  //   . . . –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –®–†–ò–§–¢ . . .
  // ====================================================================================================================
  let fontSize = JSON.parse(localStorage.getItem('uwu_fontSize'));

  function applyFonts() {
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç <link> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞
      const fontFamily = fontSize?.fontFamilyBody;
      if (fontFamily) {
          const link = document.createElement('link');
          link.rel = 'stylesheet';
          link.href = `https://fonts.googleapis.com/css?family=${encodeURIComponent(fontFamily)}`;
          document.head.appendChild(link);
      }
  
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç <style> –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
      const newFontStyle = document.createElement("style");
      newFontStyle.innerHTML = `
          body {
              font-size: ${fontSize?.fontSizeBody}px;
              font-family: ${fontFamily ? `'${fontFamily}', sans-serif` : 'sans-serif'};
          }
  
          .small {
              font-size: ${fontSize?.fontSizeSmall}px;
          }
  
          #location {
              font-size: ${fontSize?.fontSizeLocation}px !important;
          }
  
          .vlm0 {
              font-size: ${fontSize?.vlm0}px;
          }
  
          .vlm1 {
              font-size: ${fontSize?.vlm1}px;
          }
  
          .vlm2 {
              font-size: ${fontSize?.vlm2}px;
          }
  
          .vlm3 {
              font-size: ${fontSize?.vlm3}px;
          }
  
          .vlm4 {
              font-size: ${fontSize?.vlm4}px;
          }
  
          .vlm5 {
              font-size: ${fontSize?.vlm5}px;
          }
  
          .vlm6 {
              font-size: ${fontSize?.vlm6}px;
          }
  
          .vlm7 {
              font-size: ${fontSize?.vlm7}px;
          }
  
          .vlm8 {
              font-size: ${fontSize?.vlm8}px;
          }
  
          .vlm9 {
              font-size: ${fontSize?.vlm9}px;
          }
  
          .vlm10 {
              font-size: ${fontSize?.vlm10}px;
          }
      `;
      document.head.appendChild(newFontStyle);
  }
  
  if (settings.useUserFonts) {
      applyFonts();
  }

  // ====================================================================================================================
  //   . . . –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¢–ï–ú–´ / –¶–í–ï–¢–ê . . .
  // ====================================================================================================================
  function applyTheme() {
    const newStyle = document.createElement("style");
    newStyle.innerHTML = // css
    `
      body {
        background: ${theme?.backgroundColor || ""};
      }

      #cages_overflow {
        background: black;
      } 

      #tr_actions > td, #tr_mouth > td, #location, .small {
        background-color: ${theme?.blocksColor || ""};
      }

      #history_block > div {
        background-color: unset !important;
      }

      #main_table, #tr_mouth, #tr_actions, #info_main {
        background-color: unset;
        background: none;
      }
    
      #tr_chat {
        background-color: ${theme?.chatColor || ""};
      }
    
      body, input, select, .ui-slider-handle {
        color: ${theme?.textColor || ""};
      }
    
      input, select, .ui-slider-horizontal {
        background-color: ${theme?.accentColor1 || ""};
        background: ${theme?.accentColor1 || ""};
        border: solid 1px ${theme?.accentColor2 || ""};
      }

      .ui-widget-content .ui-state-default {
        background: ${theme?.accentColor2 || ""};
        border: solid 1px ${theme?.accentColor2 || ""};
      } 

      hr {
        border: solid 1px ${theme?.accentColor2 || ""};
      }

      .myname {
        color: ${theme?.accentColor1 || ""};
        background: ${theme?.accentColor3 || ""};
      }

      span.cat_tooltip {
        background: ${theme?.catTooltipBackground || ""} !important;
        color: ${theme?.textColor || ""} !important;
        border: 2px solid ${theme?.accentColor2 || ""} !important;
      } 

      span.cat_tooltip > span.online {
        filter: brightness(2) contrast(150%);
      }
      
      .cat:hover .cat_tooltip a, .other_cats_list > a { 
        color: ${theme?.linkColor || ""}; 
      }

      .move_name {
        color: ${theme?.moveNameColor || ""};
        background-color: ${theme?.moveNameBackground || ""} !important;
      }
    
      a, a:hover {
        color: ${theme?.linkColor || ""};
      }

      #fightPanel {
        background-color: ${theme?.fightPanelBackground || ""};
      }

      .hotkey {
        background-color: ${theme?.accentColor1 || ""};
      }

      #newchat, #newls {
        color: ${theme?.accentColor3 || ""};
      }

      .cat-info {
      background-color: ${theme?.catTooltipBackground || ""} !important;
      color: ${theme?.textColor || ""} !important;
      }
      `;
    document.head.appendChild(newStyle);
  }

  if (settings.userTheme) {
    applyTheme();
  }
  // ====================================================================================================================
  //   . . . –†–ï–î–ò–ó–ê–ô–ù –ò–ì–†–û–í–û–ô . . .
  // ====================================================================================================================
  if (settings.customLayout) {
    // ==================================================================
    function prependOtherCatsListContent() {
      const otherCatsList = document.querySelector(".other_cats_list");
      const smallContainer = document.querySelector(".small");

      if (!otherCatsList || !smallContainer) return;

      const catsListContent = otherCatsList.innerHTML;

      switch (settings.showOtherCatsList) {
        case "1":
          break;
        case "2":
          const clickableBlockHTML =
            '<span style="display: inline; cursor: pointer;"><a href="#" style="display: inline; pointer-events: none;">–î—É—à–µ–≤—ã–µ –∫–æ—Ç—ã</a></span>';
          smallContainer.insertAdjacentHTML(
            "afterbegin",
            clickableBlockHTML + " || "
          );

          const clickableBlock = smallContainer.firstChild;

          const catsListContainer = document.createElement("span");
          catsListContainer.id = "catsListContainer";
          catsListContainer.innerHTML = ": " + catsListContent;
          catsListContainer.style.display = "none";
          smallContainer.insertBefore(
            catsListContainer,
            smallContainer.firstChild.nextSibling
          );

          clickableBlock.addEventListener("click", (event) => {
            event.preventDefault();
            if (catsListContainer.style.display === "none") {
              catsListContainer.style.display = "inline";
            } else {
              catsListContainer.style.display = "none";
            }
          });
          break;
        case "3":
          smallContainer.insertAdjacentHTML(
            "afterbegin",
            catsListContent + " || "
          );
          break;
        default:
          break;
      }
    }

    setupSingleCallback(".other_cats_list", prependOtherCatsListContent);
    // ==================================================================

    function applyLayoutSettings() {
      const savedSettings = localStorage.getItem("uwu_layoutSettings");
      if (savedSettings) {
        const { leftBlocks, rightBlocks } = JSON.parse(savedSettings);

        const mainTable = document.getElementById("main_table");
        const tbody = mainTable.getElementsByTagName("tbody")[0];
        const blocks = Array.from(tbody.children);

        resetBlockStyles(tbody);

        const gridAreaTemplate = generateGridTemplate(leftBlocks, rightBlocks);

        // console.log(gridAreaTemplate);

        tbody.style.display = "grid";
        tbody.style.gridTemplateAreas = gridAreaTemplate;
        tbody.style.gridTemplateColumns = "1fr auto 1fr";
        tbody.style.gridTemplateRows = generateGridRowStyles(
          leftBlocks,
          rightBlocks
        );

        blocks.forEach((block) => {
          if (block.id) {
            block.style.gridArea = block.id;
          }
        });
      }
    }

    function generateGridRowStyles(leftBlocks, rightBlocks) {
      const numRows = Math.max(leftBlocks.length, rightBlocks.length);
      let rowStyles = [];

      for (let i = 0; i < numRows; i++) {
        let rowHeight = "auto";
        rowStyles.push(rowHeight);
      }

      const rowStylesString = rowStyles.join(" ");
      return rowStylesString;
    }

    function generateGridTemplate(leftBlocks, rightBlocks) {
      const numRows = Math.max(leftBlocks.length, rightBlocks.length);
      let template = "";
      let lastLeftBlockId = "";
      let lastRightBlockId = "";
      let isFirstRow = true;

      for (let i = 0; i < numRows; i++) {
        const leftBlockId = leftBlocks[i] || lastLeftBlockId;
        const rightBlockId = rightBlocks[i] || lastRightBlockId;

        if (isFirstRow) {
          template += `"${leftBlockId} tr_field ${rightBlockId}" `;
          isFirstRow = false;
        } else {
          template += `"${
            leftBlockId === lastLeftBlockId ? "." : leftBlockId
          } . ${rightBlockId === lastRightBlockId ? "." : rightBlockId}" `;
        }

        if (leftBlockId) {
          lastLeftBlockId = leftBlockId;
        }
        if (rightBlockId) {
          lastRightBlockId = rightBlockId;
        }
      }

      return template;
    }

    function resetBlockStyles(parent) {
      const blocks = parent.querySelectorAll("tr > *");
      blocks.forEach((block) => {
        block.style.gridArea = "";
      });
    }

    // –ë–æ–ª—å—à–µ —Ñ–∏–∫—Å —Å—Ç–∏–ª–µ–π.
    const fixStyle = document.createElement("style");
    fixStyle.innerHTML = // css
    `
      #main_table {
        width: 100%;
        max-width: unset;
        height: 100%;

        background: none;
        border-spacing: 0px !important;
      }

      #main_table > tbody {
        margin-top: 10px;
      }

      #app {
        width: 100%;
        height: 100%;
      }
      
      #chat_msg, #cws_chat_msg {
        height: ${settings.chatHeight}px;
        width: auto;
      }

      #history_block > div { 
        visibility: hidden; 
      }

      #history_block {
        display: block;
        height: ${settings.historyHeight}px; 
        overflow-y: auto;
        resize: vertical;
      }

      #family { 
        display: block;
        overflow-y: auto;
        resize: vertical;
      }

      .infos {
        width: auto;
      }

      #cages_overflow {
        background: black;
      }

      .chat_text {
        width: auto !important;
        overflow-wrap: anywhere;
      }

      #chat_form {
        margin: unset;
        margin: 5px;
      }

      #volume {
        margin: 5px;
      }

      #app > p:last-of-type {
        position: fixed;
        bottom: 0px;
        margin: 8px;
      }

      h2 {
        margin-top: 5px;
        margin-bottom: 10px;
      }

      #itemList {
        overflow-y: auto;
        max-height: 180px;
        display: flex;
        flex-wrap: wrap;
      }

      #location {
        visibility: visible;
        position: fixed;
        right: 0px;
        top: 0px;
        font-size: 1.5rem;
        background-color: ${theme?.blocksColor};
        z-index: 1;
      }

      .small {
        position: fixed;
        left: 0px;
        top: 0px;
        font-size: ${fontSize?.fontSizeSmall || 16}px;
        z-index: 1;
      }

      body {
        overflow-y: scroll;
      }

      #tr_chat, #tr_actions > td, #tr_mouth > td, #location, .small, #info_main > tbody > tr > td {
        padding: 5px !important;
      }

      #tr_chat > td {
        display: contents;
      }

      #chat_msg, #cws_chat_msg {
        height: ${theme?.chatHeight}px;
        resize: vertical;
      }

      #tr_field, #tr_info {
        height: 10px;
      }

      #newchat, #newls {
        background-color: transparent;
      }

      .other_cats_list {
        display: none;
      }
    `;
    document.head.appendChild(fixStyle);
    applyLayoutSettings();

    const paragraph = document.querySelector("#app > p > b");
    paragraph.textContent = "–¢–ë:";

    function applyLayoutSettingsForInfoMain() {
      const infoMainTable = document.getElementById("info_main");
      const tableRow = infoMainTable.querySelector("tr");
      const tds = tableRow.getElementsByTagName("td");

      for (const td of tds) {
        td.style.gridArea = "";
      }

      tableRow.style.display = "grid";
      // —Ö–∞—Ö–∞—Ö–∞—Ö –ø–æ–≥–ª—è–¥–∏—Ç–µ –Ω–∞ —Å–º–µ—à–Ω–æ–≥–æ —Å—Ç—Ä–æ—á–Ω–æ–≥–æ
      tableRow.style.gridTemplateAreas = `"parameter"
                                          "history"
                                          "family"`;

      tds[0].style.gridArea = "family";
      tds[1].style.gridArea = "history";
      tds[2].style.gridArea = "parameter";
    }
    applyLayoutSettingsForInfoMain();
  }

  // ====================================================================================================================
  //   . . . –ü–û–î–°–ö–ê–ó–´–í–ê–¢–¨ –û–°–¢–ê–í–®–ï–ï–°–Ø –í–†–ï–ú–Ø –î–û –ù–Æ–•–ê . . .
  // ====================================================================================================================
  if (settings.showHintWhenToSniff) {
    let firstNote = "";
    let timerStartTime = null;
    let initialTimerValue = 0;
    
    const smellTimer = {
      0: 3600,
      1: 3600,
      2: 3600,
      3: 3600,
      4: 1800,
      5: 1200,
      6: 900,
      7: 720,
      8: 600,
      9: 0,
    };
    
    function formatTime(seconds) {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const remainingSeconds = seconds % 60;
      return `${hours ? `${hours} —á ` : ""}${
        minutes ? `${minutes} –º–∏–Ω ` : ""
      }${remainingSeconds} —Å`;
    }
    
    function updateSmellTimer() {
      const timerElement = document.getElementById("uwu_sniff_timer");
      if (!timerElement) return;
    
      if (timerStartTime !== null) {
        const isActive = document.querySelector('#dein a[data-id="14"]') !== null;
        if (isActive) {
          timerStartTime = null;
          initialTimerValue = 0;
          timerElement.setAttribute("value", 0);
          timerElement.textContent = "";
          soundManager.playSound("notificationSound3", settings.notificationMyNameVolume);
          return;
        }
    
        const currentTime = Date.now();
        const elapsedTime = Math.floor((currentTime - timerStartTime) / 1000);
        let remainingTime = initialTimerValue - elapsedTime;
    
        if (remainingTime <= 0) {
          remainingTime = 0;
          timerStartTime = null;
          initialTimerValue = 0;
          soundManager.playSound("notificationSound3", settings.notificationMyNameVolume);
        }
    
        timerElement.setAttribute("value", remainingTime);
        timerElement.textContent = remainingTime > 0 ? ` | –ù—é—Ö —á–µ—Ä–µ–∑: ${formatTime(remainingTime)}` : "";
      }
    }
    
    setInterval(updateSmellTimer, 1000);
    
    function smellIconClick() {
      firstNote = document.getElementById("error").innerHTML;
      document.getElementById("smell_icon").click();
    }
    
    function errorObserver() {
      const errorElement = document.getElementById("error");
      const html = errorElement.innerHTML;
      if (html && html.includes("–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω—é—Ö–∏–≤–∞–Ω–∏–µ")) {
        const text = html.replace(
          "–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω—é—Ö–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ",
          ""
        );
        const smellMin =
          (text.match(/(\d+) –º–∏–Ω/g) || [])
            .map((num) => parseInt(num.replace(/\D/g, ""), 10))
            .shift() || 0;
        const smellSec = parseInt(
          (text.match(/(\d+) —Å/g) || [])
            .map((num) => num.replace(/\D/g, ""))
            .shift(),
          10
        );
        const totalSec = smellMin * 60 + smellSec;
        const timerElement = document.getElementById("uwu_sniff_timer");
        timerElement.setAttribute("value", totalSec);
        timerElement.textContent = ` | –ù—é—Ö —á–µ—Ä–µ–∑: ${smellMin} –º–∏–Ω ${smellSec} —Å`;
        timerStartTime = Date.now();
        initialTimerValue = totalSec;
        if (firstNote !== "") {
          errorElement.innerHTML = firstNote;
          firstNote = "";
        }
      } else if (html.includes("–ß–∞—Å —É–∂–µ –ø—Ä–æ—à—ë–ª") && firstNote !== "") {
        errorElement.innerHTML = firstNote;
        firstNote = "";
      }
    }
    
    function messObserver() {
      const blockMessElement = document.getElementById("block_mess");
      if (!blockMessElement) return;
    
      const isActive = document.querySelector('#dein a[data-id="14"]') !== null;
      if (!isActive && blockMessElement.children.length === 0 && timerStartTime === null) {
        const smellLevel = document.querySelector("#smell b").textContent;
        const smellTime = smellTimer[smellLevel];
        const timerElement = document.getElementById("uwu_sniff_timer");
        timerElement.setAttribute("value", smellTime);
        timerElement.textContent = ` | –ù—é—Ö —á–µ—Ä–µ–∑: ${formatTime(smellTime)}`;
        timerStartTime = Date.now();
        initialTimerValue = smellTime;
      }
    }
    
    function timerElement() {
      const smallElement = document.querySelector(".small");
      if (smallElement) {
        smallElement.insertAdjacentHTML(
          "beforeend",
          '<span id="uwu_sniff_timer" value="0"></span>'
        );
      }
    }
    
    window.addEventListener("load", function () {
      setupSingleCallback(".small", timerElement);
      setupSingleCallback("#smell_icon", smellIconClick);
      setupMutationObserver("#error", errorObserver, {
        childList: true,
        subtree: true,
      });
      setupMutationObserver("#block_mess", messObserver, {
        childList: true,
        subtree: true,
      }, 8, 500, 20);
    });
  }
  // ====================================================================================================================
  //   . . . –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –ù–ê –í–ö–õ–ê–î–ö–£ –ë–†–ê–£–ó–ï–†–ê . . .
  // ====================================================================================================================
  if (settings.duplicateTimeInBrowserTab) {
    const blockMess = document.getElementById("block_mess");
    const titleElement = document.querySelector("title");
    let previousTime = null;
    let previousMessage = null;

    function updateTitle() {
      const timeElement = blockMess.querySelector("#sek");
      const messageText = blockMess.textContent.trim();

      if (messageText === previousMessage) return;

      const catNameMatch = messageText.match(/^(.+?)\s+–¥–µ—Ä–∂–∏—Ç/);
      const catName = catNameMatch ? catNameMatch[1] : "";

      if (catName) {
        titleElement.textContent = `–ü–æ–¥–Ω—è—Ç. –í–æ —Ä—Ç—É | ${catName}`;
      } else if (timeElement) {
        const currentTime = timeElement.textContent.trim();
        if (currentTime !== previousTime) {
          const actionText = messageText
            .replace(currentTime, "")
            .replace(/\s*\.\s*–û—Ç–º–µ–Ω–∏—Ç—å$/, "")
            .trim();
          titleElement.textContent = `${currentTime} | ${actionText}`;
          previousTime = currentTime;
        }
      } else {
        titleElement.textContent = "–ò–≥—Ä–æ–≤–∞—è / CatWar";
        previousTime = null;
      }

      previousMessage = messageText;
    }

    setupMutationObserver("#block_mess", updateTitle, {
      childList: true,
      subtree: true,
    });
  }
  // ====================================================================================================================
  //   . . . –õ–û–ì –ß–ò–°–¢–ò–õ–¨–©–ò–ö–û–í . . .
  // ====================================================================================================================function cleaningLogUpdate(mutationsList) {
  const relevantActions = [
    { regex: /–ü–æ—Ç—ë—Ä–ª–∏—Å—å –Ω–æ—Å–æ–º –æ –Ω–æ—Å —Å/, type: "check" },
    { regex: /–ü–æ—Ç—ë—Ä–ª–∏—Å—å —â–µ–∫–æ–π –æ —â—ë–∫—É/, type: "check" },
    { regex: /–ü–æ–º—É—Ä–ª—ã–∫–∞–ª(–∞)? –≤–º–µ—Å—Ç–µ —Å/, type: "check" },
    { regex: /–û–±–Ω—é—Ö–∞–ª(–∞)? /, type: "check" },
    { regex: /–ü–æ–¥–Ω—è–ª(–∞)? /, type: "pickup" },
    { regex: /–û–ø—É—Å—Ç–∏–ª(–∞)? –Ω–∞ –∑–µ–º–ª—é /, type: "putdown" },
  ];

  let cleaningLogBuffer = "";
  let catNamesAndIds = [];

  function cleaningLogUpdate() {
    const historyBlock = document.querySelector("#history");
    const ist = historyBlock.querySelector("#ist");
    const locationSpan = historyBlock.querySelector("#location");
    const currentLocation = locationSpan.textContent.trim();
  
    if (currentLocation === "[ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è‚Ä¶ ]") {
      return;
    }
  
    let cleaningLogBlock = historyBlock.querySelector("#uwu-cleaningLog");
    if (!cleaningLogBlock) {
      createCleaningLogBlock(historyBlock);
      cleaningLogBlock = historyBlock.querySelector("#uwu-cleaningLog");
    }
  
    const istOuterHtml = ist.outerHTML;
    const actions = istOuterHtml
      .split(".")
      .map((action) => action.trim())
      .filter((action) => action);
    const lastAction = actions[actions.length - 2];
  
    const cleaningLogContent = cleaningLogBlock.querySelector(
      "#uwu-cleaningLog-content"
    );
  
    if (lastAction) {
      if (settings.cleaningLogStyle === "smart") {
        processSmartAction(lastAction, currentLocation, cleaningLogContent);
      } else {
        processStandardAction(lastAction, currentLocation, cleaningLogContent);
      }
  
      let storageKey;
      switch (settings.cleaningLogStyle) {
        case "smart":
          storageKey = "uwu_cleaningLogSmart";
          break;
        default:
          storageKey = "uwu_cleaningLogStandard";
          break;
      }
  
      localStorage.setItem(
        storageKey,
        JSON.stringify({
          log: cleaningLogBuffer,
          catNamesAndIds,
          counters: {
            pickup: parseInt(document.getElementById("uwu-cleaningLog-counter-pickup").textContent),
            putdown: parseInt(document.getElementById("uwu-cleaningLog-counter-putdown").textContent)
          }
        })
      );
      cleaningLogContent.innerHTML = addCatLinksToLog(
        cleaningLogBuffer,
        catNamesAndIds
      );
    }
  }

  function createCleaningLogBlock(historyBlock) {
    const cleaningLogTemplate = `
      <div id="uwu-cleaningLog">
        <h2><a href="#" id="uwu-cleaningLog-toggle" class="toggle">–õ–æ–≥ —á–∏—Å—Ç–∏–ª—å—â–∏–∫–∞</a></h2>
        <div id="uwu-cleaningLog-content"></div>
        <div id="uwu-cleaningLog-counters">
          <span>–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç—ã—Ö: <span id="uwu-cleaningLog-counter-pickup">0</span></span>
          <span>–û–ø—É—â–µ–Ω–Ω—ã—Ö: <span id="uwu-cleaningLog-counter-putdown">0</span></span>
        </div>
        <a href="#" id="uwu-cleaningLog-clear">–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥</a>
      </div>
    `;
  
    historyBlock.insertAdjacentHTML("beforeend", cleaningLogTemplate);
  
    const hr = document.createElement("hr");
    historyBlock.insertBefore(
      hr,
      historyBlock.querySelector("#uwu-cleaningLog")
    );
  
    const cleaningLogContent = historyBlock.querySelector(
      "#uwu-cleaningLog-content"
    );
    const savedLog = localStorage.getItem("uwu_cleaningLogSmart");
    if (savedLog) {
      const savedData = JSON.parse(savedLog);
      cleaningLogBuffer = savedData.log;
      catNamesAndIds = savedData.catNamesAndIds;
      if (savedData.counters) {
        document.getElementById("uwu-cleaningLog-counter-pickup").textContent = savedData.counters.pickup;
        document.getElementById("uwu-cleaningLog-counter-putdown").textContent = savedData.counters.putdown;
      }
      cleaningLogContent.innerHTML = addCatLinksToLog(
        cleaningLogBuffer,
        catNamesAndIds
      );
    }
  
    const clearButton = historyBlock.querySelector("#uwu-cleaningLog-clear");
    clearButton.addEventListener("click", () => {
      cleaningLogBuffer = "";
      catNamesAndIds = [];
      document.getElementById("uwu-cleaningLog-counter-pickup").textContent = "0";
      document.getElementById("uwu-cleaningLog-counter-putdown").textContent = "0";
      cleaningLogContent.innerHTML = "";
      localStorage.removeItem("uwu_cleaningLogSmart");
    });
  }

  function addCatLinksToLog(log, catNamesAndIds) {
    let logWithLinks = log;
    catNamesAndIds.forEach(({ name, id }) => {
      const regex = new RegExp(`\\[${name}( ${id})?\\]`, "g");
      logWithLinks = logWithLinks.replace(
        regex,
        `[<a href="/cat${id}" target="_blank">${name}</a>${
          settings.cleaningLogShowID ? ` ${id}` : ""
        }]`
      );
    });
    return logWithLinks;
  }

  function extractCatId(action) {
    const match = action.match(/<a href="\/cat(\d+)">/);
    return match ? match[1] : null;
  }

  function checkCatStatus(catId) {
    const catTooltip = document
      .querySelector(`#cages > tbody .cat_tooltip a[href="/cat${catId}"]`)
      .closest(".cat_tooltip");
    if (catTooltip) {
      const statusSpan = catTooltip.querySelector(".online");
      if (statusSpan) {
        const statusText = statusSpan.textContent.trim();
        return statusText === "[ –°–ø–∏—Ç ]";
      }
    }
    return false;
  }

  function processStandardAction(action, location, cleaningLogContent) {
    for (const relevantAction of relevantActions) {
      if (relevantAction.regex.test(action)) {
        const catNameMatch = action.match(/<a href="\/cat\d+">([^<]+)<\/a>/);
        if (!catNameMatch) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∫–æ—Ç–∞ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è:", action);
          return;
        }
        const catName = catNameMatch[1];
        const catId = extractCatId(action);
        const actionText = action.replace(
          /<a href="\/cat\d+">([^<]+)<\/a>/,
          `[${catName}${settings.cleaningLogShowID ? ` ${catId}` : ""}]`
        );
        if (relevantAction.type === "action") {
          cleaningLogBuffer += `${actionText} –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}". `;
        } else {
          const status = checkCatStatus(catId) ? "" : "–ö–æ—Ç –Ω–µ —Å–ø–∏—Ç. ";
          cleaningLogBuffer += `–ü—Ä–æ–≤–µ—Ä–µ–Ω [${catName}${
            settings.cleaningLogShowID ? ` ${catId}` : ""
          }] –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}". ${status}`;
        }
        if (!catNamesAndIds.some(cat => cat.id === catId)) {
          catNamesAndIds.push({ name: catName, id: catId });
        }
        cleaningLogContent.innerHTML = addCatLinksToLog(
          cleaningLogBuffer,
          catNamesAndIds
        );
        return;
      }
    }
  }

  function processSmartAction(action, location, cleaningLogContent) {
    let matched = false;
  
    for (const relevantAction of relevantActions) {
      if (relevantAction.regex.test(action)) {
        matched = true;
        const catNameMatch = action.match(/<a href="\/cat\d+">([^<]+)<\/a>/);
        if (!catNameMatch) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∫–æ—Ç–∞ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è:", action);
          return;
        }
        const catName = catNameMatch[1];
        const catId = extractCatId(action);
        const logLines = cleaningLogBuffer
          .split(".")
          .map((line) => line.trim())
          .filter((line) => line);
  
        switch (relevantAction.type) {
          case "check":
            processCheckAction(logLines, catName, catId, location);
            break;
  
          case "putdown":
            processPutdownAction(logLines, catName, catId, location);
            break;
  
          case "pickup":
            processPickupAction(logLines, catName, catId, location);
            break;
        }
  
        cleaningLogBuffer =
          logLines.join(". ") + (logLines.length > 0 ? "." : "");
        if (!catNamesAndIds.some(cat => cat.id === catId)) {
          catNamesAndIds.push({ name: catName, id: catId });
        }
        cleaningLogContent.innerHTML = addCatLinksToLog(
          cleaningLogBuffer,
          catNamesAndIds
        );
        return;
      }
    }
  
    if (!matched) {
      const logLines = cleaningLogBuffer
        .split(".")
        .map((line) => line.trim())
        .filter((line) => line);
      processUnmatchedAction(logLines, cleaningLogContent, action);
      cleaningLogBuffer =
        logLines.join(". ") + (logLines.length > 0 ? "." : "");
      cleaningLogContent.innerHTML = addCatLinksToLog(
        cleaningLogBuffer,
        catNamesAndIds
      );
    }
  
    return null;
  }

  function processCheckAction(logLines, catName, catId, location) {
    const lastLogIndex = logLines.length - 1;
    const isCatSleeping = checkCatStatus(catId);

    if (
      lastLogIndex >= 0 &&
      (logLines[lastLogIndex].includes("–ü—Ä–æ–≤–µ—Ä–µ–Ω [") ||
        logLines[lastLogIndex].includes("–ö–æ—Ç –Ω–µ —Å–ø–∏—Ç") ||
        logLines[lastLogIndex].includes("–í—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ç–∞"))
    ) {
      logLines.splice(lastLogIndex, 1);
    }

    if (isCatSleeping) {
      logLines.push(
        `–ü—Ä–æ–≤–µ—Ä–µ–Ω [${catName}${
          settings.cleaningLogShowID ? ` ${catId}` : ""
        }] –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}"`
      );
    } else {
      logLines.push(
        `–ö–æ—Ç –Ω–µ —Å–ø–∏—Ç [${catName}${
          settings.cleaningLogShowID ? ` ${catId}` : ""
        }]`
      );
    }
    if (!catNamesAndIds.some(cat => cat.id === catId)) {
      catNamesAndIds.push({ name: catName, id: catId });
    }
  }

  function processPutdownAction(logLines, catName, catId, location) {
    const catPattern = new RegExp(
      `\\[${catName}${settings.cleaningLogShowID ? ` ${catId}` : ""}\\]`
    );
  
    // 1. –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    const lastSentenceIndex = logLines.length - 1;
    const penultimateSentenceIndex = lastSentenceIndex - 1;
  
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "–û–ø—É—â–µ–Ω" –±–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ –∏–º–µ–Ω–∏ –∫–æ—Ç–∞.
    const lastSentence = logLines[lastSentenceIndex];
  
    if (
      lastSentence.includes(`–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}"`) &&
      lastSentence.includes("–û–ø—É—â–µ–Ω")
    ) {
      const catNamesMatch = lastSentence.match(/\[([^\]]+)\]/);
      if (catNamesMatch) {
        const catNames = catNamesMatch[1].split(",").map((name) => name.trim());
        const currentCatNameWithId = `${catName}${
          settings.cleaningLogShowID ? ` ${catId}` : ""
        }`;
        if (catNames.includes(currentCatNameWithId)) {
          return;
        }
      }
    }
  
    // 3. –ï—Å–ª–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—Ç–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é.
    if (
      lastSentence.includes(`–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}"`) &&
      lastSentence.includes("–û–ø—É—â–µ–Ω") &&
      !catPattern.test(lastSentence)
    ) {
      logLines[lastSentenceIndex] = lastSentence.replace(
        /]/,
        `, ${catName}${settings.cleaningLogShowID ? ` ${catId}` : ""}]`
      );
    } else {
      // 4. –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å "–û–ø—É—â–µ–Ω".
      logLines.push(
        `–û–ø—É—â–µ–Ω [${catName}${
          settings.cleaningLogShowID ? ` ${catId}` : ""
        }] –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}"`
      );
    }
    if (!catNamesAndIds.some(cat => cat.id === catId)) {
      catNamesAndIds.push({ name: catName, id: catId });
    }

    const putdownCounter = document.getElementById("uwu-cleaningLog-counter-putdown");
    putdownCounter.textContent = parseInt(putdownCounter.textContent) + 1;
  }

  function processPickupAction(logLines, catName, catId, location) {
    const catPattern = new RegExp(
      `\\[${catName}${settings.cleaningLogShowID ? ` ${catId}` : ""}\\]`
    );

    // 1. –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    const lastSentenceIndex = logLines.length - 1;
    const penultimateSentenceIndex = lastSentenceIndex - 1;

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥–Ω—è—Ç" —Å –∏–º–µ–Ω–µ–º –∫–æ—Ç–∞.
    const lastSentence = logLines[lastSentenceIndex];
    if (
      lastSentence.includes(`–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}"`) &&
      lastSentence.includes("–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥–Ω—è—Ç") &&
      catPattern.test(lastSentence)
    ) {
      return;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–µ–Ω" —Å –∏–º–µ–Ω–µ–º –∫–æ—Ç–∞.
    let lastSentenceChecked = false;
    if (
      logLines[lastSentenceIndex].includes("–ü—Ä–æ–≤–µ—Ä–µ–Ω") &&
      logLines[lastSentenceIndex].includes(
        `[${catName}${settings.cleaningLogShowID ? ` ${catId}` : ""}]`
      ) &&
      logLines[lastSentenceIndex].includes(`–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}"`)
    ) {
      lastSentenceChecked = true;
    }

    // 4. –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - "–ü—Ä–æ–≤–µ—Ä–µ–Ω", –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞ "–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥–Ω—è—Ç".
    if (lastSentenceChecked) {
      if (
        penultimateSentenceIndex >= 0 &&
        logLines[penultimateSentenceIndex].includes("–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥–Ω—è—Ç") &&
        logLines[penultimateSentenceIndex].includes(
          `–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ "${location}"`
        ) &&
        !logLines[penultimateSentenceIndex].includes(
          `[${catName}${settings.cleaningLogShowID ? ` ${catId}` : ""}]`
        )
      ) {
        const currentCatMatch = logLines[lastSentenceIndex].match(/\[(.*?)\]/);
        if (currentCatMatch) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—Ç–∞ –∫ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é.
          const existingCatsMatch =
            logLines[penultimateSentenceIndex].match(/\[(.*?)\]/);
          if (existingCatsMatch) {
            const existingCats = existingCatsMatch[1];
            const newCatString = existingCats.trim()
              ? `${existingCats}, ${catName}${
                  settings.cleaningLogShowID ? ` ${catId}` : ""
                }`
              : `${catName}${settings.cleaningLogShowID ? ` ${catId}` : ""}`;
            logLines[penultimateSentenceIndex] = logLines[
              penultimateSentenceIndex
            ].replace(/\[(.*?)\]/, `[${newCatString}]`);
          }

          // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
          logLines.splice(lastSentenceIndex, 1);
        }
      } else {
        // 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥–Ω—è—Ç".
        logLines[lastSentenceIndex] = logLines[lastSentenceIndex].replace(
          "–ü—Ä–æ–≤–µ—Ä–µ–Ω",
          "–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø–æ–¥–Ω—è—Ç"
        );
      }
    } else {
      // 6. –ï—Å–ª–∏ "–ü—Ä–æ–≤–µ—Ä–µ–Ω" —Å –∏–º–µ–Ω–µ–º –∫–æ—Ç–∞ –Ω–µ—Ç.
      if (logLines[lastSentenceIndex].includes("–ö–æ—Ç –Ω–µ —Å–ø–∏—Ç")) {
        logLines[lastSentenceIndex] = "–í—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ç–∞";
      } else if (
        !logLines[lastSentenceIndex].includes("–í—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ç–∞")
      ) {
        logLines.push("–í—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ç–∞");
      }
    }
    if (!catNamesAndIds.some(cat => cat.id === catId)) {
      catNamesAndIds.push({ name: catName, id: catId });
    }

    const pickupCounter = document.getElementById("uwu-cleaningLog-counter-pickup");
    pickupCounter.textContent = parseInt(pickupCounter.textContent) + 1;
  }

  function processUnmatchedAction(logLines, cleaningLogContent, action) {
    const lastLogIndex = logLines.length - 1;
  
    const isCancelAction = /–û—Ç–º–µ–Ω–∏–ª(–∞)? /.test(action);
  
    if (
      lastLogIndex >= 0 &&
      logLines[lastLogIndex].includes("–ü—Ä–æ–≤–µ—Ä–µ–Ω [") &&
      !isCancelAction
    ) {
      logLines.splice(lastLogIndex, 1);
      cleaningLogBuffer =
        logLines.join(". ") + (logLines.length > 0 ? "." : "");
      cleaningLogContent.innerHTML = addCatLinksToLog(
        cleaningLogBuffer,
        catNamesAndIds
      );
    }
  }

  if (settings.cleaningLog) {
    setupMutationObserver("#history_block", cleaningLogUpdate, {
      childList: true,
      subtree: true,
    });

    const cleaningLogStyle = document.createElement("style");
    cleaningLogStyle.innerHTML = `
          #uwu-cleaningLog-content {
            height: ${settings.cleaningLogHeight || 120}px;
            overflow-y: auto;
            resize: vertical;
          }
          `;
    document.head.appendChild(cleaningLogStyle);
  }
  // ====================================================================================================================
  //   . . . –ó–í–£–ö–û–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø . . .
  // ====================================================================================================================
  // –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É
  // ====================================================================================================================
  //   . . . –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø . . .
  // ====================================================================================================================
  let previousCount = 0;

  if (settings.notificationPM) {
    const newlsElement = document.getElementById("newls");
    if (newlsElement) {
      const observer = new MutationObserver(handleNewlsChange);
      observer.observe(newlsElement, {
        characterData: true,
        subtree: true,
      });
    }

    function handleNewlsChange(mutations) {
      if (mutations.length > 0) {
        const currentText = newlsElement.textContent;
        const currentCount = parseInt(
          currentText.match(/\(\d+\)/)?.[0].slice(1, -1) || 0,
          10
        );

        if (!isNaN(currentCount) && currentCount > previousCount) {
          soundManager.playSound(
            "notificationSound1",
            settings.notificationMyNameVolume
          );
          previousCount = currentCount;
        } else if (!isNaN(currentCount)) {
          previousCount = currentCount;
        }
      }
    }
  }
  // ====================================================================================================================
  //   . . . –û–ö–û–ù–ß–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø . . .
  // ====================================================================================================================
  if (settings.notificationActionEnd) {
    const blockMess = document.getElementById("block_mess");
    let wasBlockMessEmpty = blockMess.innerHTML.trim() === "";
    let actionStartTime = null;

    const observer = new MutationObserver(() => {
      const isBlockMessEmptyNow = blockMess.innerHTML.trim() === "";

      if (!isBlockMessEmptyNow && !actionStartTime) {
        actionStartTime = Date.now();
      } else if (isBlockMessEmptyNow && actionStartTime) {
        const actionEndTime = Date.now();
        const actionDuration = actionEndTime - actionStartTime;

        if (actionDuration >= 6000) {
          soundManager.playSound(
            "notificationSound3",
            settings.notificationMyNameVolume
          );
        }
        actionStartTime = null;
      }

      wasBlockMessEmpty = isBlockMessEmptyNow;
    });

    observer.observe(blockMess, { childList: true, subtree: true });
  }
  // ====================================================================================================================
  //   . . . –ü–û–î–ù–Ø–õ–ò –í –†–û–¢ . . .
  // ====================================================================================================================
  if (settings.notificationInMouth) {
    const blockMess = document.getElementById("block_mess");

    const observer = new MutationObserver(() => {
      if (blockMess.innerHTML.includes("–≤–æ —Ä—Ç—É. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å—Å—è")) {
        soundManager.playSound(
          "notificationSound1",
          settings.notificationMyNameVolume
        );
      }
    });

    observer.observe(blockMess, { childList: true, subtree: true });
  }
  // ====================================================================================================================
  //   . . . –í–í–ï–õ–ò –í –ë–û–ï–í–£–Æ –°–¢–û–ô–ö–£ . . .
  // ====================================================================================================================
  if (settings.notificationInFightMode) {
    const attackRegex = /–≤ –±–æ–µ–≤—É—é —Å—Ç–æ–π–∫—É, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞ –º–µ–Ω—è –Ω–∞–ø–∞–ª/;
    let previousHistory = "";

    const updateHistory = () => {
      const istElement = document.getElementById("ist");
      const currentHistory = istElement.innerHTML;

      if (currentHistory !== previousHistory) {
        previousHistory = currentHistory;

        const entries = currentHistory.split(".");
        const lastEntry = entries[entries.length - 2];

        if (lastEntry !== undefined && attackRegex.test(lastEntry)) {
          soundManager.playSound(
            "notificationSound1",
            settings.notificationMyNameVolume
          );
        }
      }
    };

    const historyBlock = document.getElementById("history_block");
    const observer = new MutationObserver(() => {
      updateHistory();
    });

    const config = {
      childList: true,
      subtree: true,
      characterData: true,
    };
    observer.observe(historyBlock, config);
  }
  // ====================================================================================================================
  // –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É –º—è—É
  // ====================================================================================================================
  //   . . . –°–û–í–†–ï–ú–ï–ù–ù–´–ô (–ù–û–í–´–ô) –ß–ê–¢ . . .
  // ====================================================================================================================
  // —è –Ω–∞ —ç—Ç–æ–º –∏–Ω–≤–∞–ª–∏–¥–µ –ø–æ—Ç–µ—Ä—è–ª –≤—Å–µ –Ω–µ—Ä–≤—ã –∫–µ—Ç–≤–∞—Ä –∂–µ–ª–∞—é —Ç–µ–±–µ —Å—á–∞—Å—Ç—å—è —É–¥–∞—á–∏ –∏ –≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ üòåüòåüòåüòåüòåüòåüòåüòåüòåüòå
  // –ò –î–û –°–ò–• –ü–û–† –¢–ï–†–Ø–Æ –ê–ê–ê–ê–ê
  // TODO - –∫–∞–∫-—Ç–æ –ø—Ä–µ–¥–µ–ª–∞—Ç—å —à–æ–ª–µ
  if (settings.newChat) {
    const newChatContainer = document.createElement("div");
    newChatContainer.id = "uwu_chat_msg";
    const chatForm = document.getElementById("chat_form");
    chatForm.parentNode.insertBefore(newChatContainer, chatForm.nextSibling);

    newChatContainer.addEventListener("click", function (event) {
      const target = event.target;

      const nickElement = target.closest(".nick");
      if (nickElement) {
        const textArea = document.getElementById("text");
        textArea.value += nickElement.textContent;
        textArea.focus();
        return;
      }

      const reportButton = target.closest(".msg_report");
      if (reportButton) {
        const dataId = reportButton.getAttribute("data-id");
        const originalReportLink = document.querySelector(
          `#chat_msg .msg_report[data-id="${dataId}"]`
        );
        if (originalReportLink) {
          originalReportLink.click();
        }
        return;
      }
    });

    const chatElement = document.getElementById("chat_msg");
    if (chatElement) {
      const observer = new MutationObserver(handleNewChatMessage);
      observer.observe(chatElement, { childList: true, subtree: true });
    }

    let addedSpanCount = 0;

    function handleNewChatMessage(mutations) {
      const addedNodes = Array.from(mutations)
        .flatMap((mutation) => Array.from(mutation.addedNodes))
        .filter(
          (node) =>
            node.nodeName === "SPAN" && node.querySelector("td > .chat_text")
        );

      addedSpanCount += addedNodes.length;
      processChatMessages(addedSpanCount);
      addedSpanCount = 0;
    }

    function processChatMessages(messageCount) {
      const chatMessages = document.querySelectorAll("#chat_msg > span");
      const messagesArray = Array.from(chatMessages);
      const messagesToProcess = messagesArray.slice(0, messageCount);
      messagesToProcess.reverse();

      messagesToProcess.forEach((message) => {
        copyMessageToNewChat(message);
      });
    }

    function copyMessageToNewChat(chatMessage) {
      const chatTextSpan = chatMessage.querySelector("td > .chat_text");
      const messageSpan = chatTextSpan.querySelector("span");
      const messageText = messageSpan ? messageSpan.innerHTML : "";
      const nickElement = chatTextSpan.querySelector(".nick");
      const nickName = nickElement ? nickElement.textContent.trim() : "";
      const chatTextClasses = chatTextSpan.className;
      const nickStyle = nickElement ? nickElement.getAttribute("style") : "";
      let nameFound = false;

      let processedText = messageText;

      if (settings.namesForNotification) {
        const names = settings.namesForNotification
          .trim()
          .split(/\s*,\s*/)
          .filter((name) => name);

        names.forEach((name) => {
          const regex = new RegExp(
            `(^|\\s|[.,!?])(${name})(?=$|\\s|[.,!?])`,
            "gi"
          );
          processedText = processedText.replace(regex, (match, p1, p2) => {
            nameFound = true;
            return `${p1}<span class="myname">${p2}</span>`;
          });
        });
      }

      if (!nameFound && messageSpan && messageSpan.querySelector(".myname")) {
        nameFound = true;
      }

      if (nameFound) {
        soundManager.playSound(
          settings.myNameNotificationSound,
          settings.notificationMyNameVolume
        );
      }

      const profileLink = chatMessage.querySelector('a[href^="/cat"]').href;
      const catIdMatch = profileLink.match(/\/cat(\d+)/);
      const catId = catIdMatch ? catIdMatch[1] : ". . .";

      const reportLink = chatMessage.querySelector(".msg_report");
      const dataId = reportLink ? reportLink.getAttribute("data-id") : "";

      const newChatMessageHTML = // html
      `
        <hr>
        <div id="msg">
          <div class="${chatTextClasses}">${processedText} - <b class="nick" style="${nickStyle}">${nickName}</b> <i>[${catId}]</i></div>
          <div style="display: flex; width: 42px; justify-content: flex-end; margin-right: 2px;">
            <a href="${profileLink}" title="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å" target="_blank" rel="noopener noreferrer">‚ûù</a>&nbsp;|&nbsp;
            <a href="#" title="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –û–ü–ò" class="msg_report" data-id="${dataId}">X</a>
          </div>
        </div>
      `;
      newChatContainer.insertAdjacentHTML("afterbegin", newChatMessageHTML);
    }

    const uwuChatMsg = document.createElement("style");
    uwuChatMsg.innerHTML = `
        #uwu_chat_msg {
          height: ${settings.chatHeight}px;
          resize: vertical;
          overflow-y: auto;
          display: flex;
          flex-direction: ${settings.reverseChat ? "column-reverse" : "column"};
        }
  
        #chat_msg {
          display: none;
        }
  
        #msg {
          display: flex;
          justify-content: space-between;
        }

        #uwu_chat_msg > hr {
          width: -webkit-fill-available;
        }
     `;
    document.head.appendChild(uwuChatMsg);
  }
  // ====================================================================================================================
  //   . . . –ù–û–í–´–ô –í–í–û–î –ß–ê–¢–ê . . .
  // ====================================================================================================================
  const chatForm = document.getElementById("chat_form");
  const trChatTd = document.querySelector("#tr_chat > td");

  function updateChatFormPosition() {
    if (settings.reverseChat) {
      trChatTd.appendChild(chatForm);
    } else {
      trChatTd.prepend(chatForm);
    }
  }
  updateChatFormPosition();

  if (settings.newChatInput) {
    const txtSpan = document.getElementById("txt");
    const selectField = txtSpan.querySelector("select#text");

    let textarea;

    function initTextarea(id, value) {
      const textarea = document.createElement("textarea");
      textarea.id = id;
      textarea.maxLength = 255;
      textarea.style.height = "auto";
      textarea.style.width = "100%";
      textarea.style.resize = "vertical";
      textarea.value = value || "";
      return textarea;
    }

    if (selectField) {
      textarea =
        document.getElementById("text-hide") || initTextarea("text-hide");
      textarea.style.display = "none";
    } else {
      const inputField = txtSpan.querySelector("input#text");

      textarea = initTextarea("text", inputField ? inputField.value : "");
      txtSpan.insertBefore(textarea, inputField);
    }

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          const selectField = txtSpan.querySelector("select#text");
          if (selectField) {
            textarea.style.display = "none";
            textarea.id = "text-hide";
          } else {
            textarea.style.display = "";
            textarea.id = "text";
          }
        }
      });
    });

    observer.observe(txtSpan, { childList: true });

    // Make Enter great again!
    textarea.addEventListener("keydown", function (event) {
      if (event.key === "Enter") {
        if (event.shiftKey) {
          event.preventDefault();
          textarea.value += "\n";
        } else {
          event.preventDefault();
          const sendButton = document.getElementById("msg_send");
          sendButton.click();
        }
      }
    });

    const NewChatDesign = document.createElement("style");
    NewChatDesign.innerHTML = `
  input#text {
    display: none;
  }

  #text, #text-hide {
    color: ${theme?.textColor};
    background: ${theme?.accentColor1};
    border: solid 1px ${theme?.accentColor2};
    font-family: Verdana;
  }
`;
    document.head.appendChild(NewChatDesign);
  }
  // ====================================================================================================================
  //   . . . –†–ï–î–ò–ó–ê–ô–ù–´ + + –ó–ê–ö–†–£–ì–õ–ï–ù–ò–ï –ë–õ–û–ö–û–í . . .
  // ====================================================================================================================
  const sliceInfoStyle = document.createElement("style");

  if (settings.sliceInfoBlock) {
    sliceInfoStyle.innerHTML = `
      #info_main > tbody > tr > td {
        background-color: ${theme?.blocksColor || ""};
        margin-bottom: 5px;
      }
    `;
    document.head.appendChild(sliceInfoStyle);
  } else {
    sliceInfoStyle.innerHTML = `
      #tr_info > td {
        background-color: ${theme?.blocksColor || ""};
      }
    `;
    document.head.appendChild(sliceInfoStyle);
  }

  const edgeTrimBlocksStyle = document.createElement("style");
  if (settings.edgeTrimBlocks) {
    edgeTrimBlocksStyle.innerHTML = // css
    `
    #info_main > tbody > tr > td {
      width: fit-content;
      border-radius: 10px;
      margin-bottom: 10px;
    }
    
    #info_main,
    #tos,
    #cages_overflow,
    #cages_div {
      border-radius: 10px;
    }
    
    #main_table > tbody > #tr_actions,
    #main_table > tbody > #tr_mouth,
    #main_table > tbody > #tr_chat,
    #main_table > tbody > #tr_tos,
    #main_table > tbody > #tr_info {
      margin: 0px 10px 10px 10px;
    }
    
    #tr_chat,
    #tr_actions > td,
    #tr_mouth > td,
    #location,
    .small,
    #tr_info > td {
      border-radius: 10px;
    }
    `;
    document.head.appendChild(edgeTrimBlocksStyle);
  }
  // ====================================================================================================================
  //  . . . –ö–û–ú–ê–ù–î–´ –í –ë–û–ï–í–û–ú –†–ï–ñ–ò–ú–ï . . .
  // ====================================================================================================================
  if (settings.fightTeams) {
    const colors = settings.fightTeamsColors;
    const uwu_fightTeamsCats = JSON.parse(localStorage.getItem('uwu_fightTeamsCats')) || {};
  
    const fightPanel = document.getElementById("fightPanel");
    const buttonHTML =
      '<button id="updateTableButton" style="width: 100%;">–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã</button>';
    fightPanel.insertAdjacentHTML("beforeend", buttonHTML);
  
    document.getElementById("updateTableButton").onclick = () => {
      if (!document.getElementById("uwu-team-settings")) {
        createTeamTable();
      }
      updateTeamTable();
    };
  
    function createTeamTable() {
      const tableHTML = // html
      `
        <div id="uwu-team-settings" style="height: ${
          settings.fightTeamsPanelHight || "auto"
        }px; overflow-y: scroll; resize: vertical;">
          <table id="uwu-team-settings-table" style="width: 100%; border-collapse: collapse;">
            <thead>
              <tr>
                <th style="border: 1px solid #000; padding: 5px;">–ò–º—è</th>
                <th style="border: 1px solid #000; padding: 5px;">–ö–æ–º–∞–Ω–¥–∞</th>
              </tr>
            </thead>
            <tbody id="teamTableBody"></tbody>
          </table>
        </div>
      `;
      const updateButton = document.getElementById("updateTableButton");
      updateButton.insertAdjacentHTML("beforebegin", tableHTML);
    }
  
    function updateTeamTable() {
      const tbody = document.getElementById("teamTableBody");
      tbody.innerHTML = "";
      const cages = document.querySelectorAll("#cages .cage");
    
      cages.forEach((cage) => {
        const catName = cage.querySelector(".cat_tooltip a")?.textContent;
        const arrow = cage.querySelector(".arrow.arrow-paws");
    
        if (catName && arrow) {
          const arrowId = arrow.id;
          const savedTeam = uwu_fightTeamsCats[arrowId];
    
          const buttonsHTML = Object.keys(colors)
            .map((team) => {
              const isSelected = savedTeam === team ? 'selected' : '';
              return `
                <button 
                  class="team-color-button ${isSelected}"
                  data-arrow-id="${arrowId}"
                  data-team="${team}"
                  style="background-color: ${colors[team][0]}; width: 21%; height: 16px;"
                ></button>
              `;
            })
            .join("");
    
          const rowHTML = `
            <tr>
              <td style="border: 1px solid #000; padding: 5px;">${catName}</td>
              <td style="border: 1px solid #000; padding: 5px;">${buttonsHTML}</td>
            </tr>
          `;
          tbody.insertAdjacentHTML("beforeend", rowHTML);
    
          if (savedTeam) {
            applyTeamColors(arrowId, savedTeam);
          }
        }
      });
    
      const teamColorButtons = document.querySelectorAll('.team-color-button');
      teamColorButtons.forEach(button => {
        button.addEventListener('click', () => {
          const arrowId = button.getAttribute('data-arrow-id');
          const team = button.getAttribute('data-team');
          applyTeamColors(arrowId, team);
        });
      });
    }
  
    function applyTeamColors(arrowId, team) {
      const styleElement = document.createElement('style');
      const cssRule = `
        #${arrowId} .arrow_green { background-color: ${colors[team][0]} !important; }
        #${arrowId} .arrow_red { background-color: ${colors[team][1]} !important; }
      `;
      styleElement.appendChild(document.createTextNode(cssRule));
      document.head.appendChild(styleElement);
    
      uwu_fightTeamsCats[arrowId] = team;
      localStorage.setItem('uwu_fightTeamsCats', JSON.stringify(uwu_fightTeamsCats));
    }
  }
  // ====================================================================================================================
  //   . . . –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–ï –ü–ê–ù–ï–õ–ò –ë–û–ï–í–û–ì–û –†–ï–ñ–ò–ú–ê . . .
  // ====================================================================================================================
  if (settings.draggingFightPanel) {
    const dragDiv = document.createElement("div");
    dragDiv.style.cursor = "move";
    dragDiv.style.display = "inline-block";

    const dragImage = document.createElement("img");
    dragImage.src =
      "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/drag-move.png";
    dragImage.style.width = "24px";
    dragImage.style.height = "24px";
    dragImage.style.pointerEvents = "none";
    dragDiv.appendChild(dragImage);

    const fightPanel = document.getElementById("fightPanel");
    const firstImage = fightPanel.querySelector("img");
    fightPanel.insertBefore(dragDiv, firstImage);

    let mouseX = 0;
    let mouseY = 0;
    let panelX = 0;
    let panelY = 0;
    let isDragging = false;

    function saveFightPanelPosition(x, y) {
      localStorage.setItem("uwu_fightPanelPosition", JSON.stringify({ x, y }));
    }

    function loadFightPanelPosition() {
      const savedPosition = localStorage.getItem("uwu_fightPanelPosition");
      if (savedPosition) {
        const position = JSON.parse(savedPosition);
        panelX = position.x;
        panelY = position.y;
      }
    }

    function setFightPanelPosition(x, y) {
      const windowWidth = window.innerWidth;
      const windowHeight = window.innerHeight;
      const panelWidth = fightPanel.offsetWidth;
      const panelHeight = fightPanel.offsetHeight;

      const maxX = windowWidth - panelWidth;
      x = Math.max(0, Math.min(x, maxX));

      const maxY = windowHeight - panelHeight;
      y = Math.max(0, Math.min(y, maxY));

      fightPanel.style.left = `${x}px`;
      fightPanel.style.top = `${y}px`;

      saveFightPanelPosition(x, y);
    }

    dragDiv.addEventListener("mousedown", (e) => {
      e.preventDefault();
      isDragging = true;
      mouseX = e.clientX;
      mouseY = e.clientY;

      loadFightPanelPosition();

      document.body.style.userSelect = "none";
    });

    document.addEventListener("mousemove", (e) => {
      if (isDragging) {
        e.preventDefault();

        const dx = e.clientX - mouseX;
        const dy = e.clientY - mouseY;

        setFightPanelPosition(panelX + dx, panelY + dy);
      }
    });

    document.addEventListener("mouseup", () => {
      isDragging = false;

      document.body.style.userSelect = "auto";
    });

    loadFightPanelPosition();
    setFightPanelPosition(panelX, panelY);
  }
  // ====================================================================================================================
  //   . . . –°–û–ö–†–ê–©–ï–ù–ò–ï –õ–û–ì–ê –ë–û–ï–í–û–ì–û –†–ï–ñ–ò–ú–ê . . .
  // ====================================================================================================================
  // –µ–º–∞–∞–∞–∞–∞ —É–∂–∞—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
  // TODO - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∑–∞–∞–º–æ–≥—É—Å–∏—Ç—å —á—ë –∑–∞ —Ñ–∏–≥–Ω—é —è —Å–¥–µ–ª–∞–ª
  if (settings.compactFightLog) {
    function compactFightLog() {
      const fightLog = document.getElementById("fightLog");
      fightLog.style.display = "none";

      let compactedFightLog = document.getElementById(
        "uwu-Compacted-Fight-Log"
      );
      if (!compactedFightLog) {
        compactedFightLog = document.createElement("div");
        compactedFightLog.id = "uwu-Compacted-Fight-Log";
        compactedFightLog.style.height = settings.fightPanelHeight + "px";
        fightLog.parentNode.insertBefore(compactedFightLog, fightLog);
      }

      const logEntries = Array.from(fightLog.childNodes).filter(
        (entry) => entry.tagName === "SPAN"
      );

      if (logEntries.length > 0) {
        const firstEntry = logEntries[0];
        const text = firstEntry.textContent.trim();
        const match = text.match(/^(.*) x(\d+)$/);
        const originalText = match ? match[1] : text;
        const count = match ? parseInt(match[2], 10) : 1;

        const latestEntry = compactedFightLog.firstElementChild;

        if (latestEntry) {
          const latestTextSpan = latestEntry.querySelector(".text");

          if (
            latestTextSpan &&
            latestTextSpan.textContent.trim() === originalText
          ) {
            const countLabel = latestEntry.querySelector(".count");
            const existingCount = parseInt(
              countLabel.textContent.match(/x(\d+)$/)[1],
              10
            );
            countLabel.textContent = ` x${existingCount + count}`;
          } else {
            const newEntryHTML = createEntryHTML(
              firstEntry.className,
              originalText,
              count
            );
            compactedFightLog.insertAdjacentHTML("afterbegin", newEntryHTML);
          }
        } else {
          const newEntryHTML = createEntryHTML(
            firstEntry.className,
            originalText,
            count
          );
          compactedFightLog.insertAdjacentHTML("afterbegin", newEntryHTML);
        }

        fightLog.removeChild(firstEntry);
      }
    }

    function createEntryHTML(className, originalText, count) {
      return `
        <div class="${className}">
          <span class="text">${originalText}</span>
          <label class="count"> x${count}</label>
        </div>
      `;
    }

    setupMutationObserver(
      "#fightLog",
      compactFightLog,
      {
        attributes: true,
        childList: true,
      },
      8,
      500,
      10
    );
  }
  // ====================================================================================================================
  //   . . . –ò–ó–ú–ï–ù–Ø–ï–ú–ê–Ø –í–´–°–û–¢–ê –ü–ê–ù–ï–õ–ò –ë–û–ï–í–û–ì–û –†–ï–ñ–ò–ú–ê . . .
  // ====================================================================================================================
  if (settings.fightPanelAdjustableHeight) {
    const uwuFightLog = document.createElement("style");
    uwuFightLog.innerHTML = `
      #fightPanel {
        height: auto;
      }

      #fightLog {
        resize: vertical;
        overflow-y: scroll;
      }
      
      #uwu-Compacted-Fight-Log {
        resize: vertical;
        overflow-y: scroll;
      } 
      `;
    document.head.appendChild(uwuFightLog);

    const fightLogElement = document.getElementById("fightLog");
    if (fightLogElement) {
        fightLogElement.style.height = `${settings.fightPanelHeight || 70}px`;
    }
  }
  // ====================================================================================================================
  //   . . . –í–°–ï–ì–î–ê –î–ï–ù–¨ –í –ò–ì–†–û–í–û–ô . . .
  // ====================================================================================================================
  // –í–æ—Ç –±—ã –≤—Å—ë –ø–∏—Å–∞–ª–æ—Å—å —Ç–∞–∫ –∫—Ä–∞—Ç–∫–æ –∏ –ª–µ–≥–∫–æ...........
  function updateAlwaysDayStyle(checked) {
    const alwaysDayStyle = `
      #cages_div {
        opacity: 1 !important;
      }   
    `;

    const styles = document.head.querySelectorAll("style");
    let styleFound = false;

    styles.forEach((style) => {
      if (style.innerHTML === alwaysDayStyle) {
        if (!checked) {
          document.head.removeChild(style);
        }
        styleFound = true;
      }
    });

    if (checked && !styleFound) {
      const alwaysDay = document.createElement("style");
      alwaysDay.innerHTML = alwaysDayStyle;
      document.head.appendChild(alwaysDay);
    }
  }
  // ====================================================================================================================
  //   . . . –ù–ï–ë–û - –®–ê–ü–ö–ê . . .
  // ====================================================================================================================
  if (settings.skyInHeader) {
    function getSkyUrl() {
      const skyElement = document.querySelector("#sky");
      if (skyElement) {
        const skyStyle = skyElement.getAttribute("style");
        const match = skyStyle.match(/url\((.*?)\)/);
        if (match) {
          return match[1].trim();
        } else {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–±–∞");
        }
      }
      return "";
    }

    const skyDiv = document.createElement("div");
    skyDiv.id = "skyDuplicate";

    const globalContainerElement = document.getElementById(
      "uwu-global-container"
    );
    globalContainerElement.appendChild(skyDiv);

    const skyStyle = document.createElement("style");
    skyStyle.innerHTML = `
      #skyDuplicate {
        height: 15%;
        width: 100%;
        mask-image: linear-gradient(to bottom, 
          rgba(0, 0, 0, 1), 
          rgba(0, 0, 0, 0.40) 50%,
          rgba(0, 0, 0, 0)
        );
        top: 0;
        left: 0;
        z-index: -1;
        position: absolute;
        background-size: cover;
      }
    `;
    document.head.appendChild(skyStyle);

    const originalSkyStyle = document.createElement("style");
    originalSkyStyle.innerHTML = `
      #tr_sky {
        display: none;
      }
    `;
    document.head.appendChild(originalSkyStyle);

    function updateSkyImage() {
      const skyUrl = getSkyUrl();
      if (skyUrl) {
        skyDiv.style.backgroundImage = `url(${skyUrl})`;
      }
    }

    updateSkyImage();

    setupMutationObserver(
      "#sky",
      updateSkyImage,
      { attributes: true, attributeFilter: ["style"] },
      8,
      500,
      10
    );
  }
  // ====================================================================================================================
  //   . . . –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û–ì–û–î–´ –í –ò–ì–†–û–í–û–ô . . . üõ†Ô∏è
  // ====================================================================================================================
  let currentWeather = "null";
  let currentHour = "null";
  let currentSeason = "null";
  let currentTemperature = "null";
  let temperatureDescription = "null";
  // –∞—Ö–∞—Ö–∞—Ö–∞ –≥–ª—è–Ω—å–µ –Ω–∞ —ç—Ç–∏—Ö –Ω–µ–∑–Ω–∞—é—â–∏—Ö
  let weatherModifier = 1;

  if (settings.manualWeatherPanel) {
    const manualWeatherSlider = document.getElementById("manualWeather");

    manualWeatherSlider.addEventListener("change", () => {
      const selectedWeather = manualWeatherSlider.value;

      if (selectedWeather === "1") {
        currentWeather = "clear";
      } else if (selectedWeather === "2") {
        if (settings.minecraftStyle) {
          currentWeather = "pixelRain";
        } else {
          currentWeather = "rain";
        }
      } else if (selectedWeather === "3") {
        if (settings.minecraftStyle) {
          currentWeather = "pixelSnow";
        } else {
          currentWeather = "snow";
        }
      }
    });
  }

  function getSkyType() {
    const skyElement = document.querySelector("#sky");
    const skyStyle = skyElement.getAttribute("style");

    if (settings.weatherEnabled) {
      const match = skyStyle.match(/\/(\d+)\.png/);
      if (match) {
        const skyNumber = parseInt(match[1]);

        switch (skyNumber) {
          case 2:
          case 4:
            if (settings.minecraftStyle) {
              currentWeather = "pixelRain";
            } else {
              currentWeather = "rain";
            }
            break;
          case 7:
          case 8:
            if (settings.minecraftStyle) {
              currentWeather = "pixelSnow";
            } else {
              currentWeather = "snow";
            }
            break;
          case 22:
            currentWeather = "northernLights";
            break;
          default:
            currentWeather = "clear";
        }
      } else {
        console.log("–ü–æ—Ç–µ—Ä—è–ª –Ω–µ–±–æ, –Ω–µ–±–æ –Ω–∞–π–¥–∏—Å—å –ø–∂...");
        currentWeather = "unknown";
      }
    }
  }

  function getTime() {
    const timeElement = document.querySelector("#hour");
    const hourTime = timeElement.querySelector("img").getAttribute("src");

    if (settings.weatherEnabled) {
      const hourNumber = parseInt(hourTime.match(/(\d+)\.png$/)[1]);

      if (hourNumber >= 6 && hourNumber <= 12) {
        currentHour = "morning";
      } else if (hourNumber >= 13 && hourNumber <= 18) {
        currentHour = "day";
      } else if (hourNumber >= 19 && hourNumber <= 21) {
        currentHour = "evening";
      } else {
        currentHour = "night";
      }
      // console.log("–¢–µ–∫—É—â–∏–π —á–∞—Å:", hourNumber);
    }
  }

  function getSeason() {
    const seasonElement = document.querySelector("img[src*='symbole/season']");
    const seasonSrc = seasonElement.getAttribute("src");
    const match = seasonSrc.match(/season(\d+)\.png/);

    if (match) {
      const seasonNumber = parseInt(match[1]);
      switch (seasonNumber) {
        case 0:
          currentSeason = "winter";
          break;
        case 1:
          currentSeason = "spring";
          break;
        case 2:
          currentSeason = "summer";
          break;
        case 3:
          currentSeason = "autumn";
          break;
      }
      // console.log("–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω:", currentSeason);
    }
  }

  function getTemperature() {
    const temperatureElement = document.querySelector("#tos");
    const temperatureElementHTML = temperatureElement.outerHTML;
    const backgroundValue = /background:\s*([a-zA-Z0-9#()]+);/.exec(
      temperatureElementHTML
    );

    if (backgroundValue && backgroundValue.length > 1) {
      const foundBackground = backgroundValue[1];

      const temperatureRanges = [
        {
          description: "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ",
          temperature: -3,
          colors: [
            "#94BDD2",
            "#9DC5D8",
            "#B2D8E5",
            "#C3E8EF",
            "#AED4E2",
            "#AAD1E0",
            "#A5CDDD",
          ],
        },
        {
          description: "–•–æ–ª–æ–¥–Ω–æ",
          temperature: -2,
          colors: [
            "#7FAAC5",
            "#76A2C0",
            "#6A96B8",
            "#6593B6",
            "#618FB3",
            "#7BA6C3",
          ],
        },
        {
          description: "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ",
          temperature: -1,
          colors: [
            "#3B6C9B",
            "#4C7BA6",
            "#5887AE",
            "#5D8BB0",
            "#4777A3",
            "#366899",
            "#3F709E",
            "#4374A1",
            "#5483AB",
          ],
        },
        {
          description: "–¢–µ–ø–ª–æ",
          temperature: 1,
          colors: ["#FCBD8E", "#F8A37A", "#F79E77", "#FDC291", "#FCB88A"],
        },
        {
          description: "–ñ–∞—Ä–∫–æ–≤–∞—Ç–æ",
          temperature: 2,
          colors: [
            "#F79973",
            "#F6946F",
            "#F58F6B",
            "#F28060",
            "#F38563",
            "#F17A5C",
            "#EF6B50",
            "#F07054",
          ],
        },
        {
          description: "–ñ–∞—Ä–∫–æ",
          temperature: 3,
          colors: [
            "#EE664D",
            "#ED6149",
            "#EB5741",
            "#EB523D",
            "#E73D2E",
            "#E6382A",
          ],
        },
        {
          description: "–ó–∞—Å—É—Ö–∞",
          temperature: 4,
          colors: ["#DF0A08", "#E3241B", "#E4291F", "#E52E22", "#E63326"],
        },
      ];

      let foundTemperature = null;

      for (const range of temperatureRanges) {
        if (range.colors.includes(foundBackground)) {
          foundTemperature = range;
          break;
        }
      }

      if (foundTemperature) {
        currentTemperature = foundTemperature.temperature;
        temperatureDescription = foundTemperature.description;
      } else {
        currentTemperature = 1;
        temperatureDescription =
          "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø—É—Å—Ç–∏—Ç –ø—Ä–∞–≤–∫—É.";
        console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", foundBackground);
      }

      switch (currentTemperature) {
        case 1:
        case -1:
          weatherModifier = 2;
          break;
        case 2:
        case -2:
          weatherModifier = 1.5;
          break;
        case 3:
        case -3:
          weatherModifier = 1;
          break;
        default:
          weatherModifier = 1;
      }

      // console.log("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", currentTemperature);

      const temperatureDisplayElement = document.getElementById("temperature");
      if (temperatureDisplayElement) {
        temperatureDisplayElement.innerHTML = `[?] –¢–µ–∫—É—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${weatherModifier} (${temperatureDescription})`;
      }
    } else {
      console.log("...—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Ç–µ—Ä—è–ª –±–µ–∫–≥—Ä–∞—É–Ω–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ãüå°Ô∏è...");
    }
  }
  // ====================================================================================================================
  if (!settings.manualWeatherPanel) {
    setupMutationObserver("#sky", getSkyType);

    setupMutationObserver("#hour", getTime, {
      attributes: true,
      attributeFilter: ["src"],
      subtree: true,
    });

    setupMutationObserver("img[src*='symbole/season']", getSeason, {
      attributes: true,
      attributeFilter: ["src"],
    });
  }

  setupMutationObserver("#tos", getTemperature, {
    attributes: true,
    subtree: true,
  });
  // ====================================================================================================================
  //   . . . –ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í / –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô . . . üñºÔ∏è
  // ====================================================================================================================
  const weatherContainer = document.getElementById("uwu-main-container");
  const weatherCanvas = document.createElement("canvas");
  weatherCanvas.classList.add("weatherCanvas");
  weatherContainer.appendChild(weatherCanvas);
  const weatherCtx = weatherCanvas.getContext("2d");

  function resizeCanvasElement() {
    weatherCanvas.width = weatherCanvas.parentNode.offsetWidth;
    weatherCanvas.height = weatherCanvas.parentNode.offsetHeight;
  }

  window.addEventListener("resize", resizeCanvasElement);
  resizeCanvasElement();

  const images = {
    pixelSnow: [
      {
        url: "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/snowflake1.png",
      },
      {
        url: "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/snowflake2.png",
      },
    ],
    pixelRain: [
      {
        url: "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/rain1.png",
      },
      {
        url: "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/rain2.png",
      },
    ],
    pixelSplash: [
      {
        url: "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/splash_0.png",
      },
      {
        url: "https://raw.githubusercontent.com/Ibirtem/CatWar/main/images/splash_1.png",
      },
    ],
    sus: [
      {
        url: "https://firebasestorage.googleapis.com/v0/b/xwx-823ac.appspot.com/o/images%2Ftiny-red-among-us.png?alt=media&token=354b34c6-6297-4a4d-8a73-f36a903170c0",
      },
    ],
  };

  async function loadImages(type) {
    const imagesForType = images[type];
    if (!imagesForType) {
      console.error(`–ß—ë –µ—Ç–∞...?: ${type}`);
      return;
    }

    const promises = [];

    for (const image of imagesForType) {
      promises.push(
        new Promise((resolve, reject) => {
          const img = new Image();
          img.src = image.url;
          img.onload = function () {
            image.image = this;
            resolve();
          };
          img.onerror = function () {
            console.error(`–ß—ë—Ç–∞ –Ω–µ —Å–∫–∞—á–∞–ª–æ—Å—å: ${image.url}`);
            reject();
          };
        })
      );
    }

    await Promise.all(promises);
  }
  loadImages("pixelSnow");
  loadImages("pixelRain");
  loadImages("pixelSplash");
  loadImages("sus");

  const { raindrops } = generateRain();
  const { snowflakes } = generateSnowflakes();
  const { pixelRaindrops } = generatePixelRain();
  const { pixelSnowflakes } = generatePixelSnow();

  // ====================================================================================================================
  //   . . . –†–ï–ñ–ò–ú –ù–ò–ó–ö–û–ô –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò . . .
  // ====================================================================================================================
  // –ú–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –¥–∞–∂–µ –≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–∏–Ω–∞–º–∏—á–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–∞—Å—Ç–∏—Ü.
  var rainNumParticles = 10;
  var snowTimerValue = 120;
  var desiredNumberOfFireflies = 10;

  function setWeatherPerformanceMode() {
    rainNumParticles = settings.lowPerformanceMode ? 4 : 10;
    snowTimerValue = settings.lowPerformanceMode ? 240 : 120;
    desiredNumberOfFireflies = settings.lowPerformanceMode ? 6 : 10;

    return { rainNumParticles, snowTimerValue, desiredNumberOfFireflies };
  }

  setWeatherPerformanceMode();
  // ====================================================================================================================
  //   . . . –î–û–ñ–î–¨ . . . üåßÔ∏è
  // ====================================================================================================================
  function generateRain() {
    const raindrops = [];

    setInterval(() => {
      if (currentWeather === "rain") {
        for (let i = 0; i < rainNumParticles; i++) {
          const raindrop = generateRaindrop();
          if (raindrop) {
            raindrops.push(raindrop);
          }
        }
      }
    }, 80);

    function generateRaindrop() {
      if (document.hidden) {
        return;
      }
      const x = Math.random() * weatherCanvas.width;
      const y = Math.random() * -100;
      const length = (Math.random() * 20 + 40) / weatherModifier;
      const width = (Math.random() * 1 + 1) / weatherModifier;
      const ySpeed = length * 0.2 * weatherModifier;
      const xSpeed = Math.random() * 1;

      return { x, y, length, width, ySpeed, xSpeed };
    }

    return { raindrops };
  }

  function drawRaindrop(raindrop) {
    weatherCtx.beginPath();
    weatherCtx.ellipse(
      raindrop.x,
      raindrop.y,
      raindrop.width,
      raindrop.length,
      0,
      Math.PI,
      2 * Math.PI
    );
    weatherCtx.fillStyle = "rgba(150, 150, 150, 0.4)";
    weatherCtx.fill();
  }
  // ====================================================================================================================
  //   . . . –°–ù–ï–ì . . . üå®Ô∏è
  // ====================================================================================================================
  function generateSnowflakes() {
    const snowflakes = [];
    const snowTimerValue = setWeatherPerformanceMode().snowTimerValue;

    setInterval(() => {
      if (currentWeather === "snow") {
        for (let i = 0; i < 1; i++) {
          const snowflake = generateSnowflake();
          if (snowflake) {
            snowflakes.push(snowflake);
          }
        }
      }
    }, snowTimerValue);

    function generateSnowflake() {
      if (document.hidden) {
        return;
      }
      const y = Math.random() * -100;
      const x = Math.random() * weatherCanvas.width;
      const size = (Math.random() * 5 + 2) / weatherModifier;
      const ySpeed = size * 0.1 * weatherModifier;
      const xSpeed = (Math.random() - Math.random()) * 0.2;
      const opacity = 1;

      return { x, y, size, ySpeed, xSpeed, opacity };
    }

    return { snowflakes };
  }

  function drawSnowflake(x, y, size) {
    weatherCtx.beginPath();
    weatherCtx.ellipse(x, y, size, size, 0, 0, 2 * Math.PI);
    weatherCtx.fillStyle = "white";
    weatherCtx.fill();
  }
  // ====================================================================================================================
  //   . . . –ü–ò–ö–°–ï–õ–¨–ù–´–ô –î–û–ñ–î–¨ . . . üåßÔ∏è
  // ====================================================================================================================
  function generatePixelRain() {
    const pixelRaindrops = [];

    setInterval(() => {
      if (currentWeather === "pixelRain") {
        for (let i = 0; i < rainNumParticles; i++) {
          const pixelRaindrop = generatePixelRaindrop();
          if (pixelRaindrop) {
            pixelRaindrops.push(pixelRaindrop);
          }
        }
      }
    }, 80);

    function generatePixelRaindrop() {
      if (document.hidden) {
        return;
      }
      const x = Math.random() * weatherCanvas.width;
      const y = Math.random() * -100;
      const size = (Math.random() * 26 + 26) / Math.pow(weatherModifier, 0.5);
      const ySpeed = size * 0.2 * Math.pow(weatherModifier, 0.5);
      const xSpeed = Math.random() * 0.2 - 0.1;
      const imageData =
        images.pixelRain[Math.floor(Math.random() * images.pixelRain.length)];
      const image = imageData.image;

      return { x, y, size, ySpeed, xSpeed, image };
    }

    return { pixelRaindrops };
  }

  function drawPixelRaindrop(pixelRaindrop) {
    const imageWidth = pixelRaindrop.image.width;
    const imageHeight = pixelRaindrop.image.height;
    const scaleFactor = pixelRaindrop.size / Math.max(imageWidth, imageHeight);

    weatherCtx.drawImage(
      pixelRaindrop.image,
      pixelRaindrop.x,
      pixelRaindrop.y,
      imageWidth * scaleFactor,
      imageHeight * scaleFactor
    );
  }
  // ====================================================================================================================
  //   . . . –ü–ò–ö–°–ï–õ–¨–ù–´–ô –°–ù–ï–ì . . . üå®Ô∏è
  // ====================================================================================================================
  function generatePixelSnow() {
    const pixelSnowflakes = [];
    const snowTimerValue = setWeatherPerformanceMode().snowTimerValue;

    setInterval(() => {
      if (currentWeather === "pixelSnow") {
        for (let i = 0; i < 1; i++) {
          const pixelSnowflake = generatePixelSnowflake();
          if (pixelSnowflake) {
            pixelSnowflakes.push(pixelSnowflake);
          }
        }
      }
    }, snowTimerValue);

    function generatePixelSnowflake() {
      if (document.hidden) {
        return;
      }
      const y = Math.random() * -100;
      const x = Math.random() * weatherCanvas.width;
      const size = (Math.random() * 8 + 8) / Math.pow(weatherModifier, 0.8); // TODO - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ç—å, —Å–∏–ª—å–Ω–æ –ª–∏ –≤–ª–∏—è–µ—Ç Math.pow –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—Ç
      const ySpeed = size * 0.1 * Math.pow(weatherModifier, 0.8) - 0.6;
      const xSpeed = (Math.random() - Math.random()) * 0.2;
      const imageData =
        images.pixelSnow[Math.floor(Math.random() * images.pixelSnow.length)];
      const image = imageData.image;
      const opacity = 1;

      return { x, y, size, ySpeed, xSpeed, image, opacity };
    }

    return { pixelSnowflakes };
  }

  function drawPixelSnowflake(x, y, size, image) {
    weatherCtx.drawImage(image, x - size / 2, y - size / 2, size, size);
  }
  // ====================================================================================================================
  //   . . . –ê–ù–ò–ú–ê–¶–ò–Ø –ü–û–ì–û–î–´ / –ß–ê–°–¢–ò–¶ . . .
  // ====================================================================================================================
  function animateWeather() {
    weatherCtx.clearRect(0, 0, weatherCanvas.width, weatherCanvas.height);

    if (raindrops.length > 0) {
      for (const raindrop of raindrops) {
        raindrop.y += raindrop.ySpeed;
        raindrop.x += raindrop.xSpeed;
        drawRaindrop(raindrop);
      }
    }

    if (snowflakes.length > 0) {
      for (const snowflake of snowflakes) {
        snowflake.y += snowflake.ySpeed;
        snowflake.x += snowflake.xSpeed;
        drawSnowflake(snowflake.x, snowflake.y, snowflake.size);
      }
    }

    if (pixelSnowflakes.length > 0) {
      for (const pixelSnowflake of pixelSnowflakes) {
        pixelSnowflake.y += pixelSnowflake.ySpeed;
        pixelSnowflake.x += pixelSnowflake.xSpeed;
        drawPixelSnowflake(
          pixelSnowflake.x,
          pixelSnowflake.y,
          pixelSnowflake.size,
          pixelSnowflake.image
        );
      }
    }

    if (pixelRaindrops.length > 0) {
      for (const pixelRaindrop of pixelRaindrops) {
        pixelRaindrop.y += pixelRaindrop.ySpeed;
        pixelRaindrop.x += pixelRaindrop.xSpeed;
        drawPixelRaindrop(pixelRaindrop);
      }
    }

    requestAnimationFrame(animateWeather);
  }
  if (settings.weatherEnabled || settings.manualWeatherPanel) {
    animateWeather();
  }
  // ====================================================================================================================
  //   . . . –°–ï–í–ï–†–ù–û–ï –°–ò–Ø–ù–ò–ï . . . üåü
  // ====================================================================================================================
  const auroraColors = {
    green: {
      1: "#aaff9d",
      2: "#00faa0",
      3: "#00ff62",
    },
    blue: {
      1: "#9DF5ED",
      2: "#82BBF5",
      3: "#725DFA",
    },
  };
  const auroras = [];

  function removeAurora(auroraElement) {
    auroraElement.style.animation = "auroraFadeOut 6s ease-in-out";
  
    setTimeout(() => {
      if (weatherContainer.contains(auroraElement)) {
        weatherContainer.removeChild(auroraElement);
        const index = auroras.indexOf(auroraElement);
        if (index > -1) {
          auroras.splice(index, 1);
        }
      } else {
        console.warn("Element to be removed is not a child of weatherContainer.");
      }
    }, 6000);
  }

  function createAurora(color) {
    for (const auroraElement of auroras) {
      removeAurora(auroraElement);
    }

    const newAurora = document.createElement("div");

    newAurora.style.cssText = `
    transform: translate(0, 60%);
    z-index: -1;
    position: fixed;
    left: 0;
    width: 100%;
    height: 30%;
    filter: blur(4rem);
    animation: aurora-spin 15s linear infinite, auroraFadeIn 6s ease-in-out;
    background: conic-gradient(from var(--gradient-angle),
    ${auroraColors[color][1]},
    ${auroraColors[color][2]},
    ${auroraColors[color][3]},
    ${auroraColors[color][2]},
    ${auroraColors[color][1]});
    `;

    if (settings.auroraPos === "1") {
      newAurora.style.top = "-30%";
    } else if (settings.auroraPos === "2") {
      newAurora.style.bottom = "0";
    }

    weatherContainer.appendChild(newAurora);
    auroras.push(newAurora);
  }

  function toggleAurora() {
      if (settings.manualWeatherPanel) return;

      const isAuroraConditionMet = 
          currentWeather === "northernLights" || 
          (currentWeather === "clear" && 
          currentHour === "night" && 
          (currentSeason === "autumn" || currentSeason === "winter"));

      if (isAuroraConditionMet) {
          if (auroras.length === 0) {
              const auroraColor = Math.random() > 0.5 ? "green" : "blue";
              createAurora(auroraColor);
          }
      } else {
          auroras.forEach(removeAurora);
      }
  }

  setInterval(() => {
    toggleAurora();
    if (!settings.manualWeatherPanel) {
      generateFirefliesNaturally();
    }
  }, 2000);
  // ====================================================================================================================
  //   . . . –°–í–ï–¢–õ–Ø–ß–ö–ò . . . ü™≤
  // ====================================================================================================================
  const fireflies = [];
  const glowSizeMultiplier = 12;

  function generateFirefly() {
    const x = Math.random() * weatherCanvas.width;
    const y = Math.random() * weatherCanvas.height;
    const size = Math.random() * 5 + 10;
    const xSpeed = (Math.random() - 0.5) * 0.5;
    const ySpeed = (Math.random() - 0.5) * 0.5;

    const firefly = document.createElement("div");
    firefly.className = "firefly";
    firefly.style.left = x + "px";
    firefly.style.top = y + "px";
    firefly.style.width = size + "px";
    firefly.style.height = size + "px";

    const glow = document.createElement("div");
    glow.className = "firefly-glow";
    glow.style.left = x + "px";
    glow.style.top = y + "px";
    glow.style.width = size * glowSizeMultiplier + "px";
    glow.style.height = size * glowSizeMultiplier + "px";

    return { element: firefly, glowElement: glow, x, y, size, xSpeed, ySpeed };
  }

  function createNewFirefliesIfNeeded() {
    const missingFireflies = desiredNumberOfFireflies - fireflies.length;

    for (let i = 0; i < missingFireflies; i++) {
      const newFirefly = generateFirefly();
      fireflies.push(newFirefly);
      weatherContainer.appendChild(newFirefly.element);
      weatherContainer.appendChild(newFirefly.glowElement);
    }
  }

  function removeFireflies() {
    for (const firefly of fireflies) {
      weatherContainer.removeChild(firefly.element);
      weatherContainer.removeChild(firefly.glowElement);
    }
    fireflies.length = 0;
  }

  function toggleFireflies() {
    if (settings.manualWeatherPanel) {
      if (fireflies.length === 0) {
        for (let i = 0; i < desiredNumberOfFireflies; i++) {
          fireflies.push(generateFirefly());
          weatherContainer.appendChild(fireflies[i].element);
          weatherContainer.appendChild(fireflies[i].glowElement);
        }
      } else {
        for (const firefly of fireflies) {
          firefly.element.classList.add("firefly-disappearing");
          firefly.glowElement.classList.add("firefly-disappearing");
        }
        setTimeout(() => {
          removeFireflies();
        }, 6000);
      }
    }
  }

  function generateFirefliesNaturally() {
    if (
      currentWeather === "clear" &&
      currentHour === "night" &&
      currentSeason === "summer"
    ) {
      if (fireflies.length === 0) {
        for (let i = 0; i < desiredNumberOfFireflies; i++) {
          fireflies.push(generateFirefly());
          weatherContainer.appendChild(fireflies[i].element);
          weatherContainer.appendChild(fireflies[i].glowElement);
        }
      }
    } else {
      for (const firefly of fireflies) {
        firefly.element.classList.add("firefly-disappearing");
        firefly.glowElement.classList.add("firefly-disappearing");
      }
      setTimeout(() => {
        removeFireflies();
      }, 6000);
    }
  }

  function animateFireflies() {
    for (let i = fireflies.length - 1; i >= 0; i--) {
      const firefly = fireflies[i];
      firefly.x += firefly.xSpeed;
      firefly.y += firefly.ySpeed;

      if (firefly.x < 0 || firefly.x + firefly.size > weatherCanvas.width) {
        firefly.xSpeed *= -1;
      }
      if (firefly.y < 0 || firefly.y + firefly.size > weatherCanvas.height) {
        firefly.ySpeed *= -1;
      }

      firefly.element.style.left = firefly.x + "px";
      firefly.element.style.top = firefly.y + "px";

      firefly.glowElement.style.left =
        firefly.x - (firefly.size * glowSizeMultiplier) / 2 + "px";
      firefly.glowElement.style.top =
        firefly.y - (firefly.size * glowSizeMultiplier) / 2 + "px";

      createNewFirefliesIfNeeded();
    }

    requestAnimationFrame(animateFireflies);
  }

  if (settings.weatherEnabled || settings.manualWeatherPanel) {
    animateFireflies();
  }
  // ====================================================================================================================
  //   . . . –ü–†–ò–ó–ï–ú–õ–ï–ù–ò–ï –ß–ê–°–¢–ò–¶ . . . ‚òî
  // ====================================================================================================================
  const landedSnowflakes = [];
  const landedPixelSnowflakes = [];
  const splashes = [];
  const pixelSplashes = [];

  switch (true) {
    case settings.manualWeatherPanel && !settings.weatherDrops:
    case settings.weatherEnabled && !settings.weatherDrops:
      setInterval(() => {
        checkElements(raindrops, weatherContainer);
        checkElements(snowflakes, weatherContainer);
        checkElements(pixelSnowflakes, weatherContainer);
        checkElements(pixelRaindrops, weatherContainer);
      }, 120);
      break;

    case settings.manualWeatherPanel && settings.weatherDrops:
    case settings.weatherEnabled && settings.weatherDrops:
      animateLanding();
      break;

    default:
      break;
  }

  function checkElements(elements, container) {
    for (let i = elements.length - 1; i >= 0; i--) {
      const element = elements[i];

      if (
        element &&
        (element.y >= container.offsetHeight ||
          element.x >= container.offsetWidth ||
          element.x <= 0)
      ) {
        elements.splice(i, 1);
      }
    }
    // console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${elements.length}`)
  }

  function animateLanding() {
    for (let i = snowflakes.length - 1; i >= 0; i--) {
      const snowflake = snowflakes[i];
      if (snowflake.y >= weatherCanvas.height - snowflake.size) {
        snowflakes.splice(i, 1);
        landedSnowflakes.push(snowflake);
      }
    }
    for (let i = pixelSnowflakes.length - 1; i >= 0; i--) {
      const pixelSnowflake = pixelSnowflakes[i];
      if (pixelSnowflake.y >= weatherCanvas.height - pixelSnowflake.size) {
        pixelSnowflakes.splice(i, 1);
        landedPixelSnowflakes.push(pixelSnowflake);
      }
    }
    for (let i = landedSnowflakes.length - 1; i >= 0; i--) {
      const snowflake = landedSnowflakes[i];
      snowflake.opacity -= 0.001;
      if (snowflake.opacity <= 0) {
        landedSnowflakes.splice(i, 1);
      }
    }
    for (const snowflake of landedSnowflakes) {
      weatherCtx.globalAlpha = snowflake.opacity;
      drawSnowflake(snowflake.x, snowflake.y, snowflake.size);
    }

    for (let i = landedPixelSnowflakes.length - 1; i >= 0; i--) {
      const pixelSnowflake = landedPixelSnowflakes[i];
      pixelSnowflake.opacity -= 0.001;

      if (pixelSnowflake.opacity <= 0) {
        landedPixelSnowflakes.splice(i, 1);
      }
    }
    for (const pixelSnowflake of landedPixelSnowflakes) {
      weatherCtx.globalAlpha = pixelSnowflake.opacity;
      drawPixelSnowflake(
        pixelSnowflake.x,
        pixelSnowflake.y,
        pixelSnowflake.size,
        pixelSnowflake.image
      );
    }

    for (let i = raindrops.length - 1; i >= 0; i--) {
      const raindrop = raindrops[i];
      if (raindrop.y >= weatherCanvas.height - raindrop.length) {
        raindrops.splice(i, 1);
        splashes.push(generateSplash(raindrop.x, weatherCanvas.height));
      }
    }

    for (let i = pixelRaindrops.length - 1; i >= 0; i--) {
      const pixelRaindrop = pixelRaindrops[i];
      if (pixelRaindrop.y >= weatherCanvas.height - pixelRaindrop.size) {
        pixelRaindrops.splice(i, 1);
        pixelSplashes.push(
          generateSplash(pixelRaindrop.x, weatherCanvas.height - 24)
        );
      }
    }

    for (const splash of splashes) {
      splash.x += splash.xSpeed;
      splash.y += splash.ySpeed;
      splash.ySpeed += 0.1;

      weatherCtx.beginPath();
      weatherCtx.arc(
        splash.x,
        splash.y,
        splash.size / 1.2 / weatherModifier,
        0,
        Math.PI * 2
      );
      weatherCtx.fillStyle = "rgba(150, 150, 150, 0.4)";
      weatherCtx.fill();
    }

    for (const pixelSplash of pixelSplashes) {
      pixelSplash.x += pixelSplash.xSpeed;
      pixelSplash.y += pixelSplash.ySpeed;
      pixelSplash.ySpeed += 0.1;
      weatherCtx.drawImage(
        pixelSplash.image,
        pixelSplash.x,
        pixelSplash.y,
        pixelSplash.size * weatherModifier * 2,
        pixelSplash.size * weatherModifier * 2
      );
    }

    checkSplashes();
    checkPixelSplashes();
    weatherCtx.globalAlpha = 1;
    requestAnimationFrame(animateLanding);
  }

  function generateSplash(x, y) {
    const size = Math.random() * 5 + 2;
    const xSpeed = (Math.random() - 0.5) * 2;
    const ySpeed = -Math.random() * 2 - 1;
    const imageData =
      images.pixelSplash[Math.floor(Math.random() * images.pixelSplash.length)];
    const image = imageData.image;

    return { x, y, size, xSpeed, ySpeed, image };
  }

  function checkSplashes() {
    for (let i = splashes.length - 1; i >= 0; i--) {
      const splash = splashes[i];
      if (
        splash.y >= weatherCanvas.height ||
        splash.x >= weatherCanvas.width ||
        splash.x <= 0
      ) {
        splashes.splice(i, 1);
      }
    }
    // console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–ª–µ—à–µ–≤: ${splashes.length}`)
  }
  function checkPixelSplashes() {
    for (let i = pixelSplashes.length - 1; i >= 0; i--) {
      const pixelSplash = pixelSplashes[i];
      if (
        pixelSplash.y >= weatherCanvas.height ||
        pixelSplash.x >= weatherCanvas.width ||
        pixelSplash.x <= 0
      ) {
        pixelSplashes.splice(i, 1);
      }
    }
  }
// ====================================================================================================================
} // –ö–æ–Ω–µ—Ü –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–≥–æ, –Ω–æ –∏ –Ω–∞—á–∞–ª–æ —á–µ–≤–æ —Ç–æ –Ω–æ–≤–æ–≥–æ... –ó–æ–≥–¥–∞—á–Ω–æ......
// ====================================================================================================================
// ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®ü¶ê‚ú®
// ====================================================================================================================
//   . . . –¢–ê–†–ì–ï–¢–ò–ù–ì –û–ö–ù–ê –û–•–û–¢–´ –ò –ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í . . .
// ====================================================================================================================
if (window.location.href === targetCW3Hunt) {
  amogusSus();
  const containerElement = document.querySelector("body");
  const globalContainerElement = document.createElement("div");
  globalContainerElement.id = "uwu-main-container";
  containerElement.appendChild(globalContainerElement);
  // ====================================================================================================================
  //   . . . –ü–û–î–ü–ò–°–´–í–ê–¢–¨ –ó–ê–ü–ê–• . . .
  // ====================================================================================================================
  if (settings.describeHuntingSmell) {
    const smellElement = document.getElementById("smell");
    let smellText = null;
    let smellTimer = null;
    let previousRed = null;
    let seconds = 0;

    function updateHintText(currentRed) {
      if (currentRed === 0) {
        smellText.textContent = "–ü–æ—Ç–µ—Ä—è–Ω";
      } else if (previousRed !== null) {
        if (currentRed > previousRed) {
          smellText.textContent = "–ë–ª–∏–∂–µ";
        } else if (currentRed < previousRed) {
          smellText.textContent = "–î–∞–ª—å—à–µ";
        }
      } else {
        smellText.textContent = " ";
      }
      previousRed = currentRed;
    }

    function updateTimer() {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      smellTimer.textContent = `${String(minutes).padStart(2, "0")}:${String(
        remainingSeconds
      ).padStart(2, "0")}`;
      seconds++;
    }

    function handleSmellChange() {
      const style = window.getComputedStyle(smellElement);
      const currentColor = style.backgroundColor;

      if (
        currentColor !== "rgba(0, 0, 0, 0)" &&
        currentColor !== "transparent"
      ) {
        if (!smellText) {
          smellText = document.createElement("div");
          smellText.id = "smellText";
          smellTimer = document.createElement("div");
          smellTimer.id = "smellTimer";
          document.body.appendChild(smellText);
          document.body.appendChild(smellTimer);

          intervalId = setInterval(updateTimer, 1000);
        }

        const currentRed = parseInt(
          currentColor.slice(
            currentColor.indexOf("(") + 1,
            currentColor.indexOf(",")
          )
        );
        updateHintText(currentRed);
      }
    }

    new MutationObserver(handleSmellChange).observe(smellElement, {
      attributes: true,
      attributeFilter: ["style"],
    });

    const describeHuntingSmell = document.createElement("style");
    describeHuntingSmell.innerHTML = `
  #smellText {
    font-size: 20px;
    background: white;
    color: black;
    text-align: center;
    width: 100px;
    position: absolute;
    z-index: 3;
    bottom: 60px;
  }
  
  #smellTimer {
    font-size: 18px;
    background: white;
    color: black;
    text-align: center;
    width: 100px;
    position: absolute;
    z-index: 3;
    bottom: 40px; 
  }
  `;
    document.head.appendChild(describeHuntingSmell);
  }
  // ====================================================================================================================
  //   . . . –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –î–ñ–û–ô–°–¢–ò–ö . . .
  // ====================================================================================================================
  // –†–∞–±–æ—Ç–∞–µ–º —Å —Å–∞–π—Ç–æ–≤—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞–∂–∞—Ç–∏–π: "//e.catwar.net/js/key.js?268881668"
  if (settings.huntingVirtualJoystick) {
    function createJoystick() {
      const joystickHTML = `
        <div id="joystick-container">
          <div id="joystick-base">
            <div id="joystick-head"></div>
          </div>
        </div>
      `;

      const uwuContainer = document.getElementById("uwu-main-container");
      uwuContainer.insertAdjacentHTML("beforeend", joystickHTML);

      const css = // css
      `
        #nav_buttons_wrapper {
          display: none;
        }
  
        #joystick-container {
          pointer-events: auto;
          position: fixed;
          bottom: 20px;
          right: 20px;
          width: ${settings.sizeHuntingVirtualJoystick}px; 
          height: ${settings.sizeHuntingVirtualJoystick}px;
          z-index: 10; 
        }
  
        #joystick-base {
          width: 100%;
          height: 100%;
          border-radius: 50%;
          background-color: rgba(128, 128, 128, 0.5);
          position: relative;
        }
  
        #joystick-head {
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          width: ${settings.sizeHuntingVirtualJoystick / 2}px;
          height: ${settings.sizeHuntingVirtualJoystick / 2}px;
          border-radius: 50%;
          background-color: #808080;
          touch-action: none; 
        }
      `;
      const style = document.createElement("style");
      style.innerHTML = css;
      document.head.appendChild(style);

      const joystickContainer = document.getElementById("joystick-container");
      const joystickHead = document.getElementById("joystick-head");
      const baseRadius = joystickContainer.offsetWidth / 2;
      let activeTouchId = null;
      let keys = {};

      function handleTouchStart(event) {
        if (activeTouchId === null) {
          const touch = event.touches[0];
          activeTouchId = touch.identifier;
          updateJoystickPosition(touch.clientX, touch.clientY);
        }
      }

      function handleTouchMove(event) {
        event.preventDefault();
        for (let i = 0; i < event.touches.length; i++) {
          const touch = event.touches[i];
          if (touch.identifier === activeTouchId) {
            updateJoystickPosition(touch.clientX, touch.clientY);
            break;
          }
        }
      }

      function handleTouchEnd(event) {
        activeTouchId = null;
        resetJoystick();
        releaseAllKeys();
      }

      function updateJoystickPosition(x, y) {
        const containerRect = joystickContainer.getBoundingClientRect();
        const deltaX = x - (containerRect.left + baseRadius);
        const deltaY = y - (containerRect.top + baseRadius);
        const angle = Math.atan2(deltaY, deltaX);
        const distance = Math.min(Math.hypot(deltaX, deltaY), baseRadius * 0.8);

        joystickHead.style.left = `${
          baseRadius + distance * Math.cos(angle)
        }px`;
        joystickHead.style.top = `${baseRadius + distance * Math.sin(angle)}px`;

        const threshold = 0.3;
        const newDirections = {
          w: false,
          a: false,
          s: false,
          d: false,
          q: false,
          e: false,
          z: false,
          x: false,
        };

        simulateKeyRelease("w");
        simulateKeyRelease("a");
        simulateKeyRelease("s");
        simulateKeyRelease("d");
        simulateKeyRelease("q");
        simulateKeyRelease("e");
        simulateKeyRelease("z");
        simulateKeyRelease("x");

        if (distance > baseRadius * threshold) {
          if (angle >= -Math.PI * 0.125 && angle < Math.PI * 0.125) {
            newDirections.d = true;
          } else if (angle >= Math.PI * 0.125 && angle < Math.PI * 0.375) {
            newDirections.x = true;
          } else if (angle >= Math.PI * 0.375 && angle < Math.PI * 0.625) {
            newDirections.s = true;
          } else if (angle >= Math.PI * 0.625 && angle < Math.PI * 0.875) {
            newDirections.z = true;
          } else if (angle >= Math.PI * 0.875 || angle < -Math.PI * 0.875) {
            newDirections.a = true;
          } else if (angle >= -Math.PI * 0.875 && angle < -Math.PI * 0.625) {
            newDirections.q = true;
          } else if (angle >= -Math.PI * 0.625 && angle < -Math.PI * 0.375) {
            newDirections.w = true;
          } else if (angle >= -Math.PI * 0.375 && angle < -Math.PI * 0.125) {
            newDirections.e = true;
          }
        }

        for (const key in newDirections) {
          if (newDirections[key] !== keys[key]) {
            if (newDirections[key]) {
              simulateKeyPress(key);
            } else {
              simulateKeyRelease(key);
            }
            keys[key] = newDirections[key];
          }
        }
      }

      function resetJoystick() {
        joystickHead.style.left = "50%";
        joystickHead.style.top = "50%";
      }

      function releaseAllKeys() {
        for (const key in keys) {
          if (keys[key]) {
            simulateKeyRelease(key);
            keys[key] = false;
          }
        }
      }

      function simulateKeyPress(key) {
        const keyCode = Key.dict[key];
        if (keyCode && !Key.keys.includes(keyCode)) {
          Key.push(keyCode);
          const mockEvent = createMockEvent(keyCode);
          Key.keydown(mockEvent);
        }
      }

      function simulateKeyRelease(key) {
        const keyCode = Key.dict[key];
        if (keyCode) {
          const mockEvent = createMockEvent(keyCode);
          Key.keyup(mockEvent);
          const index = Key.keys.indexOf(keyCode);
          if (index > -1) {
            Key.keys.splice(index, 1);
          }
        }
      }

      function createMockEvent(keyCode) {
        return {
          keyCode: keyCode,
          ctrlKey: false,
          shiftKey: false,
          altKey: false,
          preventDefault: () => {},
          repeat: false,
        };
      }

      joystickContainer.addEventListener("touchstart", handleTouchStart);
      joystickContainer.addEventListener("touchmove", handleTouchMove);
      joystickContainer.addEventListener("touchend", handleTouchEnd);
      joystickContainer.addEventListener("touchcancel", handleTouchEnd);

      window.addEventListener("blur", function () {
        releaseAllKeys();
        resetJoystick();
      });
    }

    createJoystick();
  }
  // ====================================================================================================================
}
// ====================================================================================================================
function amogusSus() {
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°ø‚†õ‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†ª‚¢ø‚£ø‚£∑‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†Ä‚†à‚¢ª‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚°è‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£æ‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Å‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£Ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢ø‚£∑‚°Ñ‚†Ä ");
  console.log("‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£∂‚£ø‚°ü‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£∑‚†Ä ");
  console.log("‚†Ä‚¢∞‚£ø‚°ü‚†ã‚†â‚£π‚£ø‚°á‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£§‚£§‚£§‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚†Ä ");
  console.log("‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä ");
  console.log("‚†Ä‚£∏‚£ø‚°á‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†õ‚¢ª‚£ø‚°á‚†Ä‚†Ä ");
  console.log("‚†Ä‚£ø‚£ø‚†Å‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ß‚†Ä‚†Ä ");
  console.log("‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä ");
  console.log("‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä ");
  console.log("‚†Ä‚¢ø‚£ø‚°Ü‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä ");
  console.log("‚†Ä‚†∏‚£ø‚£ß‚°Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†É‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚†∂‚†Ä‚†Ä‚¢†‚£ø‚£ø‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚£Ω‚£ø‚°è‚†Å‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°á‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°á‚†Ä‚¢π‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚†á‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£¶‚£Ñ‚£Ä‚£†‚£¥‚£ø‚£ø‚†Å‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä ");
  console.log("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ª‚†ø‚†ø‚†ø‚†ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä");
}
// ====================================================================================================================
//   . . . –¢–ê–†–ì–ï–¢–ò–ù–ì –ë–õ–û–ì–û–í–û–ô –°–¢–†–ê–ù–ò–¶–´ . . .
// ====================================================================================================================
if (targetBlogsCreation.test(window.location.href)) {
  // ====================================================================================================================
  //   . . . –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–õ–û–ì–û–í–û–ì–û –¢–ï–ö–°–¢–ê . . .
  // ====================================================================================================================
  if (settings.restoreBlogCreation) {
    const textarea = document.getElementById("creation-text");

    function saveTextToStorage(text) {
      localStorage.setItem("uwu_blogCreation", text);
    }

    function restoreTextFromStorage() {
      const savedText = localStorage.getItem("uwu_blogCreation");
      if (savedText && !textarea.value) {
        textarea.value = savedText;
      }
    }

    textarea.addEventListener("input", () => {
      saveTextToStorage(textarea.value);
    });

    window.addEventListener("beforeunload", () => {
      saveTextToStorage(textarea.value);
    });

    restoreTextFromStorage();
  }
}

// ====================================================================================================================
//   . . . –ö–ù–û–ü–ö–ò BB-–ö–û–î–û–í . . .
// ====================================================================================================================
if (settings.moreBBCodes) {
  function addBBCodeButtons() {
    const bbCodeContainers = document.querySelectorAll(".bbcode");

    const commonButtonsHTML = // html
    `
      <button class="bbcode" title="–ê–±–∑–∞—Ü" data-code="p">p</button>
      <button class="bbcode" title="–ü–µ—Ä–µ–Ω–æ—Å" data-code="br" data-parameter="0">br</button>
      <button class="bbcode" title="–¢–∞–±–ª–∏—Ü–∞" data-code="table">table</button>
      <button class="bbcode" title="–°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã" data-code="tr">tr</button>
      <button class="bbcode" title="–Ø—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã" data-code="td">td</button>
      <button class="bbcode" title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫" data-code="ol">ol</button>
      <button class="bbcode" title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫" data-code="ul">ul</button>
      <button class="bbcode" title="–°—Ç—Ä–æ–∫–∞ —Å–ø–∏—Å–∫–∞" data-code="li">li</button>
    `;

    const overblockButtonHTML = `
      <button class="bbcode" title="–†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è –±–ª–æ–∫" data-code="overblock" data-parameter="1" data-text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–≥–æ—Å—è –±–ª–æ–∫–∞ (—Ç–æ –∂–µ, —á—Ç–æ –∏ —É –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –±–ª–æ–∫):">overblock</button>
    `;

    bbCodeContainers.forEach((bbCode) => {
      const container = bbCode.parentElement;
      if (!container) return;

      if (!container.querySelector('.bbcode[data-code="p"]')) {
        container.insertAdjacentHTML("beforeend", commonButtonsHTML);
      }

      const blockElement = container.querySelector('[data-code="block"]');
      if (
        blockElement &&
        !container.querySelector('.bbcode[data-code="overblock"]')
      ) {
        blockElement.insertAdjacentHTML("afterend", overblockButtonHTML);
      }
    });
  }

  setupSingleCallback(".bbcode", addBBCodeButtons);
}
// ====================================================================================================================
//   . . . –ü–†–û–§–ò–õ–¨ –ò–ì–†–û–ö–ê . . .
// ====================================================================================================================
if (targetMainProfile.test(window.location.href)) {

  if (settings.calculators) {
    setupSingleCallback("#info", setupActivityCalc);
    setupSingleCallback("#info", moonCalculator);
  }

}
// ====================================================================================================================
//   . . . –ü–†–û–§–ò–õ–Ø –î–†–£–ì–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô . . .
// ====================================================================================================================
if (targetProfile.test(window.location.href)) {

  // ====================================================================================================================
  //   . . . –ë–£ –ò –ü–†–û–ß–ï–ï . . .
  // ====================================================================================================================
  if (settings.moreProfileInfo) {
    setupSingleCallback("tr:has(img[src='img/icon_kraft.png'])", addKraftLevel);
    
    function addKraftLevel() {
      const kraftLevels = {
        "–±–ª–æ—Ö–∞": 0,
        "–∫–æ—Ç—ë–Ω–æ—á–µ–∫": 1,
        "–∑–∞–¥–∏—Ä–∞": 2,
        "–≥—Ä–æ–∑–∞ –¥–µ—Ç—Å–∫–æ–π": 3,
        "—Å—Ç—Ä–∞—Ö –±–∞—Ä—Å—É–∫–æ–≤": 4,
        "–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Å–æ–≤": 5,
        "–∑–∞—â–∏—Ç–Ω–∏–∫ –ø–ª–µ–º–µ–Ω–∏": 6,
        "–≤–µ–ª–∏–∫–∏–π –≤–æ–∏–Ω": 7,
        "–¥–æ—Å—Ç–æ–∏–Ω –õ—å–≤–∏–Ω–æ–≥–æ –ø–ª–µ–º–µ–Ω–∏": 8,
        "–∏–¥–µ–∞–ª—å–Ω–∞—è": 9
      };
    
        const kraftRow = document.querySelector('tr:has(img[src="img/icon_kraft.png"])');
        const kraftTextElement = kraftRow.querySelector('b');
        const kraftText = kraftTextElement.textContent.trim();
        const kraftLevel = kraftLevels[kraftText];
        if (kraftLevel !== undefined) {
            kraftTextElement.textContent = `${kraftText} (${kraftLevel})`;
        }
    }
  }
  
  if (settings.calculators) {
    setupSingleCallback("#info", moonCalculator);
  }
}

// ===================================================================================================================
// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –≤–æ–∑—Ä–∞—Å—Ç–∞/–ª—É–Ω –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ–º "CatWar Mod (–í–∞—Ä–æ–º–æ–¥) –æ—Ç –•–≤–æ–π–Ω–∏—Ü—ã"
// ====================================================================================================================
//   . . . –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–û–ó–†–ê–°–¢–ê / –õ–£–ù . . .
// ====================================================================================================================
function moonCalculator() {
  const months = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
  ];

  const catTimeStart = 1200000000000;

  const infoElement = document.getElementById("info");
  if (!infoElement) return;

  const style = document.createElement("style");
  style.textContent = `
    .calculator-error { color: darkred; }
    .hidden { display: none; }
    .calculator-style { max-width: 400px; margin: 5px; padding: 5px; border-radius: 10px; background: #ffffff08; }
  `;
  document.head.appendChild(style);

  let calculatorAgeElement = document.getElementById("calculator-age");
  if (!calculatorAgeElement) {
    infoElement.insertAdjacentHTML('afterend', `<div id="calculator-age" class="calculator-style hidden"></div>`);
    calculatorAgeElement = document.getElementById("calculator-age");
  }

  const infoObserver = new MutationObserver((mutations) => {
    mutations.forEach(() => {
      if (!infoElement.textContent.match("–î–∞—Ç–∞")) {
        calculatorAgeElement.classList.add("hidden");
        return;
      }

      calculatorAgeElement.classList.remove("hidden");

      const birthDateString = infoElement.textContent.match(/\d{4}-\d\d-\d\d \d\d:\d\d/)[0].replace(" ", "T");
      const nowDateString = formatDate(new Date());

      const ageMoons = getMoonsFromElement("age_icon");
      const age2Moons = getMoonsFromElement("age2_icon");

      const sex = document.querySelector('[src^="//e.catwar.net/avatar"]').style.borderColor;
      const isRegistrationDate = /—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü/.test(infoElement.textContent);
      const moonsNow = age2Moons ? (isRegistrationDate ? ageMoons : age2Moons) : ageMoons;

      const bornWord = getBornWord(sex, isRegistrationDate);
      const catTimeString = formatCatTime(Date.parse(birthDateString), moonsNow);

      calculatorAgeElement.innerHTML = `
        <p><b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞</b></p>
        <label>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <input type="datetime-local" id="calculator-date" min="${birthDateString}" value="${nowDateString}" max="9999-12-31T23:59"></label> <span id="calculator-error-date" class="calculator-error"></span>
        <br><label>–í–æ–∑—Ä–∞—Å—Ç: <input type="number" id="calculator-moons" min="0" step="0.1" value="${moonsNow}" style="width: 60px"></label> <span id="moon-word"></span> <span id="calculator-error-moons" class="calculator-error"></span>
        <br>${bornWord} ${catTimeString} –ø–æ –∫–æ—à–∞—á—å–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.
        <br><br>
      `;

      updateMoonWord(moonsNow);

      const calculatorDateElement = document.getElementById("calculator-date");
      const calculatorMoonsElement = document.getElementById("calculator-moons");

      calculatorDateElement.addEventListener("input", function () {
        handleDateInput.call(this, birthDateString);
      });

      calculatorMoonsElement.addEventListener("input", function () {
        handleMoonsInput.call(this, birthDateString);
      });
    });
  });

  infoObserver.observe(infoElement, { childList: true });

  function getMoonsFromElement(iconId) {
    const iconElement = document.querySelector(`img[id="${iconId}"]`);
    if (!iconElement) return 0;
    const ageElement = iconElement.closest("tr").querySelector("td:nth-child(2) b");
    return parseFloat(ageElement.textContent);
  }

  function getBornWord(sex, isRegistrationDate) {
    const sexWords = {
      pink: ["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å", "–†–æ–¥–∏–ª–∞—Å—å"],
      blue: ["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", "–†–æ–¥–∏–ª—Å—è"],
      default: ["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å", "–†–æ–¥–∏–ª–æ—Å—å"],
    };
    return isRegistrationDate ? (sexWords[sex] ? sexWords[sex][0] : sexWords.default[0]) : (sexWords[sex] ? sexWords[sex][1] : sexWords.default[1]);
  }

  function formatDate(date) {
    const pad = (num) => String(num).padStart(2, "0");
    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
  }

  function formatCatTime(birthTimestamp, moons) {
    const daysToAdd = moons * 4;
    const targetDate = new Date(birthTimestamp + daysToAdd * 24 * 60 * 60 * 1000);
    const ms = birthTimestamp - catTimeStart;
    let time = Math.round(ms / 1000 * 7);
    const secInYear = 12 * 28 * 24 * 60 * 60;
    const secInMonth = 28 * 24 * 60 * 60;
    const year = Math.floor(time / secInYear);
    time -= year * secInYear;
    const month = Math.floor(time / secInMonth);
    time -= month * secInMonth;
    const day = Math.floor(time / (24 * 60 * 60)) + 1;
    time -= (day - 1) * 24 * 60 * 60;
    const hour = Math.floor(time / (60 * 60));
    time -= hour * 60 * 60;
    const minute = Math.floor(time / 60);
    const pad = (num) => String(num).padStart(2, "0");
    return `${day} ${months[month]} ${year} –≥–æ–¥–∞ –≤ ${pad(hour)}:${pad(minute)}`;
  }

  function handleDateInput(birthDateString) {
    const dateString = this.value;
    const date = Date.parse(dateString);
    const errorDateElement = document.getElementById("calculator-error-date");
    errorDateElement.textContent = "";

    if (isNaN(date) || date < Date.parse(birthDateString)) {
      errorDateElement.textContent = "–û—à–∏–±–∫–∞!";
      return;
    }

    const moons = getMoonsFromDate(birthDateString, dateString);
    const calcMoonsElement = document.getElementById("calculator-moons");
    if (calcMoonsElement) {
      calcMoonsElement.value = moons;
      updateMoonWord(moons);
      const catTimeString = formatCatTime(Date.parse(birthDateString), moons);
      document.querySelector("br").nextSibling.textContent = `${catTimeString} –ø–æ –∫–æ—à–∞—á—å–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.`;
    }
    updateMoonWord(moons);
  }

  function handleMoonsInput(birthDateString) {
    const moons = Number(this.value);
    const errorMoonsElement = document.getElementById("calculator-error-moons");
    errorMoonsElement.textContent = "";

    if (moons < 0 || isNaN(moons)) {
      errorMoonsElement.textContent = "–û—à–∏–±–∫–∞!";
      return;
    }

    const calcDateElement = document.getElementById("calculator-date");
    if (calcDateElement) {
      calcDateElement.value = getDateStringFromMoons(birthDateString, moons);
      updateMoonWord(moons);
      const catTimeString = formatCatTime(Date.parse(birthDateString), moons);
      document.querySelector("br").nextSibling.textContent = `${catTimeString} –ø–æ –∫–æ—à–∞—á—å–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.`;
    }
    updateMoonWord(moons);
  }

  function getMoonsFromDate(birthDateString, dateString) {
    const birthday = Date.parse(birthDateString);
    const date = Date.parse(dateString);
    const moons = Math.floor((date - birthday) / (1000 * 60 * 60 * 24 * 4) * 10) / 10;
    return moons;
  }

  function getDateStringFromMoons(birthDateString, moons) {
    const birthday = Date.parse(birthDateString);
    const age = Math.round(moons * 4 * 24 * 60 * 60 * 1000);
    return formatDate(new Date(birthday + age));
  }

  function updateMoonWord(moons) {
    const integerMoons = Math.floor(moons);
    document.getElementById("moon-word").textContent = declOfNum(integerMoons, ['–ª—É–Ω–∞', '–ª—É–Ω—ã', '–ª—É–Ω']);
  }

  function declOfNum(number, titles) {
    const cases = [2, 0, 1, 1, 1, 2];
    return titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];
  }
}
// ====================================================================================================================
//   . . . –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ê–ö–¢–ò–í–ù–û–°–¢–ò . . .
// ====================================================================================================================
// TODO - –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å, —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–∞–∫-—Ç–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –≤—ã—à–µ.
function setupActivityCalc() {
  const catId = document.getElementById("id_val").textContent;

  const activityStages = [
    { name: "–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ", fromZero: -5000 },
    { name: "–ø–æ–¥–ª–µ–∂–∞—â–∏–π —É–¥–∞–ª–µ–Ω–∏—é", fromZero: -5000 },
    { name: "–ø–æ–∫–∏–Ω—É–≤—à–∏–π –∏–≥—Ä—É", fromZero: -2000 },
    { name: "–∑–∞–±—ã–≤—à–∏–π –ø—Ä–æ –∏–≥—Ä—É", fromZero: -1000 },
    { name: "–∑–∞–±—ã—Ç—ã–π –∫–æ—Ç", fromZero: -750 },
    { name: "—É–∂–∞—Å–Ω–µ–π—à–∞—è", fromZero: -500 },
    { name: "—É–∂–∞—Å–Ω–∞—è", fromZero: -300 },
    { name: "—É—Ö—É–¥—à–∞—é—â–∞—è—Å—è", fromZero: -150 },
    { name: "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è", fromZero: -50 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è", fromZero: -5 },
    { name: "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è", fromZero: 5 },
    { name: "—É–ª—É—á—à–∞—é—â–∞—è—Å—è", fromZero: 50 },
    { name: "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è", fromZero: 150 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥ 2 –º–∏–Ω 15 —Å", fromZero: 225 },
    { name: "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–µ–π—à–∞—è", fromZero: 300 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥ 2 –º–∏–Ω", fromZero: 450 },
    { name: "–ª—é–±–∏–º—ã–π –∫–æ—Ç", fromZero: 500 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥ 1 –º–∏–Ω 45 —Å", fromZero: 675 },
    { name: "–ª–µ–≥–µ–Ω–¥–∞ —Å–∞–π—Ç–∞", fromZero: 750 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥ 1 –º–∏–Ω 30 —Å", fromZero: 900 },
    { name: "—Ö–æ–¥—è—á–∏–π –º–∏—Ñ", fromZero: 1000 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥ 1 –º–∏–Ω 15 —Å", fromZero: 1125 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥ 1 –º–∏–Ω", fromZero: 1350 },
    { name: "–ø–µ—Ä–µ—Ö–æ–¥ 45 c", fromZero: 1575 },
    { name: "–∏–º–ø–µ—Ä–∞—Ç–æ—Ä –ò–≥—Ä–æ–≤–æ–π", fromZero: 2000 },
    { name: "—á–∞—Å—Ç–∏—á–∫–∞ –ò–≥—Ä–æ–≤–æ–π", fromZero: 5000 },
    { name: "—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ò–≥—Ä–æ–≤–æ–π", fromZero: 20000 },
    { name: "–∏–¥–µ–∞–ª—å–Ω–∞—è", fromZero: 75000 },
    { name: "—Å–≤–µ—Ä—Ö–∏–¥–µ–∞–ª—å–Ω–∞—è", fromZero: 150000 },
  ];

  const months = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
  ];

  const activitySettings = JSON.parse(
    window.localStorage.getItem("uwu_activity") || "{}"
  );

  if (!activitySettings[catId]) {
    activitySettings[catId] = { hours: 24, opened: false };
  }

  if (activitySettings[catId].actgoal) {
    activityStages.forEach(function (stage, index) {
      if (index && Number(activitySettings[catId].actgoal) === stage.fromZero) {
        activitySettings[catId].goal = index;
        delete activitySettings[catId].actgoal;
      }
    });
  }

  function calculateActivityLength(days) {
    const minus = activitySettings[catId].minus || 0;
    if (days <= 14) return 150 - minus;
    else if (days >= 1575) return 45 - minus;
    else return Math.ceil(150 - days / 15) - minus;
  }

  function calculateRemainingTime(currentActivity, goal, hoursPerDay) {
    const secondsPerDay = convertTime("h s", hoursPerDay);
    if (calculateActivityLength(currentActivity) * 4 + 1 > secondsPerDay) {
      return { actions: "‚àû", time: "‚àû", date: "–Ω–∏–∫–æ–≥–¥–∞" };
    }

    const actionsWithoutDecrease = goal - currentActivity;
    let days = 0;
    let secondsToday;

    while (currentActivity < goal) {
      secondsToday = 0;
      while (secondsToday < secondsPerDay) {
        currentActivity++;
        secondsToday += calculateActivityLength(currentActivity);
        if (currentActivity >= goal) break;
      }
      if (currentActivity >= goal) break;
      days++;
      currentActivity -= 4.8;
    }

    const actionsDecrease = Math.floor(
      days * 4.8 + convertTime("s h", secondsToday) / 5
    );
    const totalTime = secondsPerDay * days + secondsToday;

    const now = new Date();
    const tomorrow = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate() + 1
    );
    const secondsToTomorrow = convertTime("ms s", tomorrow - now);
    if (days === 0 && secondsToday > secondsToTomorrow) days++;

    const targetDate = new Date(Date.now() + convertTime("d ms", days));

    return {
      actions: actionsWithoutDecrease + actionsDecrease,
      time: secondsToTime(totalTime),
      date:
        targetDate.getDate() +
        " " +
        months[targetDate.getMonth()] +
        " " +
        targetDate.getFullYear(),
    };
  }

  function updateGoalProgress() {
    if (progress.stage === activityStages.length - 1) {
      document.getElementById("goal-progress").style.display = "none";
      return;
    }
    const goalIndex = Number(document.getElementById("activity-list").value);
    const result = calculateRemainingTime(
      progress.doneFromZero,
      activityStages[goalIndex].fromZero,
      activitySettings[catId].hours
    );
    document.querySelector("#goal-progress > ul").innerHTML = `
      <li>${result.actions} ${declensionOfNumber(result.actions, [
      "–ø–µ—Ä–µ—Ö–æ–¥",
      "–ø–µ—Ä–µ—Ö–æ–¥–∞",
      "–ø–µ—Ä–µ—Ö–æ–¥–æ–≤",
    ])} (${result.time})</li>
      <li>–±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ${result.date}</li>
    `;
  }

  const activity = document
    .querySelector("#act_name b")
    .textContent.split(" (");
  const progress = {};

  const currentStage = activityStages.find(stage => stage.name === activity[0]);

  if (currentStage) {
    progress.doneFromZero = currentStage.fromZero + Number(activity[1].split("/")[0]);
    progress.stage = activityStages.indexOf(currentStage); 
  }

  const activityInfoHTML = // html
    `
      <details id="calculator-activity" class="calculator-style">
        <summary id="open-calculator"><b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b></summary>
        <div id="calculator-content" style="margin-top: 10px;">
          <p id="congratulations" style="display:none"></p>
          <div id="activity-length"><b>–ü–µ—Ä–µ—Ö–æ–¥</b>: ${secondsToTime(calculateActivityLength(progress.doneFromZero))}</div>
          <div>–ú–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <input id="minus" type="number" value="${activitySettings[catId].minus || 0}" min="-60" max="10" step="1" style="width: 50px;"> <span id="minus-word"></span></nobr></div>
          <div>–Ø –∫–∞—á–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å <input id="hours-per-day" type="number" step="0.25" min="0" max="24" value="${activitySettings[catId].hours}" style="width: 60px"> <span id="hour-word"></span> –≤ —Å—É—Ç–∫–∏</div>
          <div id="goal-progress">
            <b>–¶–µ–ª—å: <select style="display: inline" id="activity-list"></select></b>:
            <ul style="margin: 0.5em"></ul>
          </div>
          <div id="to-fall-container" style="display: none;">–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞—á–Ω—ë—Ç –ø–∞–¥–∞—Ç—å <span id="to-fall"></span></div>
        </div>
      </details>
    `;

  document
    .getElementById("info")
    .insertAdjacentHTML("afterend", activityInfoHTML);

  if (activitySettings[catId].opened) {
    document.getElementById("calculator-activity").open = true;
  }

  for (let i = progress.stage + 1; i < activityStages.length; i++) {
    const option = document.createElement("option");
    option.value = i;
    option.textContent = activityStages[i].name;
    document.getElementById("activity-list").appendChild(option);
  }

  function showCongratulations() {

    document.getElementById("congratulations").innerHTML = // html
    `
      –¶–µ–ª—å <b>¬´${activityStages[activitySettings[catId].goal].name}¬ª</b> –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!
      <center><img src="/img/stickers/systempaw3/6.png"></center>
      <input id="congratulations-button" type="button" value="–°–∫—Ä—ã—Ç—å">
      <br><input id="never-show-congratulations" type="checkbox"> –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    `;

    document.getElementById("congratulations").style.display = "block";
    document
      .getElementById("congratulations-button")
      .addEventListener("click", function () {
        document.getElementById("congratulations").style.display = "none";
        activitySettings[catId].goal = Number(
          document.getElementById("activity-list").value
        );
        activitySettings[catId].noGrats = document.getElementById(
          "never-show-congratulations"
        ).checked;
        saveData(activitySettings);
      });
  }

  if (activitySettings[catId].goal > progress.stage || activitySettings[catId].noGrats) {
    document.querySelector(
      `#activity-list > [value="${activitySettings[catId].goal}"]`
    ).selected = true;
  } else if (activitySettings[catId].goal) {
    showCongratulations();
  }

  if (activitySettings[catId].minus) {
    document.getElementById("minus").value = activitySettings[catId].minus;
  }

  const hours = activitySettings[catId].hours;
  const minusValue = activitySettings[catId].minus || 0;

  updateHourWord(hours);
  updateGoalProgress();
  updateMinusWord(minusValue);

  if (calculateActivityLength(progress.doneFromZero) !== 45) {
    document.getElementById("to-fall-container").style.display = "none";
  } else {
    const timeFall = new Date(
      Date.now() + (progress.doneFromZero - 1575) * 5 * 3600000
    );
    document.getElementById("to-fall").innerHTML =
      timeFall.getDate() +
      " " +
      months[timeFall.getMonth()] +
      " " +
      timeFall.getFullYear();
    document.getElementById("to-fall-container").style.display = "block";
  }

  document.getElementById("minus").addEventListener("change", function () {
    activitySettings[catId].minus = this.value;
    saveData(activitySettings);
    updateGoalProgress();
    document.getElementById(
      "activity-length"
    ).innerHTML = `<b>–ü–µ—Ä–µ—Ö–æ–¥</b>: ${secondsToTime(
      calculateActivityLength(progress.doneFromZero)
    )}`;
    updateMinusWord(this.value);
  });

  document.getElementById("activity-list").addEventListener("change", function () {
    activitySettings[catId].goal = Number(this.value);
    saveData(activitySettings);
    updateGoalProgress();
  });

  document
    .getElementById("hours-per-day")
    .addEventListener("input", function () {
      const hours = Number(this.value);
      if (hours < 0 || hours > 24 || !Number.isInteger(hours * 1000)) {
        this.value = activitySettings[catId].hours;
        return;
      }
      activitySettings[catId].hours = hours;
      saveData(activitySettings);
      updateHourWord(hours);
      updateGoalProgress();
    });

  document.getElementById("open-calculator").addEventListener("click", function () {
    activitySettings[catId].opened = !document.getElementById("calculator-activity").open;
    saveData(activitySettings);
  });

  function saveData(data) {
    window.localStorage.setItem("uwu_activity", JSON.stringify(data));
  }

  function declensionOfNumber(number, titles) {
    const cases = [2, 0, 1, 1, 1, 2];
    const absNumber = Math.abs(number);
    return titles[
      absNumber % 100 > 4 && absNumber % 100 < 20
        ? 2
        : cases[absNumber % 10 < 5 ? absNumber % 10 : 5]
    ];
  }

  function convertTime(from, value) {
    const factors = {
      ms: 1,
      s: 1000,
      m: 60000,
      h: 3600000,
      d: 86400000,
    };
    const [fromUnit, toUnit] = from.split(" ");
    return (value * factors[fromUnit]) / factors[toUnit];
  }

  function secondsToTime(seconds) {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    let result = "";
    if (days > 0) result += `${days} –¥ `;
    if (hours > 0) result += `${hours} —á `;
    if (minutes > 0) result += `${minutes} –º–∏–Ω `;
    if (secs > 0 || result === "") result += `${secs} —Å`;
    return result.trim();
  }

  function updateHourWord(hours) {
    document.getElementById("hour-word").textContent = declensionOfNumber(hours, ["—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"]);
  }
  
  function updateMinusWord(minusValue) {
    document.getElementById("minus-word").textContent = declensionOfNumber(minusValue, ["—Å–µ–∫—É–Ω–¥—É", "—Å–µ–∫—É–Ω–¥—ã", "—Å–µ–∫—É–Ω–¥"]);
  }
}
// ====================================================================================================================
//   . . . –ü–ò–°–¨–ú–ê . . .
// ====================================================================================================================
if (targetLs.test(window.location.href)) {

  if (settings.lsWrapPreview) {
    setupMutationObserver("#main", setupPreviewButton, {
      childList: true,
      subtree: true,
    }); 
  }

}
// ====================================================================================================================
//   . . . –ë–õ–û–ì–ò . . .
// ====================================================================================================================
if (targetBlog.test(window.location.href)) {

  if (settings.commentPreview) {
    setupMutationObserver("#site_table", addCommentPreview); 
  }

  if (settings.moreCommentButtons) {
    setupMutationObserver("#view_comments", addCommentButtons, {
      childList: true,
      subtree: true,
    });
    setupSingleCallback("#view_comments", handleCommentActions);
  }

}

// ====================================================================================================================
//   . . . –õ–ï–ù–¢–ê . . .
// ====================================================================================================================
if (targetSniff.test(window.location.href)) {
  
  if (settings.commentPreview) {
    setupMutationObserver("#site_table", addCommentPreview); 
  }

  if (settings.moreCommentButtons) {
    setupMutationObserver("#view_comments", addCommentButtons, {
      childList: true,
      subtree: true,
    });
    setupSingleCallback("#view_comments", handleCommentActions);
  }

}

// ====================================================================================================================
//   . . . –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø . . .
// ====================================================================================================================
function addCommentPreview() {
  const form = document.querySelector("#send_comment_form");
  if (!form || document.getElementById("comment-preview")) return;

  const lastParagraph = form.querySelector("p:last-child");
  lastParagraph.insertAdjacentHTML( "afterbegin",
    `
    <input type="button" id="comment-preview" value="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"> 
    `
  );

  form.insertAdjacentHTML( "afterend",
    `
    <p id="comment-preview-hide" style="display: none; margin: 0.5em 0;"><a href="#">–°–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</a></p>
    <div id="comment-preview-div" style="display: none;"></div>
    `
  );

  const previewButton = document.getElementById("comment-preview");
  const hideParagraph = document.getElementById("comment-preview-hide");
  const previewDiv = document.getElementById("comment-preview-div");

  const ws = io(window.location.origin, {
    path: "/ws/blogs/socket.io",
    reconnectionDelay: 10000,
    reconnectionDelayMax: 20000,
  });

  ws.on('creation preview', (data) => {
    previewDiv.innerHTML = data;
    previewDiv.style.display = 'block';
    hideParagraph.style.display = 'block';
  });

  previewButton.addEventListener('click', function() {
    const commentText = document.getElementById('comment').value;
    ws.emit('creation preview', commentText);
  });

  form
    .querySelector('[type="submit"]')
    .addEventListener("click", hideCommentPreview);
  hideParagraph.addEventListener("click", function (e) {
    e.preventDefault();
    hideCommentPreview();
  });

  function hideCommentPreview() {
    hideParagraph.style.display = "none";
    previewDiv.innerHTML = "";
    previewDiv.style.display = "none";
  }
};
// ====================================================================================================================
//   . . . –ö–ù–û–ü–ö–ò –û–¢–í–ï–¢–ò–¢–¨ –ò –¶–ò–¢–ò–†–û–í–ê–¢–¨ . . .
// ====================================================================================================================
function addCommentButtons() {
  const comments = document.querySelectorAll('#view_comments .view-comment');
  comments.forEach(comment => {
      if (!comment.querySelector('.comment-answer-buttons')) {
          comment.insertAdjacentHTML('beforeend', // html
            `
              <p class="comment-answer-buttons">
                  <a class="comment-answer" href="#">–û—Ç–≤–µ—Ç–∏—Ç—å</a>
                  <span class="comment-cite-wrap"> | <a class="comment-cite" href="#">–¶–∏—Ç–∏—Ä–æ–≤–∞—Ç—å</a></span>
              </p>
          `);
      }
  });
}

function getCommentInfo(comment) {
  const commentId = comment.getAttribute('data-id');
  const commentNum = comment.querySelector('.num').textContent;
  const authorLink = comment.querySelector('.comment-info a.author');
  const authorSpan = comment.querySelector('.comment-info span[data-id]');
  const authorName = authorLink ? authorLink.textContent : (authorSpan ? authorSpan.textContent : '...');
  const authorProfile = authorLink ? authorLink.getAttribute('href').replace('/cat', '') : null;
  const commentText = comment.querySelector('.comment-text .parsed').innerText;
  const commentInfo = comment.querySelector('.comment-info');
  const commentTime = commentInfo.innerHTML.split('</b>')[1].split(' @')[0].trim();

  return {
    commentId,
    commentNum,
    authorName,
    authorProfile,
    commentText,
    commentTime
  };
}

function handleAnswerAction(commentInfo) {
  const textarea = document.getElementById('comment');
  const currentText = textarea.value;
  const newText = commentInfo.authorProfile ? 
    `[link${commentInfo.authorProfile}] (#${commentInfo.commentNum}), ` : 
    `[b][code]${commentInfo.authorName}[/code][/b] (#${commentInfo.commentNum}), `;

  textarea.value = currentText + newText;
}

function handleCiteAction(commentInfo) {
  const selectedText = window.getSelection().toString().trim();
  const quoteText = selectedText ? selectedText : commentInfo.commentText;
  const profileLink = commentInfo.authorProfile ? `[link${commentInfo.authorProfile}]` : commentInfo.authorName;

  const quote = `[table][tr][td][size=10][i]–¶–∏—Ç–∞—Ç–∞:[/i] [b]#${commentInfo.commentNum}[/b] ${commentInfo.commentTime} @ ${profileLink}[/size][/td][/tr][tr][td][table=0][tr][td]  [/td][td]${quoteText}[/td][/tr][/table][/td][/tr][/table]`;

  const textarea = document.getElementById('comment');
  const currentText = textarea.value;
  textarea.value = currentText + quote;
}

function handleCommentActions() {
    const viewComments = document.getElementById('view_comments');

    viewComments.addEventListener('click', function(event) {
        const target = event.target;
        const actionMap = {
            'comment-answer': handleAnswerAction,
            'comment-cite': handleCiteAction
        };

        for (const className in actionMap) {
            if (target.classList.contains(className)) {
                event.preventDefault();
                const comment = target.closest('.view-comment');
                const commentInfo = getCommentInfo(comment);
                actionMap[className](commentInfo);
                break;
            }
        }
    });
}

// ====================================================================================================================
//   . . . –ö–†–ê–°–ò–í–´–ô –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–ò–°–¨–ú–ê . . .
// ====================================================================================================================
function setupPreviewButton() {
  const previewButton = document.getElementById('preview');
  if (previewButton) {
      previewButton.addEventListener('click', wrapPreviewInTable);
  }
}

function wrapPreviewInTable() {
  const previewDiv = document.getElementById('preview_div');
  if (!previewDiv) return;

  const mainElement = document.getElementById('main');
  const senderId = mainElement.getAttribute('data-id');
  const senderLogin = mainElement.getAttribute('data-login');
  const subject = document.getElementById('subject').value;
  const currentDate = new Date().toLocaleString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
  });

  const newTable = document.createElement('table');
  newTable.border = "1";
  newTable.style.width = "90%";
  newTable.style.maxWidth = "500px";

  newTable.innerHTML = // html
  `
      <tbody>
          <tr><td id="preview-subject" colspan="2">${subject}</td></tr>
          <tr>
              <td valign="top" id="msg_info">
                  –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <span id="preview-sender"><a href="cat${senderId}">${senderLogin}</a></span>
                  <br>${currentDate}
                  <br>–ü–µ—Ä–µ–ø–∏—Å–∫–∞: <u><big><b>+</b></big></u> ‚Ä¶
              </td>
              <td id="preview-text">${previewDiv.outerHTML}</td>
          </tr>
      </tbody>
  `;

  const existingTable = document.querySelector('table');
  if (existingTable) {
      existingTable.parentNode.replaceChild(newTable, existingTable);
  } else {
      previewDiv.parentNode.insertBefore(newTable, previewDiv);
      previewDiv.style.display = 'none';
  }
}

// ====================================================================================================================
//   . . . –®–ê–ë–õ–û–ù–´ . . .
// ====================================================================================================================
function initializeTemplates() {
  if (!settings.showTemplates) return;

  const templateContainer = // html
  `
      <div id="uwu-templates">
          <h2>–®–ê–ë–õ–û–ù–´</h2>
          <div id="uwu-templates-list"></div>
          <div class="button-container">
              <button id="create-template-button" class="uwu-button install-button">–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω ‚úé</button>
          </div>
      </div>
  `;

  const templateItem = // html
  `
      <div class="uwu-template-item">
          <div class="template-name-container">
              <span class="template-name"></span>
              <button class="rename-button uwu-button install-button" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω">‚úé</button>
          </div>
          <div class="template-actions-container">
              <button class="update-button uwu-button install-button" title="–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω">‚Üª</button>
              <button class="remove-button uwu-button install-button" title="–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω">X</button>
          </div>
      </div>
  `;

  const cssStyles = // css
  `
      #uwu-templates {
        font-family: Montserrat;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        background-color: #242424;
        margin-bottom: 5px;
        margin-top: 5px;
        color: #d5d5d5;
      }
      
      #uwu-templates > h2 {
        font-size: 2em;
        text-align: center;
        margin-top: 10px;
        margin-bottom: 10px;
        letter-spacing: 20px;
      }

      #uwu-templates-list {
        max-height: 220px;
        overflow-x: auto;
        border-radius: 20px;
        background-color: #2e2e2e;
      }

      .uwu-template-item {
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 5px;
        padding-bottom: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      #uwu-templates > div.button-container {
        display: flex;
        justify-content: flex-end;
        padding-left: 10px;
        padding-right: 4px;
        padding-top: 5px;
        padding-bottom: 5px;
      }

      .template-name {
        cursor: pointer;
        text-decoration: underline;
      }

      .uwu-button {
        background-color: rgba(255, 255, 255, 0.03);
        border: 1px solid rgba(255, 255, 255, 0.1);
        padding: 5px 10px;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      
      .uwu-button:hover {
        background-color: rgba(255, 255, 255, 0.2);
      }
  `;

  document.head.insertAdjacentHTML('beforeend', `<style>${cssStyles}</style>`);

  function setupTemplates(targetElementId, contentElementId, subjectElementId = null, pageType) {
    const targetElement = document.getElementById(targetElementId);

    if (!document.getElementById('uwu-templates')) {
        if (targetElementId === 'mess_form') {
            targetElement.insertAdjacentHTML('beforeend', templateContainer);
        } else {
            targetElement.insertAdjacentHTML('afterbegin', templateContainer);
        }
    }

      const templatesList = document.getElementById('uwu-templates-list');
      const createButton = document.getElementById('create-template-button');

      createButton.addEventListener('click', (event) => {
          event.preventDefault();
          createTemplate(contentElementId, subjectElementId, pageType);
      });

      function createTemplate(contentElementId, subjectElementId, pageType) {
          const templateName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:');
          if (templateName) {
              const template = {
                  name: templateName,
                  content: document.getElementById(contentElementId).innerText || document.getElementById(contentElementId).value,
                  subject: subjectElementId ? document.getElementById(subjectElementId).value || "" : "",
                  pageType: pageType
              };
              saveTemplate(template);
              renderTemplates(pageType);
          }
      }

      function saveTemplate(template) {
          if (!localStorage.getItem('uwu_templates')) {
              localStorage.setItem('uwu_templates', JSON.stringify([]));
          }
          const templates = JSON.parse(localStorage.getItem('uwu_templates'));
          templates.push(template);
          localStorage.setItem('uwu_templates', JSON.stringify(templates));
      }

      function renderTemplates(pageType) {
          const templates = JSON.parse(localStorage.getItem('uwu_templates')) || [];
          templatesList.innerHTML = '';

          templates.forEach((template, index) => {
              if (template.pageType === pageType) {
                  const templateItemHTML = document.createElement('div');
                  templateItemHTML.innerHTML = templateItem;
                  const templateItemElement = templateItemHTML.children[0];

                  const templateName = templateItemElement.querySelector('.template-name');
                  templateName.textContent = template.name;
                  templateName.addEventListener('click', () => {
                      if (document.getElementById(contentElementId).tagName === 'DIV') {
                          document.getElementById(contentElementId).innerText = template.content;
                      } else {
                          document.getElementById(contentElementId).value = template.content;
                      }
                      if (subjectElementId) {
                          document.getElementById(subjectElementId).value = template.netbject || "";
                      }
                  });

                  const renameButton = templateItemElement.querySelector('.rename-button');
                  renameButton.addEventListener('click', () => renameTemplate(index));

                  const updateButton = templateItemElement.querySelector('.update-button');
                  updateButton.addEventListener('click', () => updateTemplate(index, contentElementId, subjectElementId));

                  const removeButton = templateItemElement.querySelector('.remove-button');
                  removeButton.addEventListener('click', () => removeTemplate(index));

                  templatesList.appendChild(templateItemElement);
              }
          });
      }

      function renameTemplate(index) {
          const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:');
          if (newName) {
              const templates = JSON.parse(localStorage.getItem('uwu_templates'));
              templates[index].name = newName;
              localStorage.setItem('uwu_templates', JSON.stringify(templates));
              renderTemplates(pageType);
          }
      }

      function updateTemplate(index, contentElementId, subjectElementId) {
          const templates = JSON.parse(localStorage.getItem('uwu_templates'));
          if (document.getElementById(contentElementId).tagName === 'DIV') {
              templates[index].content = document.getElementById(contentElementId).innerText;
          } else {
              templates[index].content = document.getElementById(contentElementId).value;
          }
          if (subjectElementId) {
              templates[index].netbject = document.getElementById(subjectElementId).value || "";
          }
          localStorage.setItem('uwu_templates', JSON.stringify(templates));
          renderTemplates(pageType);
      }

      function removeTemplate(index) {
        const confirmation = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?');
        if (confirmation) {
            const templates = JSON.parse(localStorage.getItem('uwu_templates'));
            templates.splice(index, 1);
            localStorage.setItem('uwu_templates', JSON.stringify(templates));
            renderTemplates(pageType);
        }
    }

      renderTemplates(pageType);
  }

  function checkUrlAndSetup() {
    if (targetLsNew.test(window.location.href) && settings.templatesInLs) {
        setupSingleCallback("#write_form", () => setupTemplates("write_div", "text", "subject", "ls"));
    } else if ((targetBlogsCreation.test(window.location.href) || targetSniffCreation.test(window.location.href)) && settings.templatesInBlogsAndSniffs) {
        setupSingleCallback(".creation_form", () => setupTemplates("creation_form", "creation-text", "creation-title", "blogsAndSniffs"));
    } else if (targetChats.test(window.location.href) && settings.templatesInChats) {
        setupSingleCallback("#mess_form", () => setupTemplates("mess_form", "mess", null, "chat"));
    }
}

setupMutationObserver("#main", checkUrlAndSetup, {
  childList: true,
  attributes: true,
});

setupMutationObserver("#branch", checkUrlAndSetup, {
  childList: true,
});
}

initializeTemplates();